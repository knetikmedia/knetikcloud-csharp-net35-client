/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UsageInfo
    /// </summary>
    [DataContract]
    public partial class UsageInfo :  IEquatable<UsageInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsageInfo" /> class.
        /// </summary>
        /// <param name="Count">The number of requests within the range.</param>
        /// <param name="Date">The date at the start of the range (see granularity).</param>
        /// <param name="Method">The http method.</param>
        /// <param name="Url">The url path.</param>
        public UsageInfo(long? Count = default(long?), long? Date = default(long?), string Method = default(string), string Url = default(string))
        {
            this.Count = Count;
            this.Date = Date;
            this.Method = Method;
            this.Url = Url;
        }
        
        /// <summary>
        /// The number of requests within the range
        /// </summary>
        /// <value>The number of requests within the range</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public long? Count { get; set; }
        /// <summary>
        /// The date at the start of the range (see granularity)
        /// </summary>
        /// <value>The date at the start of the range (see granularity)</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public long? Date { get; set; }
        /// <summary>
        /// The http method
        /// </summary>
        /// <value>The http method</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public string Method { get; set; }
        /// <summary>
        /// The url path
        /// </summary>
        /// <value>The url path</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsageInfo {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UsageInfo);
        }

        /// <summary>
        /// Returns true if UsageInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of UsageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsageInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Count == other.Count ||
                    this.Count != null &&
                    this.Count.Equals(other.Count)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.Method == other.Method ||
                    this.Method != null &&
                    this.Method.Equals(other.Method)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Count != null)
                    hash = hash * 59 + this.Count.GetHashCode();
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.Method != null)
                    hash = hash * 59 + this.Method.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
