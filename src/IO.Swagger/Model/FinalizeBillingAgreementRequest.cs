/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FinalizeBillingAgreementRequest
    /// </summary>
    [DataContract]
    public partial class FinalizeBillingAgreementRequest :  IEquatable<FinalizeBillingAgreementRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinalizeBillingAgreementRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FinalizeBillingAgreementRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FinalizeBillingAgreementRequest" /> class.
        /// </summary>
        /// <param name="InvoiceId">The ID of the invoice being paid along with the creation of this agreement.</param>
        /// <param name="NewDefault">Whether the new payment method created should be the user&#39;s default.</param>
        /// <param name="PayerId">The payer ID from PayPal (passed as a parameter in the return URL). Only required if an invoice ID was included.</param>
        /// <param name="Token">The token from PayPal (passed as a parameter in the return URL) (required).</param>
        /// <param name="UserId">The ID of the user. Defaults to the logged in user.</param>
        public FinalizeBillingAgreementRequest(int? InvoiceId = default(int?), bool? NewDefault = default(bool?), string PayerId = default(string), string Token = default(string), int? UserId = default(int?))
        {
            // to ensure "Token" is required (not null)
            if (Token == null)
            {
                throw new InvalidDataException("Token is a required property for FinalizeBillingAgreementRequest and cannot be null");
            }
            else
            {
                this.Token = Token;
            }
            this.InvoiceId = InvoiceId;
            this.NewDefault = NewDefault;
            this.PayerId = PayerId;
            this.UserId = UserId;
        }
        
        /// <summary>
        /// The ID of the invoice being paid along with the creation of this agreement
        /// </summary>
        /// <value>The ID of the invoice being paid along with the creation of this agreement</value>
        [DataMember(Name="invoice_id", EmitDefaultValue=false)]
        public int? InvoiceId { get; set; }
        /// <summary>
        /// Whether the new payment method created should be the user&#39;s default
        /// </summary>
        /// <value>Whether the new payment method created should be the user&#39;s default</value>
        [DataMember(Name="new_default", EmitDefaultValue=false)]
        public bool? NewDefault { get; set; }
        /// <summary>
        /// The payer ID from PayPal (passed as a parameter in the return URL). Only required if an invoice ID was included
        /// </summary>
        /// <value>The payer ID from PayPal (passed as a parameter in the return URL). Only required if an invoice ID was included</value>
        [DataMember(Name="payer_id", EmitDefaultValue=false)]
        public string PayerId { get; set; }
        /// <summary>
        /// The token from PayPal (passed as a parameter in the return URL)
        /// </summary>
        /// <value>The token from PayPal (passed as a parameter in the return URL)</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }
        /// <summary>
        /// The ID of the user. Defaults to the logged in user
        /// </summary>
        /// <value>The ID of the user. Defaults to the logged in user</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FinalizeBillingAgreementRequest {\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  NewDefault: ").Append(NewDefault).Append("\n");
            sb.Append("  PayerId: ").Append(PayerId).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FinalizeBillingAgreementRequest);
        }

        /// <summary>
        /// Returns true if FinalizeBillingAgreementRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of FinalizeBillingAgreementRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinalizeBillingAgreementRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InvoiceId == other.InvoiceId ||
                    this.InvoiceId != null &&
                    this.InvoiceId.Equals(other.InvoiceId)
                ) && 
                (
                    this.NewDefault == other.NewDefault ||
                    this.NewDefault != null &&
                    this.NewDefault.Equals(other.NewDefault)
                ) && 
                (
                    this.PayerId == other.PayerId ||
                    this.PayerId != null &&
                    this.PayerId.Equals(other.PayerId)
                ) && 
                (
                    this.Token == other.Token ||
                    this.Token != null &&
                    this.Token.Equals(other.Token)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InvoiceId != null)
                    hash = hash * 59 + this.InvoiceId.GetHashCode();
                if (this.NewDefault != null)
                    hash = hash * 59 + this.NewDefault.GetHashCode();
                if (this.PayerId != null)
                    hash = hash * 59 + this.PayerId.GetHashCode();
                if (this.Token != null)
                    hash = hash * 59 + this.Token.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
