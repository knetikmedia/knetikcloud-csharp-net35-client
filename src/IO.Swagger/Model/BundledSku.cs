/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BundledSku
    /// </summary>
    [DataContract]
    public partial class BundledSku :  IEquatable<BundledSku>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BundledSku" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BundledSku() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BundledSku" /> class.
        /// </summary>
        /// <param name="PriceOverride">The amount this item will cost inside the bundle instead of its regular price.</param>
        /// <param name="Quantity">The quantity of this item within the bundle (required).</param>
        /// <param name="Sku">The stock keeping unit (SKU) for an item included in the bundle (required).</param>
        public BundledSku(double? PriceOverride = default(double?), int? Quantity = default(int?), string Sku = default(string))
        {
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
            {
                throw new InvalidDataException("Quantity is a required property for BundledSku and cannot be null");
            }
            else
            {
                this.Quantity = Quantity;
            }
            // to ensure "Sku" is required (not null)
            if (Sku == null)
            {
                throw new InvalidDataException("Sku is a required property for BundledSku and cannot be null");
            }
            else
            {
                this.Sku = Sku;
            }
            this.PriceOverride = PriceOverride;
        }
        
        /// <summary>
        /// The amount this item will cost inside the bundle instead of its regular price
        /// </summary>
        /// <value>The amount this item will cost inside the bundle instead of its regular price</value>
        [DataMember(Name="price_override", EmitDefaultValue=false)]
        public double? PriceOverride { get; set; }
        /// <summary>
        /// The quantity of this item within the bundle
        /// </summary>
        /// <value>The quantity of this item within the bundle</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }
        /// <summary>
        /// The stock keeping unit (SKU) for an item included in the bundle
        /// </summary>
        /// <value>The stock keeping unit (SKU) for an item included in the bundle</value>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BundledSku {\n");
            sb.Append("  PriceOverride: ").Append(PriceOverride).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BundledSku);
        }

        /// <summary>
        /// Returns true if BundledSku instances are equal
        /// </summary>
        /// <param name="other">Instance of BundledSku to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BundledSku other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PriceOverride == other.PriceOverride ||
                    this.PriceOverride != null &&
                    this.PriceOverride.Equals(other.PriceOverride)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.Sku == other.Sku ||
                    this.Sku != null &&
                    this.Sku.Equals(other.Sku)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PriceOverride != null)
                    hash = hash * 59 + this.PriceOverride.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.Sku != null)
                    hash = hash * 59 + this.Sku.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
