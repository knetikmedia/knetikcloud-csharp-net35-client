/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ActivityOccurrenceJoinResult
    /// </summary>
    [DataContract]
    public partial class ActivityOccurrenceJoinResult :  IEquatable<ActivityOccurrenceJoinResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityOccurrenceJoinResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivityOccurrenceJoinResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityOccurrenceJoinResult" /> class.
        /// </summary>
        /// <param name="Entitlement">The details on the entitlement object needed to enter the occurrence (if any).</param>
        /// <param name="ErrorCode">Zero if the user was/could be added to the occurrence. Jsapi error code indicating the reason of the failure otherwise (required).</param>
        /// <param name="Message">An error message if failure.</param>
        /// <param name="UserId">The user&#39;s id (required).</param>
        public ActivityOccurrenceJoinResult(ActivityEntitlementResource Entitlement = default(ActivityEntitlementResource), int? ErrorCode = default(int?), string Message = default(string), long? UserId = default(long?))
        {
            // to ensure "ErrorCode" is required (not null)
            if (ErrorCode == null)
            {
                throw new InvalidDataException("ErrorCode is a required property for ActivityOccurrenceJoinResult and cannot be null");
            }
            else
            {
                this.ErrorCode = ErrorCode;
            }
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for ActivityOccurrenceJoinResult and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
            this.Entitlement = Entitlement;
            this.Message = Message;
        }
        
        /// <summary>
        /// The details on the entitlement object needed to enter the occurrence (if any)
        /// </summary>
        /// <value>The details on the entitlement object needed to enter the occurrence (if any)</value>
        [DataMember(Name="entitlement", EmitDefaultValue=false)]
        public ActivityEntitlementResource Entitlement { get; set; }
        /// <summary>
        /// Zero if the user was/could be added to the occurrence. Jsapi error code indicating the reason of the failure otherwise
        /// </summary>
        /// <value>Zero if the user was/could be added to the occurrence. Jsapi error code indicating the reason of the failure otherwise</value>
        [DataMember(Name="error_code", EmitDefaultValue=false)]
        public int? ErrorCode { get; set; }
        /// <summary>
        /// An error message if failure
        /// </summary>
        /// <value>An error message if failure</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// The user&#39;s id
        /// </summary>
        /// <value>The user&#39;s id</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public long? UserId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityOccurrenceJoinResult {\n");
            sb.Append("  Entitlement: ").Append(Entitlement).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ActivityOccurrenceJoinResult);
        }

        /// <summary>
        /// Returns true if ActivityOccurrenceJoinResult instances are equal
        /// </summary>
        /// <param name="other">Instance of ActivityOccurrenceJoinResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityOccurrenceJoinResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Entitlement == other.Entitlement ||
                    this.Entitlement != null &&
                    this.Entitlement.Equals(other.Entitlement)
                ) && 
                (
                    this.ErrorCode == other.ErrorCode ||
                    this.ErrorCode != null &&
                    this.ErrorCode.Equals(other.ErrorCode)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Entitlement != null)
                    hash = hash * 59 + this.Entitlement.GetHashCode();
                if (this.ErrorCode != null)
                    hash = hash * 59 + this.ErrorCode.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
