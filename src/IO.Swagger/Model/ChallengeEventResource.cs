/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ChallengeEventResource
    /// </summary>
    [DataContract]
    public partial class ChallengeEventResource :  IEquatable<ChallengeEventResource>, IValidatableObject
    {
        /// <summary>
        /// Indicate if the rewards have been given out already 
        /// </summary>
        /// <value>Indicate if the rewards have been given out already </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RewardStatusEnum
        {
            
            /// <summary>
            /// Enum Pending for "pending"
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending,
            
            /// <summary>
            /// Enum Failed for "failed"
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed,
            
            /// <summary>
            /// Enum Complete for "complete"
            /// </summary>
            [EnumMember(Value = "complete")]
            Complete,
            
            /// <summary>
            /// Enum Partial for "partial"
            /// </summary>
            [EnumMember(Value = "partial")]
            Partial
        }

        /// <summary>
        /// Indicate if the rewards have been given out already 
        /// </summary>
        /// <value>Indicate if the rewards have been given out already </value>
        [DataMember(Name="reward_status", EmitDefaultValue=false)]
        public RewardStatusEnum? RewardStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChallengeEventResource" /> class.
        /// </summary>
        /// <param name="ChallengeId">The id of the challenge.</param>
        /// <param name="EndDate">The end date in seconds.</param>
        /// <param name="Id">The id of the challenge event.</param>
        /// <param name="StartDate">The start date in seconds.</param>
        public ChallengeEventResource(long? ChallengeId = default(long?), long? EndDate = default(long?), long? Id = default(long?), long? StartDate = default(long?))
        {
            this.ChallengeId = ChallengeId;
            this.EndDate = EndDate;
            this.Id = Id;
            this.StartDate = StartDate;
        }
        
        /// <summary>
        /// The id of the challenge
        /// </summary>
        /// <value>The id of the challenge</value>
        [DataMember(Name="challenge_id", EmitDefaultValue=false)]
        public long? ChallengeId { get; set; }
        /// <summary>
        /// The end date in seconds
        /// </summary>
        /// <value>The end date in seconds</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public long? EndDate { get; set; }
        /// <summary>
        /// The id of the challenge event
        /// </summary>
        /// <value>The id of the challenge event</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// The start date in seconds
        /// </summary>
        /// <value>The start date in seconds</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public long? StartDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChallengeEventResource {\n");
            sb.Append("  ChallengeId: ").Append(ChallengeId).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RewardStatus: ").Append(RewardStatus).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChallengeEventResource);
        }

        /// <summary>
        /// Returns true if ChallengeEventResource instances are equal
        /// </summary>
        /// <param name="other">Instance of ChallengeEventResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChallengeEventResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ChallengeId == other.ChallengeId ||
                    this.ChallengeId != null &&
                    this.ChallengeId.Equals(other.ChallengeId)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.RewardStatus == other.RewardStatus ||
                    this.RewardStatus != null &&
                    this.RewardStatus.Equals(other.RewardStatus)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ChallengeId != null)
                    hash = hash * 59 + this.ChallengeId.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.RewardStatus != null)
                    hash = hash * 59 + this.RewardStatus.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
