/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using com.knetikcloud.Client;
using com.knetikcloud.Api;
using com.knetikcloud.Model;

namespace com.knetikcloud.Test
{
    /// <summary>
    ///  Class for testing Content_ArticlesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class Content_ArticlesApiTests
    {
        private Content_ArticlesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new Content_ArticlesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Content_ArticlesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' Content_ArticlesApi
            //Assert.IsInstanceOfType(typeof(Content_ArticlesApi), instance, "instance is a Content_ArticlesApi");
        }

        
        /// <summary>
        /// Test CreateArticle
        /// </summary>
        [Test]
        public void CreateArticleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ArticleResource articleResource = null;
            //var response = instance.CreateArticle(articleResource);
            //Assert.IsInstanceOf<ArticleResource> (response, "response is ArticleResource");
        }
        
        /// <summary>
        /// Test CreateArticleTemplate
        /// </summary>
        [Test]
        public void CreateArticleTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateResource articleTemplateResource = null;
            //var response = instance.CreateArticleTemplate(articleTemplateResource);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test CreateTemplate
        /// </summary>
        [Test]
        public void CreateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string typeHint = null;
            //TemplateResource template = null;
            //var response = instance.CreateTemplate(typeHint, template);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test DeleteArticle
        /// </summary>
        [Test]
        public void DeleteArticleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteArticle(id);
            
        }
        
        /// <summary>
        /// Test DeleteArticleTemplate
        /// </summary>
        [Test]
        public void DeleteArticleTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cascade = null;
            //instance.DeleteArticleTemplate(id, cascade);
            
        }
        
        /// <summary>
        /// Test DeleteTemplate
        /// </summary>
        [Test]
        public void DeleteTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string typeHint = null;
            //string id = null;
            //string cascade = null;
            //instance.DeleteTemplate(typeHint, id, cascade);
            
        }
        
        /// <summary>
        /// Test GetArticle
        /// </summary>
        [Test]
        public void GetArticleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetArticle(id);
            //Assert.IsInstanceOf<ArticleResource> (response, "response is ArticleResource");
        }
        
        /// <summary>
        /// Test GetArticleTemplate
        /// </summary>
        [Test]
        public void GetArticleTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetArticleTemplate(id);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test GetArticleTemplates
        /// </summary>
        [Test]
        public void GetArticleTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetArticleTemplates(size, page, order);
            //Assert.IsInstanceOf<PageResourceTemplateResource> (response, "response is PageResourceTemplateResource");
        }
        
        /// <summary>
        /// Test GetArticles
        /// </summary>
        [Test]
        public void GetArticlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? filterActiveOnly = null;
            //string filterCategory = null;
            //string filterTagset = null;
            //string filterTagIntersection = null;
            //string filterTagExclusion = null;
            //string filterTitle = null;
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetArticles(filterActiveOnly, filterCategory, filterTagset, filterTagIntersection, filterTagExclusion, filterTitle, size, page, order);
            //Assert.IsInstanceOf<PageResourceArticleResource> (response, "response is PageResourceArticleResource");
        }
        
        /// <summary>
        /// Test GetTemplate
        /// </summary>
        [Test]
        public void GetTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string typeHint = null;
            //string id = null;
            //var response = instance.GetTemplate(typeHint, id);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test GetTemplates
        /// </summary>
        [Test]
        public void GetTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string typeHint = null;
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetTemplates(typeHint, size, page, order);
            //Assert.IsInstanceOf<PageResourceTemplateResource> (response, "response is PageResourceTemplateResource");
        }
        
        /// <summary>
        /// Test UpdateArticle
        /// </summary>
        [Test]
        public void UpdateArticleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ArticleResource articleResource = null;
            //var response = instance.UpdateArticle(id, articleResource);
            //Assert.IsInstanceOf<ArticleResource> (response, "response is ArticleResource");
        }
        
        /// <summary>
        /// Test UpdateArticleTemplate
        /// </summary>
        [Test]
        public void UpdateArticleTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TemplateResource articleTemplateResource = null;
            //var response = instance.UpdateArticleTemplate(id, articleTemplateResource);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test UpdateTemplate
        /// </summary>
        [Test]
        public void UpdateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string typeHint = null;
            //string id = null;
            //TemplateResource template = null;
            //var response = instance.UpdateTemplate(typeHint, id, template);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test Validate
        /// </summary>
        [Test]
        public void ValidateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string typeHint = null;
            //BasicTemplatedResource resource = null;
            //instance.Validate(typeHint, resource);
            
        }
        
    }

}
