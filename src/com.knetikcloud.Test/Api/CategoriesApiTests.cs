/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using com.knetikcloud.Client;
using com.knetikcloud.Api;
using com.knetikcloud.Model;

namespace com.knetikcloud.Test
{
    /// <summary>
    ///  Class for testing CategoriesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CategoriesApiTests
    {
        private CategoriesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CategoriesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CategoriesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CategoriesApi
            //Assert.IsInstanceOfType(typeof(CategoriesApi), instance, "instance is a CategoriesApi");
        }

        
        /// <summary>
        /// Test CreateCategory
        /// </summary>
        [Test]
        public void CreateCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CategoryResource category = null;
            //var response = instance.CreateCategory(category);
            //Assert.IsInstanceOf<CategoryResource> (response, "response is CategoryResource");
        }
        
        /// <summary>
        /// Test CreateCategoryTemplate
        /// </summary>
        [Test]
        public void CreateCategoryTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateResource template = null;
            //var response = instance.CreateCategoryTemplate(template);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test DeleteCategory
        /// </summary>
        [Test]
        public void DeleteCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteCategory(id);
            
        }
        
        /// <summary>
        /// Test DeleteCategoryTemplate
        /// </summary>
        [Test]
        public void DeleteCategoryTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cascade = null;
            //instance.DeleteCategoryTemplate(id, cascade);
            
        }
        
        /// <summary>
        /// Test GetCategories
        /// </summary>
        [Test]
        public void GetCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterSearch = null;
            //bool? filterActive = null;
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetCategories(filterSearch, filterActive, size, page, order);
            //Assert.IsInstanceOf<PageResourceCategoryResource> (response, "response is PageResourceCategoryResource");
        }
        
        /// <summary>
        /// Test GetCategory
        /// </summary>
        [Test]
        public void GetCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetCategory(id);
            //Assert.IsInstanceOf<CategoryResource> (response, "response is CategoryResource");
        }
        
        /// <summary>
        /// Test GetCategoryTemplate
        /// </summary>
        [Test]
        public void GetCategoryTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetCategoryTemplate(id);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test GetCategoryTemplates
        /// </summary>
        [Test]
        public void GetCategoryTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetCategoryTemplates(size, page, order);
            //Assert.IsInstanceOf<PageResourceTemplateResource> (response, "response is PageResourceTemplateResource");
        }
        
        /// <summary>
        /// Test GetTags
        /// </summary>
        [Test]
        public void GetTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //var response = instance.GetTags(size, page);
            //Assert.IsInstanceOf<PageResourcestring> (response, "response is PageResourcestring");
        }
        
        /// <summary>
        /// Test UpdateCategory
        /// </summary>
        [Test]
        public void UpdateCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CategoryResource category = null;
            //var response = instance.UpdateCategory(id, category);
            //Assert.IsInstanceOf<CategoryResource> (response, "response is CategoryResource");
        }
        
        /// <summary>
        /// Test UpdateCategoryTemplate
        /// </summary>
        [Test]
        public void UpdateCategoryTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TemplateResource template = null;
            //var response = instance.UpdateCategoryTemplate(id, template);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
    }

}
