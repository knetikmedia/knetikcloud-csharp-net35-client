/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using com.knetikcloud.Client;
using com.knetikcloud.Api;
using com.knetikcloud.Model;

namespace com.knetikcloud.Test
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersApiTests
    {
        private UsersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UsersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersApi
            //Assert.IsInstanceOfType(typeof(UsersApi), instance, "instance is a UsersApi");
        }

        
        /// <summary>
        /// Test AddUserTag
        /// </summary>
        [Test]
        public void AddUserTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //StringWrapper tag = null;
            //instance.AddUserTag(userId, tag);
            
        }
        
        /// <summary>
        /// Test CreateUserTemplate
        /// </summary>
        [Test]
        public void CreateUserTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateResource userTemplateResource = null;
            //var response = instance.CreateUserTemplate(userTemplateResource);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test DeleteUserTemplate
        /// </summary>
        [Test]
        public void DeleteUserTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cascade = null;
            //instance.DeleteUserTemplate(id, cascade);
            
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetUser(id);
            //Assert.IsInstanceOf<UserResource> (response, "response is UserResource");
        }
        
        /// <summary>
        /// Test GetUserTags
        /// </summary>
        [Test]
        public void GetUserTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //var response = instance.GetUserTags(userId);
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test GetUserTemplate
        /// </summary>
        [Test]
        public void GetUserTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetUserTemplate(id);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test GetUserTemplates
        /// </summary>
        [Test]
        public void GetUserTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetUserTemplates(size, page, order);
            //Assert.IsInstanceOf<PageResourceTemplateResource> (response, "response is PageResourceTemplateResource");
        }
        
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterDisplayname = null;
            //string filterEmail = null;
            //string filterFirstname = null;
            //string filterFullname = null;
            //string filterLastname = null;
            //string filterUsername = null;
            //string filterTag = null;
            //string filterGroup = null;
            //string filterRole = null;
            //string filterLastActivity = null;
            //string filterIdList = null;
            //string filterSearch = null;
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetUsers(filterDisplayname, filterEmail, filterFirstname, filterFullname, filterLastname, filterUsername, filterTag, filterGroup, filterRole, filterLastActivity, filterIdList, filterSearch, size, page, order);
            //Assert.IsInstanceOf<PageResourceUserBaseResource> (response, "response is PageResourceUserBaseResource");
        }
        
        /// <summary>
        /// Test PasswordReset
        /// </summary>
        [Test]
        public void PasswordResetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //NewPasswordRequest newPasswordRequest = null;
            //instance.PasswordReset(id, newPasswordRequest);
            
        }
        
        /// <summary>
        /// Test RegisterUser
        /// </summary>
        [Test]
        public void RegisterUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserResource userResource = null;
            //var response = instance.RegisterUser(userResource);
            //Assert.IsInstanceOf<UserResource> (response, "response is UserResource");
        }
        
        /// <summary>
        /// Test RemoveUserTag
        /// </summary>
        [Test]
        public void RemoveUserTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string tag = null;
            //instance.RemoveUserTag(userId, tag);
            
        }
        
        /// <summary>
        /// Test SetPassword
        /// </summary>
        [Test]
        public void SetPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //StringWrapper password = null;
            //instance.SetPassword(id, password);
            
        }
        
        /// <summary>
        /// Test StartPasswordReset
        /// </summary>
        [Test]
        public void StartPasswordResetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.StartPasswordReset(id);
            
        }
        
        /// <summary>
        /// Test SubmitPasswordReset
        /// </summary>
        [Test]
        public void SubmitPasswordResetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PasswordResetRequest passwordReset = null;
            //instance.SubmitPasswordReset(passwordReset);
            
        }
        
        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Test]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserResource userResource = null;
            //instance.UpdateUser(id, userResource);
            
        }
        
        /// <summary>
        /// Test UpdateUserTemplate
        /// </summary>
        [Test]
        public void UpdateUserTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TemplateResource userTemplateResource = null;
            //var response = instance.UpdateUserTemplate(id, userTemplateResource);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
    }

}
