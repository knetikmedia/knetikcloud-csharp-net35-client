/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using com.knetikcloud.Client;
using com.knetikcloud.Api;
using com.knetikcloud.Model;

namespace com.knetikcloud.Test
{
    /// <summary>
    ///  Class for testing SearchApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SearchApiTests
    {
        private SearchApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SearchApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SearchApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SearchApi
            //Assert.IsInstanceOfType(typeof(SearchApi), instance, "instance is a SearchApi");
        }

        
        /// <summary>
        /// Test SearchCountGET
        /// </summary>
        [Test]
        public void SearchCountGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //var response = instance.SearchCountGET(type);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchCountPOST
        /// </summary>
        [Test]
        public void SearchCountPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //Object query = null;
            //var response = instance.SearchCountPOST(type, query);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchCountWithTemplateGET
        /// </summary>
        [Test]
        public void SearchCountWithTemplateGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string template = null;
            //var response = instance.SearchCountWithTemplateGET(type, template);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchCountWithTemplatePOST
        /// </summary>
        [Test]
        public void SearchCountWithTemplatePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string template = null;
            //Object query = null;
            //var response = instance.SearchCountWithTemplatePOST(type, template, query);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchDocumentGET
        /// </summary>
        [Test]
        public void SearchDocumentGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string id = null;
            //var response = instance.SearchDocumentGET(type, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchDocumentWithTemplateGET
        /// </summary>
        [Test]
        public void SearchDocumentWithTemplateGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string id = null;
            //string template = null;
            //var response = instance.SearchDocumentWithTemplateGET(type, id, template);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchExplainGET
        /// </summary>
        [Test]
        public void SearchExplainGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string id = null;
            //var response = instance.SearchExplainGET(type, id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchExplainPOST
        /// </summary>
        [Test]
        public void SearchExplainPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string id = null;
            //Object query = null;
            //var response = instance.SearchExplainPOST(type, id, query);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchExplainWithTemplateGET
        /// </summary>
        [Test]
        public void SearchExplainWithTemplateGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string id = null;
            //string template = null;
            //var response = instance.SearchExplainWithTemplateGET(type, id, template);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchExplainWithTemplatePOST
        /// </summary>
        [Test]
        public void SearchExplainWithTemplatePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string id = null;
            //string template = null;
            //Object query = null;
            //var response = instance.SearchExplainWithTemplatePOST(type, id, template, query);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchIndex
        /// </summary>
        [Test]
        public void SearchIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //Object query = null;
            //var response = instance.SearchIndex(type, query);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchIndexGET
        /// </summary>
        [Test]
        public void SearchIndexGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //var response = instance.SearchIndexGET(type);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchIndexWithTemplateGET
        /// </summary>
        [Test]
        public void SearchIndexWithTemplateGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string template = null;
            //var response = instance.SearchIndexWithTemplateGET(type, template);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchIndexWithTemplatePOST
        /// </summary>
        [Test]
        public void SearchIndexWithTemplatePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string template = null;
            //Object query = null;
            //var response = instance.SearchIndexWithTemplatePOST(type, template, query);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchIndicesGET
        /// </summary>
        [Test]
        public void SearchIndicesGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SearchIndicesGET();
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchMappingsGET
        /// </summary>
        [Test]
        public void SearchMappingsGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //var response = instance.SearchMappingsGET(type);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchMappingsWithTemplateGET
        /// </summary>
        [Test]
        public void SearchMappingsWithTemplateGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string template = null;
            //var response = instance.SearchMappingsWithTemplateGET(type, template);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchValidateGET
        /// </summary>
        [Test]
        public void SearchValidateGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //var response = instance.SearchValidateGET(type);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchValidatePOST
        /// </summary>
        [Test]
        public void SearchValidatePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //Object query = null;
            //var response = instance.SearchValidatePOST(type, query);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchValidateWithTemplateGET
        /// </summary>
        [Test]
        public void SearchValidateWithTemplateGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string template = null;
            //var response = instance.SearchValidateWithTemplateGET(type, template);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SearchValidateWithTemplatePOST
        /// </summary>
        [Test]
        public void SearchValidateWithTemplatePOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string template = null;
            //Object query = null;
            //var response = instance.SearchValidateWithTemplatePOST(type, template, query);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
    }

}
