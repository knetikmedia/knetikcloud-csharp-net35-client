/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using com.knetikcloud.Client;
using com.knetikcloud.Api;
using com.knetikcloud.Model;

namespace com.knetikcloud.Test
{
    /// <summary>
    ///  Class for testing GamificationTriviaApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GamificationTriviaApiTests
    {
        private GamificationTriviaApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GamificationTriviaApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GamificationTriviaApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GamificationTriviaApi
            //Assert.IsInstanceOfType(typeof(GamificationTriviaApi), instance, "instance is a GamificationTriviaApi");
        }

        
        /// <summary>
        /// Test AddQuestionAnswers
        /// </summary>
        [Test]
        public void AddQuestionAnswersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionId = null;
            //AnswerResource answer = null;
            //var response = instance.AddQuestionAnswers(questionId, answer);
            //Assert.IsInstanceOf<AnswerResource> (response, "response is AnswerResource");
        }
        
        /// <summary>
        /// Test AddQuestionTag
        /// </summary>
        [Test]
        public void AddQuestionTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string tag = null;
            //instance.AddQuestionTag(id, tag);
            
        }
        
        /// <summary>
        /// Test AddTagToQuestionsBatch
        /// </summary>
        [Test]
        public void AddTagToQuestionsBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //string filterSearch = null;
            //string filterIdset = null;
            //string filterCategory = null;
            //string filterTag = null;
            //string filterTagset = null;
            //string filterType = null;
            //bool? filterPublished = null;
            //long? filterImportId = null;
            //var response = instance.AddTagToQuestionsBatch(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId);
            //Assert.IsInstanceOf<int?> (response, "response is int?");
        }
        
        /// <summary>
        /// Test CreateImportJob
        /// </summary>
        [Test]
        public void CreateImportJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ImportJobResource request = null;
            //var response = instance.CreateImportJob(request);
            //Assert.IsInstanceOf<ImportJobResource> (response, "response is ImportJobResource");
        }
        
        /// <summary>
        /// Test CreateQuestion
        /// </summary>
        [Test]
        public void CreateQuestionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QuestionResource question = null;
            //var response = instance.CreateQuestion(question);
            //Assert.IsInstanceOf<QuestionResource> (response, "response is QuestionResource");
        }
        
        /// <summary>
        /// Test CreateQuestionTemplate
        /// </summary>
        [Test]
        public void CreateQuestionTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QuestionTemplateResource questionTemplateResource = null;
            //var response = instance.CreateQuestionTemplate(questionTemplateResource);
            //Assert.IsInstanceOf<QuestionTemplateResource> (response, "response is QuestionTemplateResource");
        }
        
        /// <summary>
        /// Test DeleteImportJob
        /// </summary>
        [Test]
        public void DeleteImportJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteImportJob(id);
            
        }
        
        /// <summary>
        /// Test DeleteQuestion
        /// </summary>
        [Test]
        public void DeleteQuestionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteQuestion(id);
            
        }
        
        /// <summary>
        /// Test DeleteQuestionAnswers
        /// </summary>
        [Test]
        public void DeleteQuestionAnswersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionId = null;
            //string id = null;
            //instance.DeleteQuestionAnswers(questionId, id);
            
        }
        
        /// <summary>
        /// Test DeleteQuestionTemplate
        /// </summary>
        [Test]
        public void DeleteQuestionTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cascade = null;
            //instance.DeleteQuestionTemplate(id, cascade);
            
        }
        
        /// <summary>
        /// Test GetImportJob
        /// </summary>
        [Test]
        public void GetImportJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetImportJob(id);
            //Assert.IsInstanceOf<ImportJobResource> (response, "response is ImportJobResource");
        }
        
        /// <summary>
        /// Test GetImportJobs
        /// </summary>
        [Test]
        public void GetImportJobsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterVendor = null;
            //string filterCategory = null;
            //string filterName = null;
            //string filterStatus = null;
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetImportJobs(filterVendor, filterCategory, filterName, filterStatus, size, page, order);
            //Assert.IsInstanceOf<PageResourceImportJobResource> (response, "response is PageResourceImportJobResource");
        }
        
        /// <summary>
        /// Test GetQuestion
        /// </summary>
        [Test]
        public void GetQuestionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetQuestion(id);
            //Assert.IsInstanceOf<QuestionResource> (response, "response is QuestionResource");
        }
        
        /// <summary>
        /// Test GetQuestionAnswer
        /// </summary>
        [Test]
        public void GetQuestionAnswerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionId = null;
            //string id = null;
            //var response = instance.GetQuestionAnswer(questionId, id);
            //Assert.IsInstanceOf<AnswerResource> (response, "response is AnswerResource");
        }
        
        /// <summary>
        /// Test GetQuestionAnswers
        /// </summary>
        [Test]
        public void GetQuestionAnswersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionId = null;
            //var response = instance.GetQuestionAnswers(questionId);
            //Assert.IsInstanceOf<List<AnswerResource>> (response, "response is List<AnswerResource>");
        }
        
        /// <summary>
        /// Test GetQuestionDeltas
        /// </summary>
        [Test]
        public void GetQuestionDeltasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? since = null;
            //var response = instance.GetQuestionDeltas(since);
            //Assert.IsInstanceOf<List<DeltaResource>> (response, "response is List<DeltaResource>");
        }
        
        /// <summary>
        /// Test GetQuestionTags
        /// </summary>
        [Test]
        public void GetQuestionTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetQuestionTags(id);
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test GetQuestionTemplate
        /// </summary>
        [Test]
        public void GetQuestionTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetQuestionTemplate(id);
            //Assert.IsInstanceOf<QuestionTemplateResource> (response, "response is QuestionTemplateResource");
        }
        
        /// <summary>
        /// Test GetQuestionTemplates
        /// </summary>
        [Test]
        public void GetQuestionTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetQuestionTemplates(size, page, order);
            //Assert.IsInstanceOf<PageResourceQuestionTemplateResource> (response, "response is PageResourceQuestionTemplateResource");
        }
        
        /// <summary>
        /// Test GetQuestions
        /// </summary>
        [Test]
        public void GetQuestionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //string filterSearch = null;
            //string filterIdset = null;
            //string filterCategory = null;
            //string filterTagset = null;
            //string filterTag = null;
            //string filterType = null;
            //bool? filterPublished = null;
            //long? filterImportId = null;
            //var response = instance.GetQuestions(size, page, order, filterSearch, filterIdset, filterCategory, filterTagset, filterTag, filterType, filterPublished, filterImportId);
            //Assert.IsInstanceOf<PageResourceQuestionResource> (response, "response is PageResourceQuestionResource");
        }
        
        /// <summary>
        /// Test GetQuestionsCount
        /// </summary>
        [Test]
        public void GetQuestionsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterSearch = null;
            //string filterIdset = null;
            //string filterCategory = null;
            //string filterTag = null;
            //string filterTagset = null;
            //string filterType = null;
            //bool? filterPublished = null;
            //var response = instance.GetQuestionsCount(filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished);
            //Assert.IsInstanceOf<long?> (response, "response is long?");
        }
        
        /// <summary>
        /// Test ProcessImportJob
        /// </summary>
        [Test]
        public void ProcessImportJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //bool? publishNow = null;
            //var response = instance.ProcessImportJob(id, publishNow);
            //Assert.IsInstanceOf<ImportJobResource> (response, "response is ImportJobResource");
        }
        
        /// <summary>
        /// Test RemoveQuestionTag
        /// </summary>
        [Test]
        public void RemoveQuestionTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string tag = null;
            //instance.RemoveQuestionTag(id, tag);
            
        }
        
        /// <summary>
        /// Test RemoveTagToQuestionsBatch
        /// </summary>
        [Test]
        public void RemoveTagToQuestionsBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //string filterSearch = null;
            //string filterIdset = null;
            //string filterCategory = null;
            //string filterTag = null;
            //string filterTagset = null;
            //string filterType = null;
            //bool? filterPublished = null;
            //long? filterImportId = null;
            //var response = instance.RemoveTagToQuestionsBatch(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId);
            //Assert.IsInstanceOf<int?> (response, "response is int?");
        }
        
        /// <summary>
        /// Test SearchQuestionTags
        /// </summary>
        [Test]
        public void SearchQuestionTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterSearch = null;
            //string filterCategory = null;
            //long? filterImportId = null;
            //var response = instance.SearchQuestionTags(filterSearch, filterCategory, filterImportId);
            //Assert.IsInstanceOf<Collectionstring> (response, "response is Collectionstring");
        }
        
        /// <summary>
        /// Test UpdateImportJob
        /// </summary>
        [Test]
        public void UpdateImportJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //ImportJobResource request = null;
            //var response = instance.UpdateImportJob(id, request);
            //Assert.IsInstanceOf<ImportJobResource> (response, "response is ImportJobResource");
        }
        
        /// <summary>
        /// Test UpdateQuestion
        /// </summary>
        [Test]
        public void UpdateQuestionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //QuestionResource question = null;
            //var response = instance.UpdateQuestion(id, question);
            //Assert.IsInstanceOf<QuestionResource> (response, "response is QuestionResource");
        }
        
        /// <summary>
        /// Test UpdateQuestionAnswer
        /// </summary>
        [Test]
        public void UpdateQuestionAnswerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionId = null;
            //string id = null;
            //AnswerResource answer = null;
            //instance.UpdateQuestionAnswer(questionId, id, answer);
            
        }
        
        /// <summary>
        /// Test UpdateQuestionTemplate
        /// </summary>
        [Test]
        public void UpdateQuestionTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //QuestionTemplateResource questionTemplateResource = null;
            //var response = instance.UpdateQuestionTemplate(id, questionTemplateResource);
            //Assert.IsInstanceOf<QuestionTemplateResource> (response, "response is QuestionTemplateResource");
        }
        
        /// <summary>
        /// Test UpdateQuestionsInBulk
        /// </summary>
        [Test]
        public void UpdateQuestionsInBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QuestionResource question = null;
            //string filterSearch = null;
            //string filterIdset = null;
            //string filterCategory = null;
            //string filterTagset = null;
            //string filterType = null;
            //bool? filterPublished = null;
            //long? filterImportId = null;
            //var response = instance.UpdateQuestionsInBulk(question, filterSearch, filterIdset, filterCategory, filterTagset, filterType, filterPublished, filterImportId);
            //Assert.IsInstanceOf<int?> (response, "response is int?");
        }
        
    }

}
