/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using com.knetikcloud.Client;
using com.knetikcloud.Api;
using com.knetikcloud.Model;

namespace com.knetikcloud.Test
{
    /// <summary>
    ///  Class for testing Store_BundlesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class Store_BundlesApiTests
    {
        private Store_BundlesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new Store_BundlesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Store_BundlesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' Store_BundlesApi
            //Assert.IsInstanceOfType(typeof(Store_BundlesApi), instance, "instance is a Store_BundlesApi");
        }

        
        /// <summary>
        /// Test CreateBundleItem
        /// </summary>
        [Test]
        public void CreateBundleItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? cascade = null;
            //BundleItem bundleItem = null;
            //var response = instance.CreateBundleItem(cascade, bundleItem);
            //Assert.IsInstanceOf<BundleItem> (response, "response is BundleItem");
        }
        
        /// <summary>
        /// Test CreateBundleTemplate
        /// </summary>
        [Test]
        public void CreateBundleTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ItemTemplateResource bundleTemplateResource = null;
            //var response = instance.CreateBundleTemplate(bundleTemplateResource);
            //Assert.IsInstanceOf<ItemTemplateResource> (response, "response is ItemTemplateResource");
        }
        
        /// <summary>
        /// Test DeleteBundleItem
        /// </summary>
        [Test]
        public void DeleteBundleItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteBundleItem(id);
            
        }
        
        /// <summary>
        /// Test DeleteBundleTemplate
        /// </summary>
        [Test]
        public void DeleteBundleTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cascade = null;
            //instance.DeleteBundleTemplate(id, cascade);
            
        }
        
        /// <summary>
        /// Test GetBundleItem
        /// </summary>
        [Test]
        public void GetBundleItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetBundleItem(id);
            //Assert.IsInstanceOf<BundleItem> (response, "response is BundleItem");
        }
        
        /// <summary>
        /// Test GetBundleTemplate
        /// </summary>
        [Test]
        public void GetBundleTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetBundleTemplate(id);
            //Assert.IsInstanceOf<ItemTemplateResource> (response, "response is ItemTemplateResource");
        }
        
        /// <summary>
        /// Test GetBundleTemplates
        /// </summary>
        [Test]
        public void GetBundleTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetBundleTemplates(size, page, order);
            //Assert.IsInstanceOf<PageResourceItemTemplateResource> (response, "response is PageResourceItemTemplateResource");
        }
        
        /// <summary>
        /// Test UpdateBundleItem
        /// </summary>
        [Test]
        public void UpdateBundleItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //bool? cascade = null;
            //BundleItem bundleItem = null;
            //var response = instance.UpdateBundleItem(id, cascade, bundleItem);
            //Assert.IsInstanceOf<BundleItem> (response, "response is BundleItem");
        }
        
        /// <summary>
        /// Test UpdateBundleTemplate
        /// </summary>
        [Test]
        public void UpdateBundleTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ItemTemplateResource bundleTemplateResource = null;
            //var response = instance.UpdateBundleTemplate(id, bundleTemplateResource);
            //Assert.IsInstanceOf<ItemTemplateResource> (response, "response is ItemTemplateResource");
        }
        
    }

}
