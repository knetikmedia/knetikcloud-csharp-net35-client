/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.knetikcloud.Client;
using com.knetikcloud.Model;

namespace com.knetikcloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthRolesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>RoleResource</returns>
        RoleResource CreateRole (RoleResource roleResource = null);

        /// <summary>
        /// Create a new role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>ApiResponse of RoleResource</returns>
        ApiResponse<RoleResource> CreateRoleWithHttpInfo (RoleResource roleResource = null);
        /// <summary>
        /// Delete a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns></returns>
        void DeleteRole (string role, bool? force = null);

        /// <summary>
        /// Delete a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRoleWithHttpInfo (string role, bool? force = null);
        /// <summary>
        /// Get roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>List&lt;RoleResource&gt;</returns>
        List<RoleResource> GetClientRoles (string clientKey);

        /// <summary>
        /// Get roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>ApiResponse of List&lt;RoleResource&gt;</returns>
        ApiResponse<List<RoleResource>> GetClientRolesWithHttpInfo (string clientKey);
        /// <summary>
        /// Get a single role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>RoleResource</returns>
        RoleResource GetRole (string role);

        /// <summary>
        /// Get a single role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>ApiResponse of RoleResource</returns>
        ApiResponse<RoleResource> GetRoleWithHttpInfo (string role);
        /// <summary>
        /// List and search roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)</param>
        /// <returns>PageResourceRoleResource</returns>
        PageResourceRoleResource GetRoles (int? size = null, int? page = null, string order = null);

        /// <summary>
        /// List and search roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)</param>
        /// <returns>ApiResponse of PageResourceRoleResource</returns>
        ApiResponse<PageResourceRoleResource> GetRolesWithHttpInfo (int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Get roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>List&lt;RoleResource&gt;</returns>
        List<RoleResource> GetUserRoles (int? userId);

        /// <summary>
        /// Get roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>ApiResponse of List&lt;RoleResource&gt;</returns>
        ApiResponse<List<RoleResource>> GetUserRolesWithHttpInfo (int? userId);
        /// <summary>
        /// Set roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>ClientResource</returns>
        ClientResource SetClientRoles (string clientKey, List<string> rolesList = null);

        /// <summary>
        /// Set roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>ApiResponse of ClientResource</returns>
        ApiResponse<ClientResource> SetClientRolesWithHttpInfo (string clientKey, List<string> rolesList = null);
        /// <summary>
        /// Set permissions for a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns>RoleResource</returns>
        RoleResource SetPermissionsForRole (string role, List<string> permissionsList = null);

        /// <summary>
        /// Set permissions for a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns>ApiResponse of RoleResource</returns>
        ApiResponse<RoleResource> SetPermissionsForRoleWithHttpInfo (string role, List<string> permissionsList = null);
        /// <summary>
        /// Set roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>UserResource</returns>
        UserResource SetUserRoles (int? userId, List<string> rolesList = null);

        /// <summary>
        /// Set roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>ApiResponse of UserResource</returns>
        ApiResponse<UserResource> SetUserRolesWithHttpInfo (int? userId, List<string> rolesList = null);
        /// <summary>
        /// Update a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>RoleResource</returns>
        RoleResource UpdateRole (string role, RoleResource roleResource = null);

        /// <summary>
        /// Update a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>ApiResponse of RoleResource</returns>
        ApiResponse<RoleResource> UpdateRoleWithHttpInfo (string role, RoleResource roleResource = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of RoleResource</returns>
        System.Threading.Tasks.Task<RoleResource> CreateRoleAsync (RoleResource roleResource = null);

        /// <summary>
        /// Create a new role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleResource>> CreateRoleAsyncWithHttpInfo (RoleResource roleResource = null);
        /// <summary>
        /// Delete a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRoleAsync (string role, bool? force = null);

        /// <summary>
        /// Delete a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleAsyncWithHttpInfo (string role, bool? force = null);
        /// <summary>
        /// Get roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>Task of List&lt;RoleResource&gt;</returns>
        System.Threading.Tasks.Task<List<RoleResource>> GetClientRolesAsync (string clientKey);

        /// <summary>
        /// Get roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>Task of ApiResponse (List&lt;RoleResource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RoleResource>>> GetClientRolesAsyncWithHttpInfo (string clientKey);
        /// <summary>
        /// Get a single role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>Task of RoleResource</returns>
        System.Threading.Tasks.Task<RoleResource> GetRoleAsync (string role);

        /// <summary>
        /// Get a single role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleResource>> GetRoleAsyncWithHttpInfo (string role);
        /// <summary>
        /// List and search roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)</param>
        /// <returns>Task of PageResourceRoleResource</returns>
        System.Threading.Tasks.Task<PageResourceRoleResource> GetRolesAsync (int? size = null, int? page = null, string order = null);

        /// <summary>
        /// List and search roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceRoleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceRoleResource>> GetRolesAsyncWithHttpInfo (int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Get roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>Task of List&lt;RoleResource&gt;</returns>
        System.Threading.Tasks.Task<List<RoleResource>> GetUserRolesAsync (int? userId);

        /// <summary>
        /// Get roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>Task of ApiResponse (List&lt;RoleResource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RoleResource>>> GetUserRolesAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// Set roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of ClientResource</returns>
        System.Threading.Tasks.Task<ClientResource> SetClientRolesAsync (string clientKey, List<string> rolesList = null);

        /// <summary>
        /// Set roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of ApiResponse (ClientResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientResource>> SetClientRolesAsyncWithHttpInfo (string clientKey, List<string> rolesList = null);
        /// <summary>
        /// Set permissions for a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns>Task of RoleResource</returns>
        System.Threading.Tasks.Task<RoleResource> SetPermissionsForRoleAsync (string role, List<string> permissionsList = null);

        /// <summary>
        /// Set permissions for a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleResource>> SetPermissionsForRoleAsyncWithHttpInfo (string role, List<string> permissionsList = null);
        /// <summary>
        /// Set roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of UserResource</returns>
        System.Threading.Tasks.Task<UserResource> SetUserRolesAsync (int? userId, List<string> rolesList = null);

        /// <summary>
        /// Set roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of ApiResponse (UserResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResource>> SetUserRolesAsyncWithHttpInfo (int? userId, List<string> rolesList = null);
        /// <summary>
        /// Update a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of RoleResource</returns>
        System.Threading.Tasks.Task<RoleResource> UpdateRoleAsync (string role, RoleResource roleResource = null);

        /// <summary>
        /// Update a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleResource>> UpdateRoleAsyncWithHttpInfo (string role, RoleResource roleResource = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthRolesApi : IAuthRolesApi
    {
        private com.knetikcloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthRolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthRolesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.knetikcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthRolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthRolesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.knetikcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.knetikcloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>RoleResource</returns>
        public RoleResource CreateRole (RoleResource roleResource = null)
        {
             ApiResponse<RoleResource> localVarResponse = CreateRoleWithHttpInfo(roleResource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>ApiResponse of RoleResource</returns>
        public ApiResponse< RoleResource > CreateRoleWithHttpInfo (RoleResource roleResource = null)
        {

            var localVarPath = "/auth/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleResource != null && roleResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(roleResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
            
        }

        /// <summary>
        /// Create a new role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of RoleResource</returns>
        public async System.Threading.Tasks.Task<RoleResource> CreateRoleAsync (RoleResource roleResource = null)
        {
             ApiResponse<RoleResource> localVarResponse = await CreateRoleAsyncWithHttpInfo(roleResource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleResource>> CreateRoleAsyncWithHttpInfo (RoleResource roleResource = null)
        {

            var localVarPath = "/auth/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleResource != null && roleResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(roleResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
            
        }

        /// <summary>
        /// Delete a role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns></returns>
        public void DeleteRole (string role, bool? force = null)
        {
             DeleteRoleWithHttpInfo(role, force);
        }

        /// <summary>
        /// Delete a role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRoleWithHttpInfo (string role, bool? force = null)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->DeleteRole");

            var localVarPath = "/auth/roles/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (force != null) localVarQueryParams.Add("force", Configuration.ApiClient.ParameterToString(force)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRole", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRoleAsync (string role, bool? force = null)
        {
             await DeleteRoleAsyncWithHttpInfo(role, force);

        }

        /// <summary>
        /// Delete a role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleAsyncWithHttpInfo (string role, bool? force = null)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->DeleteRole");

            var localVarPath = "/auth/roles/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (force != null) localVarQueryParams.Add("force", Configuration.ApiClient.ParameterToString(force)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRole", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get roles for a client 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>List&lt;RoleResource&gt;</returns>
        public List<RoleResource> GetClientRoles (string clientKey)
        {
             ApiResponse<List<RoleResource>> localVarResponse = GetClientRolesWithHttpInfo(clientKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get roles for a client 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>ApiResponse of List&lt;RoleResource&gt;</returns>
        public ApiResponse< List<RoleResource> > GetClientRolesWithHttpInfo (string clientKey)
        {
            // verify the required parameter 'clientKey' is set
            if (clientKey == null)
                throw new ApiException(400, "Missing required parameter 'clientKey' when calling AuthRolesApi->GetClientRoles");

            var localVarPath = "/auth/clients/{client_key}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientKey != null) localVarPathParams.Add("client_key", Configuration.ApiClient.ParameterToString(clientKey)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RoleResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RoleResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RoleResource>)));
            
        }

        /// <summary>
        /// Get roles for a client 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>Task of List&lt;RoleResource&gt;</returns>
        public async System.Threading.Tasks.Task<List<RoleResource>> GetClientRolesAsync (string clientKey)
        {
             ApiResponse<List<RoleResource>> localVarResponse = await GetClientRolesAsyncWithHttpInfo(clientKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get roles for a client 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>Task of ApiResponse (List&lt;RoleResource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RoleResource>>> GetClientRolesAsyncWithHttpInfo (string clientKey)
        {
            // verify the required parameter 'clientKey' is set
            if (clientKey == null)
                throw new ApiException(400, "Missing required parameter 'clientKey' when calling AuthRolesApi->GetClientRoles");

            var localVarPath = "/auth/clients/{client_key}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientKey != null) localVarPathParams.Add("client_key", Configuration.ApiClient.ParameterToString(clientKey)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RoleResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RoleResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RoleResource>)));
            
        }

        /// <summary>
        /// Get a single role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>RoleResource</returns>
        public RoleResource GetRole (string role)
        {
             ApiResponse<RoleResource> localVarResponse = GetRoleWithHttpInfo(role);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>ApiResponse of RoleResource</returns>
        public ApiResponse< RoleResource > GetRoleWithHttpInfo (string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->GetRole");

            var localVarPath = "/auth/roles/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
            
        }

        /// <summary>
        /// Get a single role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>Task of RoleResource</returns>
        public async System.Threading.Tasks.Task<RoleResource> GetRoleAsync (string role)
        {
             ApiResponse<RoleResource> localVarResponse = await GetRoleAsyncWithHttpInfo(role);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleResource>> GetRoleAsyncWithHttpInfo (string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->GetRole");

            var localVarPath = "/auth/roles/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
            
        }

        /// <summary>
        /// List and search roles 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)</param>
        /// <returns>PageResourceRoleResource</returns>
        public PageResourceRoleResource GetRoles (int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceRoleResource> localVarResponse = GetRolesWithHttpInfo(size, page, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List and search roles 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)</param>
        /// <returns>ApiResponse of PageResourceRoleResource</returns>
        public ApiResponse< PageResourceRoleResource > GetRolesWithHttpInfo (int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/auth/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceRoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceRoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceRoleResource)));
            
        }

        /// <summary>
        /// List and search roles 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)</param>
        /// <returns>Task of PageResourceRoleResource</returns>
        public async System.Threading.Tasks.Task<PageResourceRoleResource> GetRolesAsync (int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceRoleResource> localVarResponse = await GetRolesAsyncWithHttpInfo(size, page, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List and search roles 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceRoleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceRoleResource>> GetRolesAsyncWithHttpInfo (int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/auth/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceRoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceRoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceRoleResource)));
            
        }

        /// <summary>
        /// Get roles for a user 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>List&lt;RoleResource&gt;</returns>
        public List<RoleResource> GetUserRoles (int? userId)
        {
             ApiResponse<List<RoleResource>> localVarResponse = GetUserRolesWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get roles for a user 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>ApiResponse of List&lt;RoleResource&gt;</returns>
        public ApiResponse< List<RoleResource> > GetUserRolesWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthRolesApi->GetUserRoles");

            var localVarPath = "/auth/users/{user_id}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RoleResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RoleResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RoleResource>)));
            
        }

        /// <summary>
        /// Get roles for a user 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>Task of List&lt;RoleResource&gt;</returns>
        public async System.Threading.Tasks.Task<List<RoleResource>> GetUserRolesAsync (int? userId)
        {
             ApiResponse<List<RoleResource>> localVarResponse = await GetUserRolesAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get roles for a user 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>Task of ApiResponse (List&lt;RoleResource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RoleResource>>> GetUserRolesAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthRolesApi->GetUserRoles");

            var localVarPath = "/auth/users/{user_id}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RoleResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RoleResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RoleResource>)));
            
        }

        /// <summary>
        /// Set roles for a client 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>ClientResource</returns>
        public ClientResource SetClientRoles (string clientKey, List<string> rolesList = null)
        {
             ApiResponse<ClientResource> localVarResponse = SetClientRolesWithHttpInfo(clientKey, rolesList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set roles for a client 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>ApiResponse of ClientResource</returns>
        public ApiResponse< ClientResource > SetClientRolesWithHttpInfo (string clientKey, List<string> rolesList = null)
        {
            // verify the required parameter 'clientKey' is set
            if (clientKey == null)
                throw new ApiException(400, "Missing required parameter 'clientKey' when calling AuthRolesApi->SetClientRoles");

            var localVarPath = "/auth/clients/{client_key}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientKey != null) localVarPathParams.Add("client_key", Configuration.ApiClient.ParameterToString(clientKey)); // path parameter
            if (rolesList != null && rolesList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rolesList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rolesList; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetClientRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientResource)));
            
        }

        /// <summary>
        /// Set roles for a client 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of ClientResource</returns>
        public async System.Threading.Tasks.Task<ClientResource> SetClientRolesAsync (string clientKey, List<string> rolesList = null)
        {
             ApiResponse<ClientResource> localVarResponse = await SetClientRolesAsyncWithHttpInfo(clientKey, rolesList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set roles for a client 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of ApiResponse (ClientResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientResource>> SetClientRolesAsyncWithHttpInfo (string clientKey, List<string> rolesList = null)
        {
            // verify the required parameter 'clientKey' is set
            if (clientKey == null)
                throw new ApiException(400, "Missing required parameter 'clientKey' when calling AuthRolesApi->SetClientRoles");

            var localVarPath = "/auth/clients/{client_key}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientKey != null) localVarPathParams.Add("client_key", Configuration.ApiClient.ParameterToString(clientKey)); // path parameter
            if (rolesList != null && rolesList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rolesList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rolesList; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetClientRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientResource)));
            
        }

        /// <summary>
        /// Set permissions for a role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns>RoleResource</returns>
        public RoleResource SetPermissionsForRole (string role, List<string> permissionsList = null)
        {
             ApiResponse<RoleResource> localVarResponse = SetPermissionsForRoleWithHttpInfo(role, permissionsList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set permissions for a role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns>ApiResponse of RoleResource</returns>
        public ApiResponse< RoleResource > SetPermissionsForRoleWithHttpInfo (string role, List<string> permissionsList = null)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->SetPermissionsForRole");

            var localVarPath = "/auth/roles/{role}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (permissionsList != null && permissionsList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(permissionsList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissionsList; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPermissionsForRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
            
        }

        /// <summary>
        /// Set permissions for a role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns>Task of RoleResource</returns>
        public async System.Threading.Tasks.Task<RoleResource> SetPermissionsForRoleAsync (string role, List<string> permissionsList = null)
        {
             ApiResponse<RoleResource> localVarResponse = await SetPermissionsForRoleAsyncWithHttpInfo(role, permissionsList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set permissions for a role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleResource>> SetPermissionsForRoleAsyncWithHttpInfo (string role, List<string> permissionsList = null)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->SetPermissionsForRole");

            var localVarPath = "/auth/roles/{role}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (permissionsList != null && permissionsList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(permissionsList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissionsList; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPermissionsForRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
            
        }

        /// <summary>
        /// Set roles for a user 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>UserResource</returns>
        public UserResource SetUserRoles (int? userId, List<string> rolesList = null)
        {
             ApiResponse<UserResource> localVarResponse = SetUserRolesWithHttpInfo(userId, rolesList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set roles for a user 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>ApiResponse of UserResource</returns>
        public ApiResponse< UserResource > SetUserRolesWithHttpInfo (int? userId, List<string> rolesList = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthRolesApi->SetUserRoles");

            var localVarPath = "/auth/users/{user_id}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (rolesList != null && rolesList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rolesList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rolesList; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetUserRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResource)));
            
        }

        /// <summary>
        /// Set roles for a user 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of UserResource</returns>
        public async System.Threading.Tasks.Task<UserResource> SetUserRolesAsync (int? userId, List<string> rolesList = null)
        {
             ApiResponse<UserResource> localVarResponse = await SetUserRolesAsyncWithHttpInfo(userId, rolesList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set roles for a user 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of ApiResponse (UserResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserResource>> SetUserRolesAsyncWithHttpInfo (int? userId, List<string> rolesList = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthRolesApi->SetUserRoles");

            var localVarPath = "/auth/users/{user_id}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (rolesList != null && rolesList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rolesList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rolesList; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetUserRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResource)));
            
        }

        /// <summary>
        /// Update a role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>RoleResource</returns>
        public RoleResource UpdateRole (string role, RoleResource roleResource = null)
        {
             ApiResponse<RoleResource> localVarResponse = UpdateRoleWithHttpInfo(role, roleResource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>ApiResponse of RoleResource</returns>
        public ApiResponse< RoleResource > UpdateRoleWithHttpInfo (string role, RoleResource roleResource = null)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->UpdateRole");

            var localVarPath = "/auth/roles/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (roleResource != null && roleResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(roleResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
            
        }

        /// <summary>
        /// Update a role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of RoleResource</returns>
        public async System.Threading.Tasks.Task<RoleResource> UpdateRoleAsync (string role, RoleResource roleResource = null)
        {
             ApiResponse<RoleResource> localVarResponse = await UpdateRoleAsyncWithHttpInfo(role, roleResource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a role 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleResource>> UpdateRoleAsyncWithHttpInfo (string role, RoleResource roleResource = null)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->UpdateRole");

            var localVarPath = "/auth/roles/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (roleResource != null && roleResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(roleResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
            
        }

    }
}
