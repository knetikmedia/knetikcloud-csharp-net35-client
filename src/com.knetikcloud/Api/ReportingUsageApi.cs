/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.knetikcloud.Client;
using com.knetikcloud.Model;

namespace com.knetikcloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportingUsageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns aggregated endpoint usage information by day
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceUsageInfo</returns>
        PageResourceUsageInfo GetUsageByDay (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);

        /// <summary>
        /// Returns aggregated endpoint usage information by day
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceUsageInfo</returns>
        ApiResponse<PageResourceUsageInfo> GetUsageByDayWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);
        /// <summary>
        /// Returns aggregated endpoint usage information by hour
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceUsageInfo</returns>
        PageResourceUsageInfo GetUsageByHour (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);

        /// <summary>
        /// Returns aggregated endpoint usage information by hour
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceUsageInfo</returns>
        ApiResponse<PageResourceUsageInfo> GetUsageByHourWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);
        /// <summary>
        /// Returns aggregated endpoint usage information by minute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceUsageInfo</returns>
        PageResourceUsageInfo GetUsageByMinute (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);

        /// <summary>
        /// Returns aggregated endpoint usage information by minute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceUsageInfo</returns>
        ApiResponse<PageResourceUsageInfo> GetUsageByMinuteWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);
        /// <summary>
        /// Returns aggregated endpoint usage information by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceUsageInfo</returns>
        PageResourceUsageInfo GetUsageByMonth (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);

        /// <summary>
        /// Returns aggregated endpoint usage information by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceUsageInfo</returns>
        ApiResponse<PageResourceUsageInfo> GetUsageByMonthWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);
        /// <summary>
        /// Returns aggregated endpoint usage information by year
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceUsageInfo</returns>
        PageResourceUsageInfo GetUsageByYear (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);

        /// <summary>
        /// Returns aggregated endpoint usage information by year
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceUsageInfo</returns>
        ApiResponse<PageResourceUsageInfo> GetUsageByYearWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);
        /// <summary>
        /// Returns list of endpoints called (method and url)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetUsageEndpoints (long? startDate, long? endDate);

        /// <summary>
        /// Returns list of endpoints called (method and url)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetUsageEndpointsWithHttpInfo (long? startDate, long? endDate);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns aggregated endpoint usage information by day
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceUsageInfo</returns>
        System.Threading.Tasks.Task<PageResourceUsageInfo> GetUsageByDayAsync (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);

        /// <summary>
        /// Returns aggregated endpoint usage information by day
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceUsageInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceUsageInfo>> GetUsageByDayAsyncWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);
        /// <summary>
        /// Returns aggregated endpoint usage information by hour
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceUsageInfo</returns>
        System.Threading.Tasks.Task<PageResourceUsageInfo> GetUsageByHourAsync (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);

        /// <summary>
        /// Returns aggregated endpoint usage information by hour
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceUsageInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceUsageInfo>> GetUsageByHourAsyncWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);
        /// <summary>
        /// Returns aggregated endpoint usage information by minute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceUsageInfo</returns>
        System.Threading.Tasks.Task<PageResourceUsageInfo> GetUsageByMinuteAsync (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);

        /// <summary>
        /// Returns aggregated endpoint usage information by minute
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceUsageInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceUsageInfo>> GetUsageByMinuteAsyncWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);
        /// <summary>
        /// Returns aggregated endpoint usage information by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceUsageInfo</returns>
        System.Threading.Tasks.Task<PageResourceUsageInfo> GetUsageByMonthAsync (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);

        /// <summary>
        /// Returns aggregated endpoint usage information by month
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceUsageInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceUsageInfo>> GetUsageByMonthAsyncWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);
        /// <summary>
        /// Returns aggregated endpoint usage information by year
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceUsageInfo</returns>
        System.Threading.Tasks.Task<PageResourceUsageInfo> GetUsageByYearAsync (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);

        /// <summary>
        /// Returns aggregated endpoint usage information by year
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceUsageInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceUsageInfo>> GetUsageByYearAsyncWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null);
        /// <summary>
        /// Returns list of endpoints called (method and url)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetUsageEndpointsAsync (long? startDate, long? endDate);

        /// <summary>
        /// Returns list of endpoints called (method and url)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetUsageEndpointsAsyncWithHttpInfo (long? startDate, long? endDate);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportingUsageApi : IReportingUsageApi
    {
        private com.knetikcloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingUsageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportingUsageApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.knetikcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingUsageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportingUsageApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.knetikcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.knetikcloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns aggregated endpoint usage information by day 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceUsageInfo</returns>
        public PageResourceUsageInfo GetUsageByDay (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceUsageInfo> localVarResponse = GetUsageByDayWithHttpInfo(startDate, endDate, combineEndpoints, method, url, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns aggregated endpoint usage information by day 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceUsageInfo</returns>
        public ApiResponse< PageResourceUsageInfo > GetUsageByDayWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportingUsageApi->GetUsageByDay");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportingUsageApi->GetUsageByDay");

            var localVarPath = "/reporting/usage/day";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (combineEndpoints != null) localVarQueryParams.Add("combine_endpoints", Configuration.ApiClient.ParameterToString(combineEndpoints)); // query parameter
            if (method != null) localVarQueryParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // query parameter
            if (url != null) localVarQueryParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsageByDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUsageInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUsageInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUsageInfo)));
            
        }

        /// <summary>
        /// Returns aggregated endpoint usage information by day 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceUsageInfo</returns>
        public async System.Threading.Tasks.Task<PageResourceUsageInfo> GetUsageByDayAsync (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceUsageInfo> localVarResponse = await GetUsageByDayAsyncWithHttpInfo(startDate, endDate, combineEndpoints, method, url, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns aggregated endpoint usage information by day 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceUsageInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceUsageInfo>> GetUsageByDayAsyncWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportingUsageApi->GetUsageByDay");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportingUsageApi->GetUsageByDay");

            var localVarPath = "/reporting/usage/day";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (combineEndpoints != null) localVarQueryParams.Add("combine_endpoints", Configuration.ApiClient.ParameterToString(combineEndpoints)); // query parameter
            if (method != null) localVarQueryParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // query parameter
            if (url != null) localVarQueryParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsageByDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUsageInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUsageInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUsageInfo)));
            
        }

        /// <summary>
        /// Returns aggregated endpoint usage information by hour 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceUsageInfo</returns>
        public PageResourceUsageInfo GetUsageByHour (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceUsageInfo> localVarResponse = GetUsageByHourWithHttpInfo(startDate, endDate, combineEndpoints, method, url, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns aggregated endpoint usage information by hour 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceUsageInfo</returns>
        public ApiResponse< PageResourceUsageInfo > GetUsageByHourWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportingUsageApi->GetUsageByHour");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportingUsageApi->GetUsageByHour");

            var localVarPath = "/reporting/usage/hour";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (combineEndpoints != null) localVarQueryParams.Add("combine_endpoints", Configuration.ApiClient.ParameterToString(combineEndpoints)); // query parameter
            if (method != null) localVarQueryParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // query parameter
            if (url != null) localVarQueryParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsageByHour", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUsageInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUsageInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUsageInfo)));
            
        }

        /// <summary>
        /// Returns aggregated endpoint usage information by hour 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceUsageInfo</returns>
        public async System.Threading.Tasks.Task<PageResourceUsageInfo> GetUsageByHourAsync (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceUsageInfo> localVarResponse = await GetUsageByHourAsyncWithHttpInfo(startDate, endDate, combineEndpoints, method, url, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns aggregated endpoint usage information by hour 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceUsageInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceUsageInfo>> GetUsageByHourAsyncWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportingUsageApi->GetUsageByHour");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportingUsageApi->GetUsageByHour");

            var localVarPath = "/reporting/usage/hour";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (combineEndpoints != null) localVarQueryParams.Add("combine_endpoints", Configuration.ApiClient.ParameterToString(combineEndpoints)); // query parameter
            if (method != null) localVarQueryParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // query parameter
            if (url != null) localVarQueryParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsageByHour", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUsageInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUsageInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUsageInfo)));
            
        }

        /// <summary>
        /// Returns aggregated endpoint usage information by minute 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceUsageInfo</returns>
        public PageResourceUsageInfo GetUsageByMinute (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceUsageInfo> localVarResponse = GetUsageByMinuteWithHttpInfo(startDate, endDate, combineEndpoints, method, url, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns aggregated endpoint usage information by minute 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceUsageInfo</returns>
        public ApiResponse< PageResourceUsageInfo > GetUsageByMinuteWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportingUsageApi->GetUsageByMinute");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportingUsageApi->GetUsageByMinute");

            var localVarPath = "/reporting/usage/minute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (combineEndpoints != null) localVarQueryParams.Add("combine_endpoints", Configuration.ApiClient.ParameterToString(combineEndpoints)); // query parameter
            if (method != null) localVarQueryParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // query parameter
            if (url != null) localVarQueryParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsageByMinute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUsageInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUsageInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUsageInfo)));
            
        }

        /// <summary>
        /// Returns aggregated endpoint usage information by minute 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceUsageInfo</returns>
        public async System.Threading.Tasks.Task<PageResourceUsageInfo> GetUsageByMinuteAsync (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceUsageInfo> localVarResponse = await GetUsageByMinuteAsyncWithHttpInfo(startDate, endDate, combineEndpoints, method, url, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns aggregated endpoint usage information by minute 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceUsageInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceUsageInfo>> GetUsageByMinuteAsyncWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportingUsageApi->GetUsageByMinute");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportingUsageApi->GetUsageByMinute");

            var localVarPath = "/reporting/usage/minute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (combineEndpoints != null) localVarQueryParams.Add("combine_endpoints", Configuration.ApiClient.ParameterToString(combineEndpoints)); // query parameter
            if (method != null) localVarQueryParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // query parameter
            if (url != null) localVarQueryParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsageByMinute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUsageInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUsageInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUsageInfo)));
            
        }

        /// <summary>
        /// Returns aggregated endpoint usage information by month 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceUsageInfo</returns>
        public PageResourceUsageInfo GetUsageByMonth (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceUsageInfo> localVarResponse = GetUsageByMonthWithHttpInfo(startDate, endDate, combineEndpoints, method, url, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns aggregated endpoint usage information by month 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceUsageInfo</returns>
        public ApiResponse< PageResourceUsageInfo > GetUsageByMonthWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportingUsageApi->GetUsageByMonth");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportingUsageApi->GetUsageByMonth");

            var localVarPath = "/reporting/usage/month";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (combineEndpoints != null) localVarQueryParams.Add("combine_endpoints", Configuration.ApiClient.ParameterToString(combineEndpoints)); // query parameter
            if (method != null) localVarQueryParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // query parameter
            if (url != null) localVarQueryParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsageByMonth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUsageInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUsageInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUsageInfo)));
            
        }

        /// <summary>
        /// Returns aggregated endpoint usage information by month 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceUsageInfo</returns>
        public async System.Threading.Tasks.Task<PageResourceUsageInfo> GetUsageByMonthAsync (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceUsageInfo> localVarResponse = await GetUsageByMonthAsyncWithHttpInfo(startDate, endDate, combineEndpoints, method, url, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns aggregated endpoint usage information by month 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceUsageInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceUsageInfo>> GetUsageByMonthAsyncWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportingUsageApi->GetUsageByMonth");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportingUsageApi->GetUsageByMonth");

            var localVarPath = "/reporting/usage/month";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (combineEndpoints != null) localVarQueryParams.Add("combine_endpoints", Configuration.ApiClient.ParameterToString(combineEndpoints)); // query parameter
            if (method != null) localVarQueryParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // query parameter
            if (url != null) localVarQueryParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsageByMonth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUsageInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUsageInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUsageInfo)));
            
        }

        /// <summary>
        /// Returns aggregated endpoint usage information by year 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceUsageInfo</returns>
        public PageResourceUsageInfo GetUsageByYear (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceUsageInfo> localVarResponse = GetUsageByYearWithHttpInfo(startDate, endDate, combineEndpoints, method, url, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns aggregated endpoint usage information by year 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceUsageInfo</returns>
        public ApiResponse< PageResourceUsageInfo > GetUsageByYearWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportingUsageApi->GetUsageByYear");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportingUsageApi->GetUsageByYear");

            var localVarPath = "/reporting/usage/year";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (combineEndpoints != null) localVarQueryParams.Add("combine_endpoints", Configuration.ApiClient.ParameterToString(combineEndpoints)); // query parameter
            if (method != null) localVarQueryParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // query parameter
            if (url != null) localVarQueryParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsageByYear", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUsageInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUsageInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUsageInfo)));
            
        }

        /// <summary>
        /// Returns aggregated endpoint usage information by year 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceUsageInfo</returns>
        public async System.Threading.Tasks.Task<PageResourceUsageInfo> GetUsageByYearAsync (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceUsageInfo> localVarResponse = await GetUsageByYearAsyncWithHttpInfo(startDate, endDate, combineEndpoints, method, url, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns aggregated endpoint usage information by year 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <param name="combineEndpoints">Whether to combine counts from different endpoints. Removes the url and method from the result object (optional, default to false)</param>
        /// <param name="method">Filter for a certain endpoint method.  Must include url as well to work (optional)</param>
        /// <param name="url">Filter for a certain endpoint.  Must include method as well to work (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceUsageInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceUsageInfo>> GetUsageByYearAsyncWithHttpInfo (long? startDate, long? endDate, bool? combineEndpoints = null, string method = null, string url = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportingUsageApi->GetUsageByYear");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportingUsageApi->GetUsageByYear");

            var localVarPath = "/reporting/usage/year";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (combineEndpoints != null) localVarQueryParams.Add("combine_endpoints", Configuration.ApiClient.ParameterToString(combineEndpoints)); // query parameter
            if (method != null) localVarQueryParams.Add("method", Configuration.ApiClient.ParameterToString(method)); // query parameter
            if (url != null) localVarQueryParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsageByYear", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUsageInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUsageInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUsageInfo)));
            
        }

        /// <summary>
        /// Returns list of endpoints called (method and url) 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetUsageEndpoints (long? startDate, long? endDate)
        {
             ApiResponse<List<string>> localVarResponse = GetUsageEndpointsWithHttpInfo(startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns list of endpoints called (method and url) 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetUsageEndpointsWithHttpInfo (long? startDate, long? endDate)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportingUsageApi->GetUsageEndpoints");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportingUsageApi->GetUsageEndpoints");

            var localVarPath = "/reporting/usage/endpoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsageEndpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// Returns list of endpoints called (method and url) 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetUsageEndpointsAsync (long? startDate, long? endDate)
        {
             ApiResponse<List<string>> localVarResponse = await GetUsageEndpointsAsyncWithHttpInfo(startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns list of endpoints called (method and url) 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The beginning of the range being requested, unix timestamp in seconds</param>
        /// <param name="endDate">The ending of the range being requested, unix timestamp in seconds</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetUsageEndpointsAsyncWithHttpInfo (long? startDate, long? endDate)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling ReportingUsageApi->GetUsageEndpoints");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ReportingUsageApi->GetUsageEndpoints");

            var localVarPath = "/reporting/usage/endpoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsageEndpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

    }
}
