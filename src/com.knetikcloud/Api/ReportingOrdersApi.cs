/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.knetikcloud.Client;
using com.knetikcloud.Model;

namespace com.knetikcloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportingOrdersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve invoice counts aggregated by time ranges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="granularity">The time duration to aggregate by (optional, default to day)</param>
        /// <param name="filterPaymentStatus">A payment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="filterFulfillmentStatus">An invoice fulfillment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="startDate">The start of the time range to return, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to return, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>PageResourceAggregateInvoiceReportResource</returns>
        PageResourceAggregateInvoiceReportResource GetInvoiceReports (string currencyCode, string granularity = null, string filterPaymentStatus = null, string filterFulfillmentStatus = null, long? startDate = null, long? endDate = null);

        /// <summary>
        /// Retrieve invoice counts aggregated by time ranges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="granularity">The time duration to aggregate by (optional, default to day)</param>
        /// <param name="filterPaymentStatus">A payment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="filterFulfillmentStatus">An invoice fulfillment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="startDate">The start of the time range to return, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to return, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>ApiResponse of PageResourceAggregateInvoiceReportResource</returns>
        ApiResponse<PageResourceAggregateInvoiceReportResource> GetInvoiceReportsWithHttpInfo (string currencyCode, string granularity = null, string filterPaymentStatus = null, string filterFulfillmentStatus = null, long? startDate = null, long? endDate = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve invoice counts aggregated by time ranges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="granularity">The time duration to aggregate by (optional, default to day)</param>
        /// <param name="filterPaymentStatus">A payment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="filterFulfillmentStatus">An invoice fulfillment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="startDate">The start of the time range to return, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to return, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of PageResourceAggregateInvoiceReportResource</returns>
        System.Threading.Tasks.Task<PageResourceAggregateInvoiceReportResource> GetInvoiceReportsAsync (string currencyCode, string granularity = null, string filterPaymentStatus = null, string filterFulfillmentStatus = null, long? startDate = null, long? endDate = null);

        /// <summary>
        /// Retrieve invoice counts aggregated by time ranges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="granularity">The time duration to aggregate by (optional, default to day)</param>
        /// <param name="filterPaymentStatus">A payment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="filterFulfillmentStatus">An invoice fulfillment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="startDate">The start of the time range to return, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to return, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of ApiResponse (PageResourceAggregateInvoiceReportResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceAggregateInvoiceReportResource>> GetInvoiceReportsAsyncWithHttpInfo (string currencyCode, string granularity = null, string filterPaymentStatus = null, string filterFulfillmentStatus = null, long? startDate = null, long? endDate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportingOrdersApi : IReportingOrdersApi
    {
        private com.knetikcloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingOrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportingOrdersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.knetikcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingOrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportingOrdersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.knetikcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.knetikcloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve invoice counts aggregated by time ranges 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="granularity">The time duration to aggregate by (optional, default to day)</param>
        /// <param name="filterPaymentStatus">A payment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="filterFulfillmentStatus">An invoice fulfillment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="startDate">The start of the time range to return, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to return, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>PageResourceAggregateInvoiceReportResource</returns>
        public PageResourceAggregateInvoiceReportResource GetInvoiceReports (string currencyCode, string granularity = null, string filterPaymentStatus = null, string filterFulfillmentStatus = null, long? startDate = null, long? endDate = null)
        {
             ApiResponse<PageResourceAggregateInvoiceReportResource> localVarResponse = GetInvoiceReportsWithHttpInfo(currencyCode, granularity, filterPaymentStatus, filterFulfillmentStatus, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve invoice counts aggregated by time ranges 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="granularity">The time duration to aggregate by (optional, default to day)</param>
        /// <param name="filterPaymentStatus">A payment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="filterFulfillmentStatus">An invoice fulfillment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="startDate">The start of the time range to return, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to return, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>ApiResponse of PageResourceAggregateInvoiceReportResource</returns>
        public ApiResponse< PageResourceAggregateInvoiceReportResource > GetInvoiceReportsWithHttpInfo (string currencyCode, string granularity = null, string filterPaymentStatus = null, string filterFulfillmentStatus = null, long? startDate = null, long? endDate = null)
        {
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling ReportingOrdersApi->GetInvoiceReports");

            var localVarPath = "/reporting/orders/count/{currency_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (granularity != null) localVarQueryParams.Add("granularity", Configuration.ApiClient.ParameterToString(granularity)); // query parameter
            if (filterPaymentStatus != null) localVarQueryParams.Add("filter_payment_status", Configuration.ApiClient.ParameterToString(filterPaymentStatus)); // query parameter
            if (filterFulfillmentStatus != null) localVarQueryParams.Add("filter_fulfillment_status", Configuration.ApiClient.ParameterToString(filterFulfillmentStatus)); // query parameter
            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoiceReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceAggregateInvoiceReportResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceAggregateInvoiceReportResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceAggregateInvoiceReportResource)));
            
        }

        /// <summary>
        /// Retrieve invoice counts aggregated by time ranges 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="granularity">The time duration to aggregate by (optional, default to day)</param>
        /// <param name="filterPaymentStatus">A payment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="filterFulfillmentStatus">An invoice fulfillment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="startDate">The start of the time range to return, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to return, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of PageResourceAggregateInvoiceReportResource</returns>
        public async System.Threading.Tasks.Task<PageResourceAggregateInvoiceReportResource> GetInvoiceReportsAsync (string currencyCode, string granularity = null, string filterPaymentStatus = null, string filterFulfillmentStatus = null, long? startDate = null, long? endDate = null)
        {
             ApiResponse<PageResourceAggregateInvoiceReportResource> localVarResponse = await GetInvoiceReportsAsyncWithHttpInfo(currencyCode, granularity, filterPaymentStatus, filterFulfillmentStatus, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve invoice counts aggregated by time ranges 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="granularity">The time duration to aggregate by (optional, default to day)</param>
        /// <param name="filterPaymentStatus">A payment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="filterFulfillmentStatus">An invoice fulfillment status to filter results by, can be a comma separated list (optional)</param>
        /// <param name="startDate">The start of the time range to return, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to return, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of ApiResponse (PageResourceAggregateInvoiceReportResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceAggregateInvoiceReportResource>> GetInvoiceReportsAsyncWithHttpInfo (string currencyCode, string granularity = null, string filterPaymentStatus = null, string filterFulfillmentStatus = null, long? startDate = null, long? endDate = null)
        {
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling ReportingOrdersApi->GetInvoiceReports");

            var localVarPath = "/reporting/orders/count/{currency_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (granularity != null) localVarQueryParams.Add("granularity", Configuration.ApiClient.ParameterToString(granularity)); // query parameter
            if (filterPaymentStatus != null) localVarQueryParams.Add("filter_payment_status", Configuration.ApiClient.ParameterToString(filterPaymentStatus)); // query parameter
            if (filterFulfillmentStatus != null) localVarQueryParams.Add("filter_fulfillment_status", Configuration.ApiClient.ParameterToString(filterFulfillmentStatus)); // query parameter
            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoiceReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceAggregateInvoiceReportResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceAggregateInvoiceReportResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceAggregateInvoiceReportResource)));
            
        }

    }
}
