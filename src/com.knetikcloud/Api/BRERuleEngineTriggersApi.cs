/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using com.knetikcloud.Client;
using com.knetikcloud.Model;

namespace com.knetikcloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBRERuleEngineTriggersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a trigger
        /// </summary>
        /// <remarks>
        /// Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>BreTriggerResource</returns>
        BreTriggerResource CreateBRETrigger (BreTriggerResource breTriggerResource = null);

        /// <summary>
        /// Create a trigger
        /// </summary>
        /// <remarks>
        /// Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>ApiResponse of BreTriggerResource</returns>
        ApiResponse<BreTriggerResource> CreateBRETriggerWithHttpInfo (BreTriggerResource breTriggerResource = null);
        /// <summary>
        /// Delete a trigger
        /// </summary>
        /// <remarks>
        /// May fail if there are existing rules against it. Cannot delete core triggers
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns></returns>
        void DeleteBRETrigger (string eventName);

        /// <summary>
        /// Delete a trigger
        /// </summary>
        /// <remarks>
        /// May fail if there are existing rules against it. Cannot delete core triggers
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBRETriggerWithHttpInfo (string eventName);
        /// <summary>
        /// Get a single trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns>BreTriggerResource</returns>
        BreTriggerResource GetBRETrigger (string eventName);

        /// <summary>
        /// Get a single trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns>ApiResponse of BreTriggerResource</returns>
        ApiResponse<BreTriggerResource> GetBRETriggerWithHttpInfo (string eventName);
        /// <summary>
        /// List triggers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSystem">Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed (optional)</param>
        /// <param name="filterCategory">Filter for triggers that are within a specific category (optional)</param>
        /// <param name="filterName">Filter for triggers that have names containing the given string (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceBreTriggerResource</returns>
        PageResourceBreTriggerResource GetBRETriggers (bool? filterSystem = null, string filterCategory = null, string filterName = null, int? size = null, int? page = null);

        /// <summary>
        /// List triggers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSystem">Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed (optional)</param>
        /// <param name="filterCategory">Filter for triggers that are within a specific category (optional)</param>
        /// <param name="filterName">Filter for triggers that have names containing the given string (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceBreTriggerResource</returns>
        ApiResponse<PageResourceBreTriggerResource> GetBRETriggersWithHttpInfo (bool? filterSystem = null, string filterCategory = null, string filterName = null, int? size = null, int? page = null);
        /// <summary>
        /// Update a trigger
        /// </summary>
        /// <remarks>
        /// May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>BreTriggerResource</returns>
        BreTriggerResource UpdateBRETrigger (string eventName, BreTriggerResource breTriggerResource = null);

        /// <summary>
        /// Update a trigger
        /// </summary>
        /// <remarks>
        /// May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>ApiResponse of BreTriggerResource</returns>
        ApiResponse<BreTriggerResource> UpdateBRETriggerWithHttpInfo (string eventName, BreTriggerResource breTriggerResource = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a trigger
        /// </summary>
        /// <remarks>
        /// Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>Task of BreTriggerResource</returns>
        System.Threading.Tasks.Task<BreTriggerResource> CreateBRETriggerAsync (BreTriggerResource breTriggerResource = null);

        /// <summary>
        /// Create a trigger
        /// </summary>
        /// <remarks>
        /// Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>Task of ApiResponse (BreTriggerResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<BreTriggerResource>> CreateBRETriggerAsyncWithHttpInfo (BreTriggerResource breTriggerResource = null);
        /// <summary>
        /// Delete a trigger
        /// </summary>
        /// <remarks>
        /// May fail if there are existing rules against it. Cannot delete core triggers
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBRETriggerAsync (string eventName);

        /// <summary>
        /// Delete a trigger
        /// </summary>
        /// <remarks>
        /// May fail if there are existing rules against it. Cannot delete core triggers
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBRETriggerAsyncWithHttpInfo (string eventName);
        /// <summary>
        /// Get a single trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns>Task of BreTriggerResource</returns>
        System.Threading.Tasks.Task<BreTriggerResource> GetBRETriggerAsync (string eventName);

        /// <summary>
        /// Get a single trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns>Task of ApiResponse (BreTriggerResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<BreTriggerResource>> GetBRETriggerAsyncWithHttpInfo (string eventName);
        /// <summary>
        /// List triggers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSystem">Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed (optional)</param>
        /// <param name="filterCategory">Filter for triggers that are within a specific category (optional)</param>
        /// <param name="filterName">Filter for triggers that have names containing the given string (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceBreTriggerResource</returns>
        System.Threading.Tasks.Task<PageResourceBreTriggerResource> GetBRETriggersAsync (bool? filterSystem = null, string filterCategory = null, string filterName = null, int? size = null, int? page = null);

        /// <summary>
        /// List triggers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSystem">Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed (optional)</param>
        /// <param name="filterCategory">Filter for triggers that are within a specific category (optional)</param>
        /// <param name="filterName">Filter for triggers that have names containing the given string (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceBreTriggerResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceBreTriggerResource>> GetBRETriggersAsyncWithHttpInfo (bool? filterSystem = null, string filterCategory = null, string filterName = null, int? size = null, int? page = null);
        /// <summary>
        /// Update a trigger
        /// </summary>
        /// <remarks>
        /// May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>Task of BreTriggerResource</returns>
        System.Threading.Tasks.Task<BreTriggerResource> UpdateBRETriggerAsync (string eventName, BreTriggerResource breTriggerResource = null);

        /// <summary>
        /// Update a trigger
        /// </summary>
        /// <remarks>
        /// May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers
        /// </remarks>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>Task of ApiResponse (BreTriggerResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<BreTriggerResource>> UpdateBRETriggerAsyncWithHttpInfo (string eventName, BreTriggerResource breTriggerResource = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BRERuleEngineTriggersApi : IBRERuleEngineTriggersApi
    {
        private com.knetikcloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BRERuleEngineTriggersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BRERuleEngineTriggersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = com.knetikcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BRERuleEngineTriggersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BRERuleEngineTriggersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = com.knetikcloud.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.knetikcloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a trigger Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>BreTriggerResource</returns>
        public BreTriggerResource CreateBRETrigger (BreTriggerResource breTriggerResource = null)
        {
             ApiResponse<BreTriggerResource> localVarResponse = CreateBRETriggerWithHttpInfo(breTriggerResource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a trigger Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>ApiResponse of BreTriggerResource</returns>
        public ApiResponse< BreTriggerResource > CreateBRETriggerWithHttpInfo (BreTriggerResource breTriggerResource = null)
        {

            var localVarPath = "/bre/triggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (breTriggerResource != null && breTriggerResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(breTriggerResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = breTriggerResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBRETrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreTriggerResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BreTriggerResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreTriggerResource)));
            
        }

        /// <summary>
        /// Create a trigger Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>Task of BreTriggerResource</returns>
        public async System.Threading.Tasks.Task<BreTriggerResource> CreateBRETriggerAsync (BreTriggerResource breTriggerResource = null)
        {
             ApiResponse<BreTriggerResource> localVarResponse = await CreateBRETriggerAsyncWithHttpInfo(breTriggerResource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a trigger Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>Task of ApiResponse (BreTriggerResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BreTriggerResource>> CreateBRETriggerAsyncWithHttpInfo (BreTriggerResource breTriggerResource = null)
        {

            var localVarPath = "/bre/triggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (breTriggerResource != null && breTriggerResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(breTriggerResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = breTriggerResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBRETrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreTriggerResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BreTriggerResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreTriggerResource)));
            
        }

        /// <summary>
        /// Delete a trigger May fail if there are existing rules against it. Cannot delete core triggers
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns></returns>
        public void DeleteBRETrigger (string eventName)
        {
             DeleteBRETriggerWithHttpInfo(eventName);
        }

        /// <summary>
        /// Delete a trigger May fail if there are existing rules against it. Cannot delete core triggers
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBRETriggerWithHttpInfo (string eventName)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling BRERuleEngineTriggersApi->DeleteBRETrigger");

            var localVarPath = "/bre/triggers/{event_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", Configuration.ApiClient.ParameterToString(eventName)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBRETrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a trigger May fail if there are existing rules against it. Cannot delete core triggers
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBRETriggerAsync (string eventName)
        {
             await DeleteBRETriggerAsyncWithHttpInfo(eventName);

        }

        /// <summary>
        /// Delete a trigger May fail if there are existing rules against it. Cannot delete core triggers
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBRETriggerAsyncWithHttpInfo (string eventName)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling BRERuleEngineTriggersApi->DeleteBRETrigger");

            var localVarPath = "/bre/triggers/{event_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", Configuration.ApiClient.ParameterToString(eventName)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBRETrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a single trigger 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns>BreTriggerResource</returns>
        public BreTriggerResource GetBRETrigger (string eventName)
        {
             ApiResponse<BreTriggerResource> localVarResponse = GetBRETriggerWithHttpInfo(eventName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single trigger 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns>ApiResponse of BreTriggerResource</returns>
        public ApiResponse< BreTriggerResource > GetBRETriggerWithHttpInfo (string eventName)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling BRERuleEngineTriggersApi->GetBRETrigger");

            var localVarPath = "/bre/triggers/{event_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", Configuration.ApiClient.ParameterToString(eventName)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBRETrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreTriggerResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BreTriggerResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreTriggerResource)));
            
        }

        /// <summary>
        /// Get a single trigger 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns>Task of BreTriggerResource</returns>
        public async System.Threading.Tasks.Task<BreTriggerResource> GetBRETriggerAsync (string eventName)
        {
             ApiResponse<BreTriggerResource> localVarResponse = await GetBRETriggerAsyncWithHttpInfo(eventName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single trigger 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <returns>Task of ApiResponse (BreTriggerResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BreTriggerResource>> GetBRETriggerAsyncWithHttpInfo (string eventName)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling BRERuleEngineTriggersApi->GetBRETrigger");

            var localVarPath = "/bre/triggers/{event_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", Configuration.ApiClient.ParameterToString(eventName)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBRETrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreTriggerResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BreTriggerResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreTriggerResource)));
            
        }

        /// <summary>
        /// List triggers 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSystem">Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed (optional)</param>
        /// <param name="filterCategory">Filter for triggers that are within a specific category (optional)</param>
        /// <param name="filterName">Filter for triggers that have names containing the given string (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceBreTriggerResource</returns>
        public PageResourceBreTriggerResource GetBRETriggers (bool? filterSystem = null, string filterCategory = null, string filterName = null, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceBreTriggerResource> localVarResponse = GetBRETriggersWithHttpInfo(filterSystem, filterCategory, filterName, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List triggers 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSystem">Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed (optional)</param>
        /// <param name="filterCategory">Filter for triggers that are within a specific category (optional)</param>
        /// <param name="filterName">Filter for triggers that have names containing the given string (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceBreTriggerResource</returns>
        public ApiResponse< PageResourceBreTriggerResource > GetBRETriggersWithHttpInfo (bool? filterSystem = null, string filterCategory = null, string filterName = null, int? size = null, int? page = null)
        {

            var localVarPath = "/bre/triggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filterSystem != null) localVarQueryParams.Add("filter_system", Configuration.ApiClient.ParameterToString(filterSystem)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterName != null) localVarQueryParams.Add("filter_name", Configuration.ApiClient.ParameterToString(filterName)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBRETriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceBreTriggerResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceBreTriggerResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceBreTriggerResource)));
            
        }

        /// <summary>
        /// List triggers 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSystem">Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed (optional)</param>
        /// <param name="filterCategory">Filter for triggers that are within a specific category (optional)</param>
        /// <param name="filterName">Filter for triggers that have names containing the given string (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceBreTriggerResource</returns>
        public async System.Threading.Tasks.Task<PageResourceBreTriggerResource> GetBRETriggersAsync (bool? filterSystem = null, string filterCategory = null, string filterName = null, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceBreTriggerResource> localVarResponse = await GetBRETriggersAsyncWithHttpInfo(filterSystem, filterCategory, filterName, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List triggers 
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSystem">Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed (optional)</param>
        /// <param name="filterCategory">Filter for triggers that are within a specific category (optional)</param>
        /// <param name="filterName">Filter for triggers that have names containing the given string (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceBreTriggerResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceBreTriggerResource>> GetBRETriggersAsyncWithHttpInfo (bool? filterSystem = null, string filterCategory = null, string filterName = null, int? size = null, int? page = null)
        {

            var localVarPath = "/bre/triggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filterSystem != null) localVarQueryParams.Add("filter_system", Configuration.ApiClient.ParameterToString(filterSystem)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterName != null) localVarQueryParams.Add("filter_name", Configuration.ApiClient.ParameterToString(filterName)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBRETriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceBreTriggerResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceBreTriggerResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceBreTriggerResource)));
            
        }

        /// <summary>
        /// Update a trigger May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>BreTriggerResource</returns>
        public BreTriggerResource UpdateBRETrigger (string eventName, BreTriggerResource breTriggerResource = null)
        {
             ApiResponse<BreTriggerResource> localVarResponse = UpdateBRETriggerWithHttpInfo(eventName, breTriggerResource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a trigger May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>ApiResponse of BreTriggerResource</returns>
        public ApiResponse< BreTriggerResource > UpdateBRETriggerWithHttpInfo (string eventName, BreTriggerResource breTriggerResource = null)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling BRERuleEngineTriggersApi->UpdateBRETrigger");

            var localVarPath = "/bre/triggers/{event_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (breTriggerResource != null && breTriggerResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(breTriggerResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = breTriggerResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBRETrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreTriggerResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BreTriggerResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreTriggerResource)));
            
        }

        /// <summary>
        /// Update a trigger May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>Task of BreTriggerResource</returns>
        public async System.Threading.Tasks.Task<BreTriggerResource> UpdateBRETriggerAsync (string eventName, BreTriggerResource breTriggerResource = null)
        {
             ApiResponse<BreTriggerResource> localVarResponse = await UpdateBRETriggerAsyncWithHttpInfo(eventName, breTriggerResource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a trigger May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers
        /// </summary>
        /// <exception cref="com.knetikcloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">The trigger event name</param>
        /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
        /// <returns>Task of ApiResponse (BreTriggerResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BreTriggerResource>> UpdateBRETriggerAsyncWithHttpInfo (string eventName, BreTriggerResource breTriggerResource = null)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new ApiException(400, "Missing required parameter 'eventName' when calling BRERuleEngineTriggersApi->UpdateBRETrigger");

            var localVarPath = "/bre/triggers/{event_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventName != null) localVarPathParams.Add("event_name", Configuration.ApiClient.ParameterToString(eventName)); // path parameter
            if (breTriggerResource != null && breTriggerResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(breTriggerResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = breTriggerResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBRETrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BreTriggerResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BreTriggerResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BreTriggerResource)));
            
        }

    }
}
