/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// FulfillmentType
    /// </summary>
    [DataContract]
    public partial class FulfillmentType :  IEquatable<FulfillmentType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FulfillmentType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentType" /> class.
        /// </summary>
        /// <param name="Core">Whether the type is core and cannot be altered/deleted, read-only.</param>
        /// <param name="Description">A description of the type.</param>
        /// <param name="Id">The unique id of the type, read-only.</param>
        /// <param name="Name">The name of the type (required).</param>
        public FulfillmentType(bool? Core = default(bool?), string Description = default(string), int? Id = default(int?), string Name = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for FulfillmentType and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.Core = Core;
            this.Description = Description;
            this.Id = Id;
        }
        
        /// <summary>
        /// Whether the type is core and cannot be altered/deleted, read-only
        /// </summary>
        /// <value>Whether the type is core and cannot be altered/deleted, read-only</value>
        [DataMember(Name="core", EmitDefaultValue=false)]
        public bool? Core { get; set; }

        /// <summary>
        /// A description of the type
        /// </summary>
        /// <value>A description of the type</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The unique id of the type, read-only
        /// </summary>
        /// <value>The unique id of the type, read-only</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the type
        /// </summary>
        /// <value>The name of the type</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentType {\n");
            sb.Append("  Core: ").Append(Core).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentType);
        }

        /// <summary>
        /// Returns true if FulfillmentType instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Core == input.Core ||
                    (this.Core != null &&
                    this.Core.Equals(input.Core))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Core != null)
                    hashCode = hashCode * 59 + this.Core.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

    }

}
