/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// RevenueReportResource
    /// </summary>
    [DataContract]
    public partial class RevenueReportResource :  IEquatable<RevenueReportResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RevenueReportResource" /> class.
        /// </summary>
        /// <param name="CustomerCount">CustomerCount.</param>
        /// <param name="SaleCount">SaleCount.</param>
        /// <param name="SalesAverage">SalesAverage.</param>
        /// <param name="SalesTotal">SalesTotal.</param>
        public RevenueReportResource(long? CustomerCount = default(long?), long? SaleCount = default(long?), double? SalesAverage = default(double?), double? SalesTotal = default(double?))
        {
            this.CustomerCount = CustomerCount;
            this.SaleCount = SaleCount;
            this.SalesAverage = SalesAverage;
            this.SalesTotal = SalesTotal;
        }
        
        /// <summary>
        /// Gets or Sets CustomerCount
        /// </summary>
        [DataMember(Name="customer_count", EmitDefaultValue=false)]
        public long? CustomerCount { get; set; }
        /// <summary>
        /// Gets or Sets SaleCount
        /// </summary>
        [DataMember(Name="sale_count", EmitDefaultValue=false)]
        public long? SaleCount { get; set; }
        /// <summary>
        /// Gets or Sets SalesAverage
        /// </summary>
        [DataMember(Name="sales_average", EmitDefaultValue=false)]
        public double? SalesAverage { get; set; }
        /// <summary>
        /// Gets or Sets SalesTotal
        /// </summary>
        [DataMember(Name="sales_total", EmitDefaultValue=false)]
        public double? SalesTotal { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RevenueReportResource {\n");
            sb.Append("  CustomerCount: ").Append(CustomerCount).Append("\n");
            sb.Append("  SaleCount: ").Append(SaleCount).Append("\n");
            sb.Append("  SalesAverage: ").Append(SalesAverage).Append("\n");
            sb.Append("  SalesTotal: ").Append(SalesTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RevenueReportResource);
        }

        /// <summary>
        /// Returns true if RevenueReportResource instances are equal
        /// </summary>
        /// <param name="other">Instance of RevenueReportResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RevenueReportResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CustomerCount == other.CustomerCount ||
                    this.CustomerCount != null &&
                    this.CustomerCount.Equals(other.CustomerCount)
                ) && 
                (
                    this.SaleCount == other.SaleCount ||
                    this.SaleCount != null &&
                    this.SaleCount.Equals(other.SaleCount)
                ) && 
                (
                    this.SalesAverage == other.SalesAverage ||
                    this.SalesAverage != null &&
                    this.SalesAverage.Equals(other.SalesAverage)
                ) && 
                (
                    this.SalesTotal == other.SalesTotal ||
                    this.SalesTotal != null &&
                    this.SalesTotal.Equals(other.SalesTotal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CustomerCount != null)
                    hash = hash * 59 + this.CustomerCount.GetHashCode();
                if (this.SaleCount != null)
                    hash = hash * 59 + this.SaleCount.GetHashCode();
                if (this.SalesAverage != null)
                    hash = hash * 59 + this.SalesAverage.GetHashCode();
                if (this.SalesTotal != null)
                    hash = hash * 59 + this.SalesTotal.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
