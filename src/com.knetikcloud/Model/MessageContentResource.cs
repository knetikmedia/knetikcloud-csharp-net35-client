/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// MessageContentResource
    /// </summary>
    [DataContract]
    public partial class MessageContentResource :  IEquatable<MessageContentResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageContentResource" /> class.
        /// </summary>
        /// <param name="Email">The content of the email.</param>
        /// <param name="Push">The content of the mobile app push notification.</param>
        /// <param name="Sms">The content of the sms.</param>
        /// <param name="TemplatedEmail">The content of the templated email.</param>
        /// <param name="Websocket">The content of the websocket message.</param>
        public MessageContentResource(string Email = default(string), string Push = default(string), string Sms = default(string), TemplatedEmail TemplatedEmail = default(TemplatedEmail), Object Websocket = default(Object))
        {
            this.Email = Email;
            this.Push = Push;
            this.Sms = Sms;
            this.TemplatedEmail = TemplatedEmail;
            this.Websocket = Websocket;
        }
        
        /// <summary>
        /// The content of the email
        /// </summary>
        /// <value>The content of the email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The content of the mobile app push notification
        /// </summary>
        /// <value>The content of the mobile app push notification</value>
        [DataMember(Name="push", EmitDefaultValue=false)]
        public string Push { get; set; }

        /// <summary>
        /// The content of the sms
        /// </summary>
        /// <value>The content of the sms</value>
        [DataMember(Name="sms", EmitDefaultValue=false)]
        public string Sms { get; set; }

        /// <summary>
        /// The content of the templated email
        /// </summary>
        /// <value>The content of the templated email</value>
        [DataMember(Name="templated_email", EmitDefaultValue=false)]
        public TemplatedEmail TemplatedEmail { get; set; }

        /// <summary>
        /// The content of the websocket message
        /// </summary>
        /// <value>The content of the websocket message</value>
        [DataMember(Name="websocket", EmitDefaultValue=false)]
        public Object Websocket { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageContentResource {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Push: ").Append(Push).Append("\n");
            sb.Append("  Sms: ").Append(Sms).Append("\n");
            sb.Append("  TemplatedEmail: ").Append(TemplatedEmail).Append("\n");
            sb.Append("  Websocket: ").Append(Websocket).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageContentResource);
        }

        /// <summary>
        /// Returns true if MessageContentResource instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageContentResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageContentResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Push == input.Push ||
                    (this.Push != null &&
                    this.Push.Equals(input.Push))
                ) && 
                (
                    this.Sms == input.Sms ||
                    (this.Sms != null &&
                    this.Sms.Equals(input.Sms))
                ) && 
                (
                    this.TemplatedEmail == input.TemplatedEmail ||
                    (this.TemplatedEmail != null &&
                    this.TemplatedEmail.Equals(input.TemplatedEmail))
                ) && 
                (
                    this.Websocket == input.Websocket ||
                    (this.Websocket != null &&
                    this.Websocket.Equals(input.Websocket))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Push != null)
                    hashCode = hashCode * 59 + this.Push.GetHashCode();
                if (this.Sms != null)
                    hashCode = hashCode * 59 + this.Sms.GetHashCode();
                if (this.TemplatedEmail != null)
                    hashCode = hashCode * 59 + this.TemplatedEmail.GetHashCode();
                if (this.Websocket != null)
                    hashCode = hashCode * 59 + this.Websocket.GetHashCode();
                return hashCode;
            }
        }

    }

}
