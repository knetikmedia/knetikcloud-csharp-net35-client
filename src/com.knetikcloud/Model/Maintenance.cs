/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// Maintenance
    /// </summary>
    [DataContract]
    public partial class Maintenance :  IEquatable<Maintenance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Maintenance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Maintenance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Maintenance" /> class.
        /// </summary>
        /// <param name="AccessLocked">Whether access to the system has been locked (required).</param>
        /// <param name="Details">A simple object of any schema for client side use and processing.</param>
        /// <param name="Message">User displayable message about the maintenance (required).</param>
        public Maintenance(bool? AccessLocked = default(bool?), Object Details = default(Object), string Message = default(string))
        {
            // to ensure "AccessLocked" is required (not null)
            if (AccessLocked == null)
            {
                throw new InvalidDataException("AccessLocked is a required property for Maintenance and cannot be null");
            }
            else
            {
                this.AccessLocked = AccessLocked;
            }
            // to ensure "Message" is required (not null)
            if (Message == null)
            {
                throw new InvalidDataException("Message is a required property for Maintenance and cannot be null");
            }
            else
            {
                this.Message = Message;
            }
            this.Details = Details;
        }
        
        /// <summary>
        /// Whether access to the system has been locked
        /// </summary>
        /// <value>Whether access to the system has been locked</value>
        [DataMember(Name="access_locked", EmitDefaultValue=false)]
        public bool? AccessLocked { get; set; }
        /// <summary>
        /// A simple object of any schema for client side use and processing
        /// </summary>
        /// <value>A simple object of any schema for client side use and processing</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public Object Details { get; set; }
        /// <summary>
        /// User displayable message about the maintenance
        /// </summary>
        /// <value>User displayable message about the maintenance</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Maintenance {\n");
            sb.Append("  AccessLocked: ").Append(AccessLocked).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Maintenance);
        }

        /// <summary>
        /// Returns true if Maintenance instances are equal
        /// </summary>
        /// <param name="other">Instance of Maintenance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Maintenance other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccessLocked == other.AccessLocked ||
                    this.AccessLocked != null &&
                    this.AccessLocked.Equals(other.AccessLocked)
                ) && 
                (
                    this.Details == other.Details ||
                    this.Details != null &&
                    this.Details.Equals(other.Details)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccessLocked != null)
                    hash = hash * 59 + this.AccessLocked.GetHashCode();
                if (this.Details != null)
                    hash = hash * 59 + this.Details.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
