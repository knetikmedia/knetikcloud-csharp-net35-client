/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// ChallengeActivityResource
    /// </summary>
    [DataContract]
    public partial class ChallengeActivityResource :  IEquatable<ChallengeActivityResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChallengeActivityResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChallengeActivityResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChallengeActivityResource" /> class.
        /// </summary>
        /// <param name="ActivityId">The id of the activity (required).</param>
        /// <param name="AdditionalProperties">A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type.</param>
        /// <param name="ChallengeId">The id of the challenge.</param>
        /// <param name="Entitlement">The entitlement item needed to participate in the activity as part of this event. Null indicates free entry. When creating/updating only id is used. Item must be pre-existing.</param>
        /// <param name="RewardSet">The rewards to give at the end of each occurence of the activity. When creating/updating only id is used. Reward set must be pre-existing.</param>
        /// <param name="Settings">The list of settings and the select options.</param>
        /// <param name="Template">A challenge activity template this challenge activity is validated against (private). May be null and no validation of additional_properties will be done.</param>
        public ChallengeActivityResource(long? ActivityId = default(long?), Dictionary<string, Property> AdditionalProperties = default(Dictionary<string, Property>), long? ChallengeId = default(long?), ActivityEntitlementResource Entitlement = default(ActivityEntitlementResource), RewardSetResource RewardSet = default(RewardSetResource), List<SelectedSettingResource> Settings = default(List<SelectedSettingResource>), string Template = default(string))
        {
            // to ensure "ActivityId" is required (not null)
            if (ActivityId == null)
            {
                throw new InvalidDataException("ActivityId is a required property for ChallengeActivityResource and cannot be null");
            }
            else
            {
                this.ActivityId = ActivityId;
            }
            this.AdditionalProperties = AdditionalProperties;
            this.ChallengeId = ChallengeId;
            this.Entitlement = Entitlement;
            this.RewardSet = RewardSet;
            this.Settings = Settings;
            this.Template = Template;
        }
        
        /// <summary>
        /// The id of the activity
        /// </summary>
        /// <value>The id of the activity</value>
        [DataMember(Name="activity_id", EmitDefaultValue=false)]
        public long? ActivityId { get; set; }

        /// <summary>
        /// A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type
        /// </summary>
        /// <value>A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type</value>
        [DataMember(Name="additional_properties", EmitDefaultValue=false)]
        public Dictionary<string, Property> AdditionalProperties { get; set; }

        /// <summary>
        /// The id of the challenge
        /// </summary>
        /// <value>The id of the challenge</value>
        [DataMember(Name="challenge_id", EmitDefaultValue=false)]
        public long? ChallengeId { get; set; }

        /// <summary>
        /// The entitlement item needed to participate in the activity as part of this event. Null indicates free entry. When creating/updating only id is used. Item must be pre-existing
        /// </summary>
        /// <value>The entitlement item needed to participate in the activity as part of this event. Null indicates free entry. When creating/updating only id is used. Item must be pre-existing</value>
        [DataMember(Name="entitlement", EmitDefaultValue=false)]
        public ActivityEntitlementResource Entitlement { get; set; }

        /// <summary>
        /// The unique ID for this resource
        /// </summary>
        /// <value>The unique ID for this resource</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; private set; }

        /// <summary>
        /// The rewards to give at the end of each occurence of the activity. When creating/updating only id is used. Reward set must be pre-existing
        /// </summary>
        /// <value>The rewards to give at the end of each occurence of the activity. When creating/updating only id is used. Reward set must be pre-existing</value>
        [DataMember(Name="reward_set", EmitDefaultValue=false)]
        public RewardSetResource RewardSet { get; set; }

        /// <summary>
        /// The list of settings and the select options
        /// </summary>
        /// <value>The list of settings and the select options</value>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public List<SelectedSettingResource> Settings { get; set; }

        /// <summary>
        /// A challenge activity template this challenge activity is validated against (private). May be null and no validation of additional_properties will be done
        /// </summary>
        /// <value>A challenge activity template this challenge activity is validated against (private). May be null and no validation of additional_properties will be done</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public string Template { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChallengeActivityResource {\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("  ChallengeId: ").Append(ChallengeId).Append("\n");
            sb.Append("  Entitlement: ").Append(Entitlement).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RewardSet: ").Append(RewardSet).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChallengeActivityResource);
        }

        /// <summary>
        /// Returns true if ChallengeActivityResource instances are equal
        /// </summary>
        /// <param name="input">Instance of ChallengeActivityResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChallengeActivityResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivityId == input.ActivityId ||
                    (this.ActivityId != null &&
                    this.ActivityId.Equals(input.ActivityId))
                ) && 
                (
                    this.AdditionalProperties == input.AdditionalProperties ||
                    (this.AdditionalProperties != null &&
                    this.AdditionalProperties.SequenceEqual(input.AdditionalProperties))
                ) && 
                (
                    this.ChallengeId == input.ChallengeId ||
                    (this.ChallengeId != null &&
                    this.ChallengeId.Equals(input.ChallengeId))
                ) && 
                (
                    this.Entitlement == input.Entitlement ||
                    (this.Entitlement != null &&
                    this.Entitlement.Equals(input.Entitlement))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RewardSet == input.RewardSet ||
                    (this.RewardSet != null &&
                    this.RewardSet.Equals(input.RewardSet))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.SequenceEqual(input.Settings))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivityId != null)
                    hashCode = hashCode * 59 + this.ActivityId.GetHashCode();
                if (this.AdditionalProperties != null)
                    hashCode = hashCode * 59 + this.AdditionalProperties.GetHashCode();
                if (this.ChallengeId != null)
                    hashCode = hashCode * 59 + this.ChallengeId.GetHashCode();
                if (this.Entitlement != null)
                    hashCode = hashCode * 59 + this.Entitlement.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RewardSet != null)
                    hashCode = hashCode * 59 + this.RewardSet.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                return hashCode;
            }
        }

    }

}
