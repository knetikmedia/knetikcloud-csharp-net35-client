/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// Artist
    /// </summary>
    [DataContract]
    public partial class Artist :  IEquatable<Artist>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Artist" /> class.
        /// </summary>
        /// <param name="AdditionalProperties">AdditionalProperties.</param>
        /// <param name="Born">Born.</param>
        /// <param name="ContributionCount">ContributionCount.</param>
        /// <param name="Created">Created.</param>
        /// <param name="Died">Died.</param>
        /// <param name="Id">Id.</param>
        /// <param name="LongDescription">LongDescription.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Priority">Priority.</param>
        /// <param name="PropertiesString">PropertiesString.</param>
        /// <param name="ShortDescription">ShortDescription.</param>
        /// <param name="Template">Template.</param>
        /// <param name="Updated">Updated.</param>
        public Artist(Dictionary<string, Property> AdditionalProperties = default(Dictionary<string, Property>), long? Born = default(long?), int? ContributionCount = default(int?), long? Created = default(long?), long? Died = default(long?), long? Id = default(long?), string LongDescription = default(string), string Name = default(string), int? Priority = default(int?), string PropertiesString = default(string), string ShortDescription = default(string), string Template = default(string), long? Updated = default(long?))
        {
            this.AdditionalProperties = AdditionalProperties;
            this.Born = Born;
            this.ContributionCount = ContributionCount;
            this.Created = Created;
            this.Died = Died;
            this.Id = Id;
            this.LongDescription = LongDescription;
            this.Name = Name;
            this.Priority = Priority;
            this.PropertiesString = PropertiesString;
            this.ShortDescription = ShortDescription;
            this.Template = Template;
            this.Updated = Updated;
        }
        
        /// <summary>
        /// Gets or Sets AdditionalProperties
        /// </summary>
        [DataMember(Name="additional_properties", EmitDefaultValue=false)]
        public Dictionary<string, Property> AdditionalProperties { get; set; }
        /// <summary>
        /// Gets or Sets Born
        /// </summary>
        [DataMember(Name="born", EmitDefaultValue=false)]
        public long? Born { get; set; }
        /// <summary>
        /// Gets or Sets ContributionCount
        /// </summary>
        [DataMember(Name="contribution_count", EmitDefaultValue=false)]
        public int? ContributionCount { get; set; }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public long? Created { get; set; }
        /// <summary>
        /// Gets or Sets Died
        /// </summary>
        [DataMember(Name="died", EmitDefaultValue=false)]
        public long? Died { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets LongDescription
        /// </summary>
        [DataMember(Name="long_description", EmitDefaultValue=false)]
        public string LongDescription { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }
        /// <summary>
        /// Gets or Sets PropertiesString
        /// </summary>
        [DataMember(Name="properties_string", EmitDefaultValue=false)]
        public string PropertiesString { get; set; }
        /// <summary>
        /// Gets or Sets ShortDescription
        /// </summary>
        [DataMember(Name="short_description", EmitDefaultValue=false)]
        public string ShortDescription { get; set; }
        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public string Template { get; set; }
        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public long? Updated { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Artist {\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("  Born: ").Append(Born).Append("\n");
            sb.Append("  ContributionCount: ").Append(ContributionCount).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Died: ").Append(Died).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LongDescription: ").Append(LongDescription).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  PropertiesString: ").Append(PropertiesString).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Artist);
        }

        /// <summary>
        /// Returns true if Artist instances are equal
        /// </summary>
        /// <param name="other">Instance of Artist to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Artist other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AdditionalProperties == other.AdditionalProperties ||
                    this.AdditionalProperties != null &&
                    this.AdditionalProperties.SequenceEqual(other.AdditionalProperties)
                ) && 
                (
                    this.Born == other.Born ||
                    this.Born != null &&
                    this.Born.Equals(other.Born)
                ) && 
                (
                    this.ContributionCount == other.ContributionCount ||
                    this.ContributionCount != null &&
                    this.ContributionCount.Equals(other.ContributionCount)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Died == other.Died ||
                    this.Died != null &&
                    this.Died.Equals(other.Died)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.LongDescription == other.LongDescription ||
                    this.LongDescription != null &&
                    this.LongDescription.Equals(other.LongDescription)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Priority == other.Priority ||
                    this.Priority != null &&
                    this.Priority.Equals(other.Priority)
                ) && 
                (
                    this.PropertiesString == other.PropertiesString ||
                    this.PropertiesString != null &&
                    this.PropertiesString.Equals(other.PropertiesString)
                ) && 
                (
                    this.ShortDescription == other.ShortDescription ||
                    this.ShortDescription != null &&
                    this.ShortDescription.Equals(other.ShortDescription)
                ) && 
                (
                    this.Template == other.Template ||
                    this.Template != null &&
                    this.Template.Equals(other.Template)
                ) && 
                (
                    this.Updated == other.Updated ||
                    this.Updated != null &&
                    this.Updated.Equals(other.Updated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AdditionalProperties != null)
                    hash = hash * 59 + this.AdditionalProperties.GetHashCode();
                if (this.Born != null)
                    hash = hash * 59 + this.Born.GetHashCode();
                if (this.ContributionCount != null)
                    hash = hash * 59 + this.ContributionCount.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Died != null)
                    hash = hash * 59 + this.Died.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.LongDescription != null)
                    hash = hash * 59 + this.LongDescription.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Priority != null)
                    hash = hash * 59 + this.Priority.GetHashCode();
                if (this.PropertiesString != null)
                    hash = hash * 59 + this.PropertiesString.GetHashCode();
                if (this.ShortDescription != null)
                    hash = hash * 59 + this.ShortDescription.GetHashCode();
                if (this.Template != null)
                    hash = hash * 59 + this.Template.GetHashCode();
                if (this.Updated != null)
                    hash = hash * 59 + this.Updated.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
