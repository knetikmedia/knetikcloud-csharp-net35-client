/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// ClientResource
    /// </summary>
    [DataContract]
    public partial class ClientResource :  IEquatable<ClientResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClientResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientResource" /> class.
        /// </summary>
        /// <param name="AccessTokenValiditySeconds">The expiration time of an initial oauth token in seconds.</param>
        /// <param name="ClientKey">The client_id field of the oauth token request (required).</param>
        /// <param name="GrantTypes">The oauth grant type as in: password (username/password auth), client_credentials (server-to-server, private clients), refresh_token (to allow clients to refresh their initial token), facebook, google, etc) See documentation for a complete list. use dedicated endpoint PUT /grant-types to edit this list.</param>
        /// <param name="IsPublic">Set to true if the client is public i.e the secret key can be secured.</param>
        /// <param name="Locked">Used to flag system clients that are not meant to be tinkered with.</param>
        /// <param name="Name">The friendly name of the client (required).</param>
        /// <param name="RedirectUris">A redirection URL to use when granting access to third-parties (seldomly used).</param>
        /// <param name="RefreshTokenValiditySeconds">The expiration time of a refresh oauth token in seconds.</param>
        /// <param name="Secret">The client-secret field of the oauth request when creating a private client (required).</param>
        public ClientResource(int? AccessTokenValiditySeconds = default(int?), string ClientKey = default(string), List<string> GrantTypes = default(List<string>), bool? IsPublic = default(bool?), bool? Locked = default(bool?), string Name = default(string), List<string> RedirectUris = default(List<string>), int? RefreshTokenValiditySeconds = default(int?), string Secret = default(string))
        {
            // to ensure "ClientKey" is required (not null)
            if (ClientKey == null)
            {
                throw new InvalidDataException("ClientKey is a required property for ClientResource and cannot be null");
            }
            else
            {
                this.ClientKey = ClientKey;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ClientResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Secret" is required (not null)
            if (Secret == null)
            {
                throw new InvalidDataException("Secret is a required property for ClientResource and cannot be null");
            }
            else
            {
                this.Secret = Secret;
            }
            this.AccessTokenValiditySeconds = AccessTokenValiditySeconds;
            this.GrantTypes = GrantTypes;
            this.IsPublic = IsPublic;
            this.Locked = Locked;
            this.RedirectUris = RedirectUris;
            this.RefreshTokenValiditySeconds = RefreshTokenValiditySeconds;
        }
        
        /// <summary>
        /// The expiration time of an initial oauth token in seconds
        /// </summary>
        /// <value>The expiration time of an initial oauth token in seconds</value>
        [DataMember(Name="access_token_validity_seconds", EmitDefaultValue=false)]
        public int? AccessTokenValiditySeconds { get; set; }
        /// <summary>
        /// The client_id field of the oauth token request
        /// </summary>
        /// <value>The client_id field of the oauth token request</value>
        [DataMember(Name="client_key", EmitDefaultValue=false)]
        public string ClientKey { get; set; }
        /// <summary>
        /// The oauth grant type as in: password (username/password auth), client_credentials (server-to-server, private clients), refresh_token (to allow clients to refresh their initial token), facebook, google, etc) See documentation for a complete list. use dedicated endpoint PUT /grant-types to edit this list
        /// </summary>
        /// <value>The oauth grant type as in: password (username/password auth), client_credentials (server-to-server, private clients), refresh_token (to allow clients to refresh their initial token), facebook, google, etc) See documentation for a complete list. use dedicated endpoint PUT /grant-types to edit this list</value>
        [DataMember(Name="grant_types", EmitDefaultValue=false)]
        public List<string> GrantTypes { get; set; }
        /// <summary>
        /// Generated unique ID for the client
        /// </summary>
        /// <value>Generated unique ID for the client</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }
        /// <summary>
        /// Set to true if the client is public i.e the secret key can be secured
        /// </summary>
        /// <value>Set to true if the client is public i.e the secret key can be secured</value>
        [DataMember(Name="is_public", EmitDefaultValue=false)]
        public bool? IsPublic { get; set; }
        /// <summary>
        /// Used to flag system clients that are not meant to be tinkered with
        /// </summary>
        /// <value>Used to flag system clients that are not meant to be tinkered with</value>
        [DataMember(Name="locked", EmitDefaultValue=false)]
        public bool? Locked { get; set; }
        /// <summary>
        /// The friendly name of the client
        /// </summary>
        /// <value>The friendly name of the client</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// A redirection URL to use when granting access to third-parties (seldomly used)
        /// </summary>
        /// <value>A redirection URL to use when granting access to third-parties (seldomly used)</value>
        [DataMember(Name="redirect_uris", EmitDefaultValue=false)]
        public List<string> RedirectUris { get; set; }
        /// <summary>
        /// The expiration time of a refresh oauth token in seconds
        /// </summary>
        /// <value>The expiration time of a refresh oauth token in seconds</value>
        [DataMember(Name="refresh_token_validity_seconds", EmitDefaultValue=false)]
        public int? RefreshTokenValiditySeconds { get; set; }
        /// <summary>
        /// The client-secret field of the oauth request when creating a private client
        /// </summary>
        /// <value>The client-secret field of the oauth request when creating a private client</value>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public string Secret { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientResource {\n");
            sb.Append("  AccessTokenValiditySeconds: ").Append(AccessTokenValiditySeconds).Append("\n");
            sb.Append("  ClientKey: ").Append(ClientKey).Append("\n");
            sb.Append("  GrantTypes: ").Append(GrantTypes).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RedirectUris: ").Append(RedirectUris).Append("\n");
            sb.Append("  RefreshTokenValiditySeconds: ").Append(RefreshTokenValiditySeconds).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClientResource);
        }

        /// <summary>
        /// Returns true if ClientResource instances are equal
        /// </summary>
        /// <param name="other">Instance of ClientResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccessTokenValiditySeconds == other.AccessTokenValiditySeconds ||
                    this.AccessTokenValiditySeconds != null &&
                    this.AccessTokenValiditySeconds.Equals(other.AccessTokenValiditySeconds)
                ) && 
                (
                    this.ClientKey == other.ClientKey ||
                    this.ClientKey != null &&
                    this.ClientKey.Equals(other.ClientKey)
                ) && 
                (
                    this.GrantTypes == other.GrantTypes ||
                    this.GrantTypes != null &&
                    this.GrantTypes.SequenceEqual(other.GrantTypes)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IsPublic == other.IsPublic ||
                    this.IsPublic != null &&
                    this.IsPublic.Equals(other.IsPublic)
                ) && 
                (
                    this.Locked == other.Locked ||
                    this.Locked != null &&
                    this.Locked.Equals(other.Locked)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.RedirectUris == other.RedirectUris ||
                    this.RedirectUris != null &&
                    this.RedirectUris.SequenceEqual(other.RedirectUris)
                ) && 
                (
                    this.RefreshTokenValiditySeconds == other.RefreshTokenValiditySeconds ||
                    this.RefreshTokenValiditySeconds != null &&
                    this.RefreshTokenValiditySeconds.Equals(other.RefreshTokenValiditySeconds)
                ) && 
                (
                    this.Secret == other.Secret ||
                    this.Secret != null &&
                    this.Secret.Equals(other.Secret)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccessTokenValiditySeconds != null)
                    hash = hash * 59 + this.AccessTokenValiditySeconds.GetHashCode();
                if (this.ClientKey != null)
                    hash = hash * 59 + this.ClientKey.GetHashCode();
                if (this.GrantTypes != null)
                    hash = hash * 59 + this.GrantTypes.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IsPublic != null)
                    hash = hash * 59 + this.IsPublic.GetHashCode();
                if (this.Locked != null)
                    hash = hash * 59 + this.Locked.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.RedirectUris != null)
                    hash = hash * 59 + this.RedirectUris.GetHashCode();
                if (this.RefreshTokenValiditySeconds != null)
                    hash = hash * 59 + this.RefreshTokenValiditySeconds.GetHashCode();
                if (this.Secret != null)
                    hash = hash * 59 + this.Secret.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
