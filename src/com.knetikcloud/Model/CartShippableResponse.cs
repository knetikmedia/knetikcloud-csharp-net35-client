/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// CartShippableResponse
    /// </summary>
    [DataContract]
    public partial class CartShippableResponse :  IEquatable<CartShippableResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartShippableResponse" /> class.
        /// </summary>
        /// <param name="CartId">The id of the cart.</param>
        /// <param name="Shippable">Whether the item is shippable.</param>
        public CartShippableResponse(int? CartId = default(int?), bool? Shippable = default(bool?))
        {
            this.CartId = CartId;
            this.Shippable = Shippable;
        }
        
        /// <summary>
        /// The id of the cart
        /// </summary>
        /// <value>The id of the cart</value>
        [DataMember(Name="cart_id", EmitDefaultValue=false)]
        public int? CartId { get; set; }
        /// <summary>
        /// Whether the item is shippable
        /// </summary>
        /// <value>Whether the item is shippable</value>
        [DataMember(Name="shippable", EmitDefaultValue=false)]
        public bool? Shippable { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartShippableResponse {\n");
            sb.Append("  CartId: ").Append(CartId).Append("\n");
            sb.Append("  Shippable: ").Append(Shippable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CartShippableResponse);
        }

        /// <summary>
        /// Returns true if CartShippableResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of CartShippableResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartShippableResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CartId == other.CartId ||
                    this.CartId != null &&
                    this.CartId.Equals(other.CartId)
                ) && 
                (
                    this.Shippable == other.Shippable ||
                    this.Shippable != null &&
                    this.Shippable.Equals(other.Shippable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CartId != null)
                    hash = hash * 59 + this.CartId.GetHashCode();
                if (this.Shippable != null)
                    hash = hash * 59 + this.Shippable.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
