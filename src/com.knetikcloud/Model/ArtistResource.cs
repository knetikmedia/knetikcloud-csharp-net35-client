/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// ArtistResource
    /// </summary>
    [DataContract]
    public partial class ArtistResource :  IEquatable<ArtistResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArtistResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ArtistResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArtistResource" /> class.
        /// </summary>
        /// <param name="AdditionalProperties">A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type.</param>
        /// <param name="Born">YYYY/MM/DD when this artist was born.</param>
        /// <param name="Contributions">The list of media this artist has contributed to as well as role(s) during contribution.  Use media endpoint to add contributions.</param>
        /// <param name="Died">YYYY/MM/DD when this artist died.</param>
        /// <param name="LongDescription">The user friendly name of that resource. Defaults to blank string.</param>
        /// <param name="Name">The user friendly name of that resource (required).</param>
        /// <param name="Priority">The sort order priority ofr the artist.  Default 100.</param>
        /// <param name="ShortDescription">The user friendly name of that resource. Defaults to blank string.</param>
        /// <param name="Template">An artist template this artist is validated against (private). May be null and no validation of additional_properties will be done.</param>
        public ArtistResource(Dictionary<string, Property> AdditionalProperties = default(Dictionary<string, Property>), string Born = default(string), List<ContributionResource> Contributions = default(List<ContributionResource>), string Died = default(string), string LongDescription = default(string), string Name = default(string), int? Priority = default(int?), string ShortDescription = default(string), string Template = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ArtistResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.AdditionalProperties = AdditionalProperties;
            this.Born = Born;
            this.Contributions = Contributions;
            this.Died = Died;
            this.LongDescription = LongDescription;
            this.Priority = Priority;
            this.ShortDescription = ShortDescription;
            this.Template = Template;
        }
        
        /// <summary>
        /// A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type
        /// </summary>
        /// <value>A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type</value>
        [DataMember(Name="additional_properties", EmitDefaultValue=false)]
        public Dictionary<string, Property> AdditionalProperties { get; set; }

        /// <summary>
        /// YYYY/MM/DD when this artist was born
        /// </summary>
        /// <value>YYYY/MM/DD when this artist was born</value>
        [DataMember(Name="born", EmitDefaultValue=false)]
        public string Born { get; set; }

        /// <summary>
        /// The current number of contributions the artist has made
        /// </summary>
        /// <value>The current number of contributions the artist has made</value>
        [DataMember(Name="contribution_count", EmitDefaultValue=false)]
        public int? ContributionCount { get; private set; }

        /// <summary>
        /// The list of media this artist has contributed to as well as role(s) during contribution.  Use media endpoint to add contributions
        /// </summary>
        /// <value>The list of media this artist has contributed to as well as role(s) during contribution.  Use media endpoint to add contributions</value>
        [DataMember(Name="contributions", EmitDefaultValue=false)]
        public List<ContributionResource> Contributions { get; set; }

        /// <summary>
        /// The date/time this resource was created in seconds since unix epoch
        /// </summary>
        /// <value>The date/time this resource was created in seconds since unix epoch</value>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public long? CreatedDate { get; private set; }

        /// <summary>
        /// YYYY/MM/DD when this artist died
        /// </summary>
        /// <value>YYYY/MM/DD when this artist died</value>
        [DataMember(Name="died", EmitDefaultValue=false)]
        public string Died { get; set; }

        /// <summary>
        /// The unique ID for that resource
        /// </summary>
        /// <value>The unique ID for that resource</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; private set; }

        /// <summary>
        /// The user friendly name of that resource. Defaults to blank string
        /// </summary>
        /// <value>The user friendly name of that resource. Defaults to blank string</value>
        [DataMember(Name="long_description", EmitDefaultValue=false)]
        public string LongDescription { get; set; }

        /// <summary>
        /// The user friendly name of that resource
        /// </summary>
        /// <value>The user friendly name of that resource</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The sort order priority ofr the artist.  Default 100
        /// </summary>
        /// <value>The sort order priority ofr the artist.  Default 100</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// The user friendly name of that resource. Defaults to blank string
        /// </summary>
        /// <value>The user friendly name of that resource. Defaults to blank string</value>
        [DataMember(Name="short_description", EmitDefaultValue=false)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// An artist template this artist is validated against (private). May be null and no validation of additional_properties will be done
        /// </summary>
        /// <value>An artist template this artist is validated against (private). May be null and no validation of additional_properties will be done</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public string Template { get; set; }

        /// <summary>
        /// The date/time this resource was last updated in seconds since unix epoch
        /// </summary>
        /// <value>The date/time this resource was last updated in seconds since unix epoch</value>
        [DataMember(Name="updated_date", EmitDefaultValue=false)]
        public long? UpdatedDate { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArtistResource {\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("  Born: ").Append(Born).Append("\n");
            sb.Append("  ContributionCount: ").Append(ContributionCount).Append("\n");
            sb.Append("  Contributions: ").Append(Contributions).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Died: ").Append(Died).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LongDescription: ").Append(LongDescription).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArtistResource);
        }

        /// <summary>
        /// Returns true if ArtistResource instances are equal
        /// </summary>
        /// <param name="input">Instance of ArtistResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArtistResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalProperties == input.AdditionalProperties ||
                    (this.AdditionalProperties != null &&
                    this.AdditionalProperties.SequenceEqual(input.AdditionalProperties))
                ) && 
                (
                    this.Born == input.Born ||
                    (this.Born != null &&
                    this.Born.Equals(input.Born))
                ) && 
                (
                    this.ContributionCount == input.ContributionCount ||
                    (this.ContributionCount != null &&
                    this.ContributionCount.Equals(input.ContributionCount))
                ) && 
                (
                    this.Contributions == input.Contributions ||
                    (this.Contributions != null &&
                    this.Contributions.SequenceEqual(input.Contributions))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.Died == input.Died ||
                    (this.Died != null &&
                    this.Died.Equals(input.Died))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LongDescription == input.LongDescription ||
                    (this.LongDescription != null &&
                    this.LongDescription.Equals(input.LongDescription))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.ShortDescription == input.ShortDescription ||
                    (this.ShortDescription != null &&
                    this.ShortDescription.Equals(input.ShortDescription))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalProperties != null)
                    hashCode = hashCode * 59 + this.AdditionalProperties.GetHashCode();
                if (this.Born != null)
                    hashCode = hashCode * 59 + this.Born.GetHashCode();
                if (this.ContributionCount != null)
                    hashCode = hashCode * 59 + this.ContributionCount.GetHashCode();
                if (this.Contributions != null)
                    hashCode = hashCode * 59 + this.Contributions.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.Died != null)
                    hashCode = hashCode * 59 + this.Died.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LongDescription != null)
                    hashCode = hashCode * 59 + this.LongDescription.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.ShortDescription != null)
                    hashCode = hashCode * 59 + this.ShortDescription.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.UpdatedDate != null)
                    hashCode = hashCode * 59 + this.UpdatedDate.GetHashCode();
                return hashCode;
            }
        }

    }

}
