/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// ActionResource
    /// </summary>
    [DataContract]
    public partial class ActionResource :  IEquatable<ActionResource>, IValidatableObject
    {
        /// <summary>
        /// The category the action is in. All customer specific actions are in the 'custom' category
        /// </summary>
        /// <value>The category the action is in. All customer specific actions are in the 'custom' category</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            
            /// <summary>
            /// Enum Achievement for "achievement"
            /// </summary>
            [EnumMember(Value = "achievement")]
            Achievement,
            
            /// <summary>
            /// Enum Behavior for "behavior"
            /// </summary>
            [EnumMember(Value = "behavior")]
            Behavior,
            
            /// <summary>
            /// Enum Comment for "comment"
            /// </summary>
            [EnumMember(Value = "comment")]
            Comment,
            
            /// <summary>
            /// Enum Disposition for "disposition"
            /// </summary>
            [EnumMember(Value = "disposition")]
            Disposition,
            
            /// <summary>
            /// Enum Device for "device"
            /// </summary>
            [EnumMember(Value = "device")]
            Device,
            
            /// <summary>
            /// Enum Entitlement for "entitlement"
            /// </summary>
            [EnumMember(Value = "entitlement")]
            Entitlement,
            
            /// <summary>
            /// Enum Friends for "friends"
            /// </summary>
            [EnumMember(Value = "friends")]
            Friends,
            
            /// <summary>
            /// Enum Fulfillment for "fulfillment"
            /// </summary>
            [EnumMember(Value = "fulfillment")]
            Fulfillment,
            
            /// <summary>
            /// Enum Gamification for "gamification"
            /// </summary>
            [EnumMember(Value = "gamification")]
            Gamification,
            
            /// <summary>
            /// Enum Inventory for "inventory"
            /// </summary>
            [EnumMember(Value = "inventory")]
            Inventory,
            
            /// <summary>
            /// Enum Invoice for "invoice"
            /// </summary>
            [EnumMember(Value = "invoice")]
            Invoice,
            
            /// <summary>
            /// Enum Media for "media"
            /// </summary>
            [EnumMember(Value = "media")]
            Media,
            
            /// <summary>
            /// Enum Scheduler for "scheduler"
            /// </summary>
            [EnumMember(Value = "scheduler")]
            Scheduler,
            
            /// <summary>
            /// Enum Store for "store"
            /// </summary>
            [EnumMember(Value = "store")]
            Store,
            
            /// <summary>
            /// Enum Subscription for "subscription"
            /// </summary>
            [EnumMember(Value = "subscription")]
            Subscription,
            
            /// <summary>
            /// Enum User for "user"
            /// </summary>
            [EnumMember(Value = "user")]
            User,
            
            /// <summary>
            /// Enum Wallet for "wallet"
            /// </summary>
            [EnumMember(Value = "wallet")]
            Wallet,
            
            /// <summary>
            /// Enum Custom for "custom"
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom,
            
            /// <summary>
            /// Enum Challenge for "challenge"
            /// </summary>
            [EnumMember(Value = "challenge")]
            Challenge,
            
            /// <summary>
            /// Enum Activity for "activity"
            /// </summary>
            [EnumMember(Value = "activity")]
            Activity,
            
            /// <summary>
            /// Enum Campaign for "campaign"
            /// </summary>
            [EnumMember(Value = "campaign")]
            Campaign,
            
            /// <summary>
            /// Enum Event for "event"
            /// </summary>
            [EnumMember(Value = "event")]
            Event
        }

        /// <summary>
        /// The category the action is in. All customer specific actions are in the 'custom' category
        /// </summary>
        /// <value>The category the action is in. All customer specific actions are in the 'custom' category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActionResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionResource" /> class.
        /// </summary>
        /// <param name="Category">The category the action is in. All customer specific actions are in the &#39;custom&#39; category.</param>
        /// <param name="Description">The description of the action (required).</param>
        /// <param name="Name">The name of the action. Used as the unique id for reference (required).</param>
        /// <param name="Variables">The variables required for the action (required).</param>
        public ActionResource(CategoryEnum? Category = default(CategoryEnum?), string Description = default(string), string Name = default(string), List<ActionVariableResource> Variables = default(List<ActionVariableResource>))
        {
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for ActionResource and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ActionResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Variables" is required (not null)
            if (Variables == null)
            {
                throw new InvalidDataException("Variables is a required property for ActionResource and cannot be null");
            }
            else
            {
                this.Variables = Variables;
            }
            this.Category = Category;
        }
        
        /// <summary>
        /// The description of the action
        /// </summary>
        /// <value>The description of the action</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// The name of the action. Used as the unique id for reference
        /// </summary>
        /// <value>The name of the action. Used as the unique id for reference</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The variables required for the action
        /// </summary>
        /// <value>The variables required for the action</value>
        [DataMember(Name="variables", EmitDefaultValue=false)]
        public List<ActionVariableResource> Variables { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActionResource {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ActionResource);
        }

        /// <summary>
        /// Returns true if ActionResource instances are equal
        /// </summary>
        /// <param name="other">Instance of ActionResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Variables == other.Variables ||
                    this.Variables != null &&
                    this.Variables.SequenceEqual(other.Variables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Variables != null)
                    hash = hash * 59 + this.Variables.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
