/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// SqlDatabaseConfig
    /// </summary>
    [DataContract]
    public partial class SqlDatabaseConfig :  IEquatable<SqlDatabaseConfig>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SqlDatabaseConfig" /> class.
        /// </summary>
        /// <param name="ConnectionPoolSize">ConnectionPoolSize.</param>
        /// <param name="DbName">DbName.</param>
        /// <param name="Hostname">Hostname.</param>
        /// <param name="Password">Password.</param>
        /// <param name="Port">Port.</param>
        /// <param name="Username">Username.</param>
        public SqlDatabaseConfig(int? ConnectionPoolSize = default(int?), string DbName = default(string), string Hostname = default(string), string Password = default(string), int? Port = default(int?), string Username = default(string))
        {
            this.ConnectionPoolSize = ConnectionPoolSize;
            this.DbName = DbName;
            this.Hostname = Hostname;
            this.Password = Password;
            this.Port = Port;
            this.Username = Username;
        }
        
        /// <summary>
        /// Gets or Sets ConnectionPoolSize
        /// </summary>
        [DataMember(Name="connection_pool_size", EmitDefaultValue=false)]
        public int? ConnectionPoolSize { get; set; }

        /// <summary>
        /// Gets or Sets DbName
        /// </summary>
        [DataMember(Name="db_name", EmitDefaultValue=false)]
        public string DbName { get; set; }

        /// <summary>
        /// Gets or Sets Hostname
        /// </summary>
        [DataMember(Name="hostname", EmitDefaultValue=false)]
        public string Hostname { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SqlDatabaseConfig {\n");
            sb.Append("  ConnectionPoolSize: ").Append(ConnectionPoolSize).Append("\n");
            sb.Append("  DbName: ").Append(DbName).Append("\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SqlDatabaseConfig);
        }

        /// <summary>
        /// Returns true if SqlDatabaseConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of SqlDatabaseConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SqlDatabaseConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConnectionPoolSize == input.ConnectionPoolSize ||
                    (this.ConnectionPoolSize != null &&
                    this.ConnectionPoolSize.Equals(input.ConnectionPoolSize))
                ) && 
                (
                    this.DbName == input.DbName ||
                    (this.DbName != null &&
                    this.DbName.Equals(input.DbName))
                ) && 
                (
                    this.Hostname == input.Hostname ||
                    (this.Hostname != null &&
                    this.Hostname.Equals(input.Hostname))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectionPoolSize != null)
                    hashCode = hashCode * 59 + this.ConnectionPoolSize.GetHashCode();
                if (this.DbName != null)
                    hashCode = hashCode * 59 + this.DbName.GetHashCode();
                if (this.Hostname != null)
                    hashCode = hashCode * 59 + this.Hostname.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

    }

}
