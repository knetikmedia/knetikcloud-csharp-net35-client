/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// ContributionResource
    /// </summary>
    [DataContract]
    public partial class ContributionResource :  IEquatable<ContributionResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContributionResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContributionResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContributionResource" /> class.
        /// </summary>
        /// <param name="Artist">A reference to the contributing artist (required).</param>
        /// <param name="Media">A reference to the media being contributed to (required).</param>
        /// <param name="Role">The nature of the contribution (role of the artist as in &#39;producer&#39;, &#39;performer&#39;, etc) (required).</param>
        public ContributionResource(SimpleReferenceResourcelong Artist = default(SimpleReferenceResourcelong), SimpleReferenceResourcelong Media = default(SimpleReferenceResourcelong), string Role = default(string))
        {
            // to ensure "Artist" is required (not null)
            if (Artist == null)
            {
                throw new InvalidDataException("Artist is a required property for ContributionResource and cannot be null");
            }
            else
            {
                this.Artist = Artist;
            }
            // to ensure "Media" is required (not null)
            if (Media == null)
            {
                throw new InvalidDataException("Media is a required property for ContributionResource and cannot be null");
            }
            else
            {
                this.Media = Media;
            }
            // to ensure "Role" is required (not null)
            if (Role == null)
            {
                throw new InvalidDataException("Role is a required property for ContributionResource and cannot be null");
            }
            else
            {
                this.Role = Role;
            }
        }
        
        /// <summary>
        /// A reference to the contributing artist
        /// </summary>
        /// <value>A reference to the contributing artist</value>
        [DataMember(Name="artist", EmitDefaultValue=false)]
        public SimpleReferenceResourcelong Artist { get; set; }

        /// <summary>
        /// A reference to the media being contributed to
        /// </summary>
        /// <value>A reference to the media being contributed to</value>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public SimpleReferenceResourcelong Media { get; set; }

        /// <summary>
        /// The nature of the contribution (role of the artist as in &#39;producer&#39;, &#39;performer&#39;, etc)
        /// </summary>
        /// <value>The nature of the contribution (role of the artist as in &#39;producer&#39;, &#39;performer&#39;, etc)</value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContributionResource {\n");
            sb.Append("  Artist: ").Append(Artist).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContributionResource);
        }

        /// <summary>
        /// Returns true if ContributionResource instances are equal
        /// </summary>
        /// <param name="input">Instance of ContributionResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContributionResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Artist == input.Artist ||
                    (this.Artist != null &&
                    this.Artist.Equals(input.Artist))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Artist != null)
                    hashCode = hashCode * 59 + this.Artist.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                return hashCode;
            }
        }

    }

}
