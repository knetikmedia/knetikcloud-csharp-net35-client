/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// TimePeriodUsable
    /// </summary>
    [DataContract]
    public partial class TimePeriodUsable : Behavior,  IEquatable<TimePeriodUsable>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimePeriodUsable" /> class.
        /// </summary>
        /// <param name="Description">Description.</param>
        /// <param name="TypeHint">Used for polymorphic type recognition and thus must match an expected type with additional properties.</param>
        /// <param name="MaxUse">The amount of times it can be used.</param>
        /// <param name="TimeLength">The length of time.</param>
        /// <param name="UnitOfTime">The unit of time.</param>
        public TimePeriodUsable(string Description = default(string), string TypeHint = default(string), int? MaxUse = default(int?), int? TimeLength = default(int?), string UnitOfTime = default(string))
        {
            this.Description = Description;
            this.TypeHint = TypeHint;
            this.MaxUse = MaxUse;
            this.TimeLength = TimeLength;
            this.UnitOfTime = UnitOfTime;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Used for polymorphic type recognition and thus must match an expected type with additional properties
        /// </summary>
        /// <value>Used for polymorphic type recognition and thus must match an expected type with additional properties</value>
        [DataMember(Name="type_hint", EmitDefaultValue=false)]
        public string TypeHint { get; set; }

        /// <summary>
        /// The amount of times it can be used
        /// </summary>
        /// <value>The amount of times it can be used</value>
        [DataMember(Name="max_use", EmitDefaultValue=false)]
        public int? MaxUse { get; set; }

        /// <summary>
        /// The length of time
        /// </summary>
        /// <value>The length of time</value>
        [DataMember(Name="time_length", EmitDefaultValue=false)]
        public int? TimeLength { get; set; }

        /// <summary>
        /// The unit of time
        /// </summary>
        /// <value>The unit of time</value>
        [DataMember(Name="unit_of_time", EmitDefaultValue=false)]
        public string UnitOfTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimePeriodUsable {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TypeHint: ").Append(TypeHint).Append("\n");
            sb.Append("  MaxUse: ").Append(MaxUse).Append("\n");
            sb.Append("  TimeLength: ").Append(TimeLength).Append("\n");
            sb.Append("  UnitOfTime: ").Append(UnitOfTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimePeriodUsable);
        }

        /// <summary>
        /// Returns true if TimePeriodUsable instances are equal
        /// </summary>
        /// <param name="input">Instance of TimePeriodUsable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimePeriodUsable input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TypeHint == input.TypeHint ||
                    (this.TypeHint != null &&
                    this.TypeHint.Equals(input.TypeHint))
                ) && 
                (
                    this.MaxUse == input.MaxUse ||
                    (this.MaxUse != null &&
                    this.MaxUse.Equals(input.MaxUse))
                ) && 
                (
                    this.TimeLength == input.TimeLength ||
                    (this.TimeLength != null &&
                    this.TimeLength.Equals(input.TimeLength))
                ) && 
                (
                    this.UnitOfTime == input.UnitOfTime ||
                    (this.UnitOfTime != null &&
                    this.UnitOfTime.Equals(input.UnitOfTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TypeHint != null)
                    hashCode = hashCode * 59 + this.TypeHint.GetHashCode();
                if (this.MaxUse != null)
                    hashCode = hashCode * 59 + this.MaxUse.GetHashCode();
                if (this.TimeLength != null)
                    hashCode = hashCode * 59 + this.TimeLength.GetHashCode();
                if (this.UnitOfTime != null)
                    hashCode = hashCode * 59 + this.UnitOfTime.GetHashCode();
                return hashCode;
            }
        }

    }

}
