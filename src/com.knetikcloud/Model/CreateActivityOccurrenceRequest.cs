/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings
    /// </summary>
    [DataContract]
    public partial class CreateActivityOccurrenceRequest :  IEquatable<CreateActivityOccurrenceRequest>
    {
        /// <summary>
        /// The current status of the occurrence (default: SETUP).
        /// </summary>
        /// <value>The current status of the occurrence (default: SETUP).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum SETUP for "SETUP"
            /// </summary>
            [EnumMember(Value = "SETUP")]
            SETUP,
            
            /// <summary>
            /// Enum OPEN for "OPEN"
            /// </summary>
            [EnumMember(Value = "OPEN")]
            OPEN,
            
            /// <summary>
            /// Enum PLAYING for "PLAYING"
            /// </summary>
            [EnumMember(Value = "PLAYING")]
            PLAYING,
            
            /// <summary>
            /// Enum FINISHED for "FINISHED"
            /// </summary>
            [EnumMember(Value = "FINISHED")]
            FINISHED,
            
            /// <summary>
            /// Enum ABANDONED for "ABANDONED"
            /// </summary>
            [EnumMember(Value = "ABANDONED")]
            ABANDONED
        }

        /// <summary>
        /// The current status of the occurrence (default: SETUP).
        /// </summary>
        /// <value>The current status of the occurrence (default: SETUP).</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateActivityOccurrenceRequest" /> class.
        /// </summary>
        /// <param name="ActivityId">The id of the activity, only needed when outside of challenge/event.</param>
        /// <param name="ChallengeActivityId">The id of the challenge activity (required if playing in a challenge/event). Note that this is the challenge_activity_id in case the same activity apears twice in the challenge..</param>
        /// <param name="Entitlement">The entitlement item required to enter the occurrence. Required if not part of an event. Must come from the set of entitlement items listed in the activity.</param>
        /// <param name="EventId">The id of the event this occurence is a part of, if any.</param>
        /// <param name="Settings">The values selected from the available settings defined for the activity. Ex: difficulty: hard. Can be left out if the activity is played during an event and the settings are already set at the event level. Ex: every monday, difficulty: hard, number of questions: 10, category: sport. Otherwise, the set must exactly match those of the activity..</param>
        /// <param name="Simulated">Whether this occurrence will be ran as a simulation. Simulations will not be rewarded. Useful for bot play or trials.</param>
        /// <param name="Status">The current status of the occurrence (default: SETUP)..</param>
        /// <param name="Users">The list of users participating in this occurrence. Can only be set directly with ACTIVITIES_ADMIN permission.</param>
        public CreateActivityOccurrenceRequest(long? ActivityId = default(long?), long? ChallengeActivityId = default(long?), ItemIdRequest Entitlement = default(ItemIdRequest), long? EventId = default(long?), List<SelectedSettingRequest> Settings = default(List<SelectedSettingRequest>), bool? Simulated = default(bool?), StatusEnum? Status = default(StatusEnum?), List<Participant> Users = default(List<Participant>))
        {
            this.ActivityId = ActivityId;
            this.ChallengeActivityId = ChallengeActivityId;
            this.Entitlement = Entitlement;
            this.EventId = EventId;
            this.Settings = Settings;
            this.Simulated = Simulated;
            this.Status = Status;
            this.Users = Users;
        }
        
        /// <summary>
        /// The id of the activity, only needed when outside of challenge/event
        /// </summary>
        /// <value>The id of the activity, only needed when outside of challenge/event</value>
        [DataMember(Name="activity_id", EmitDefaultValue=false)]
        public long? ActivityId { get; set; }

        /// <summary>
        /// The id of the challenge activity (required if playing in a challenge/event). Note that this is the challenge_activity_id in case the same activity apears twice in the challenge.
        /// </summary>
        /// <value>The id of the challenge activity (required if playing in a challenge/event). Note that this is the challenge_activity_id in case the same activity apears twice in the challenge.</value>
        [DataMember(Name="challenge_activity_id", EmitDefaultValue=false)]
        public long? ChallengeActivityId { get; set; }

        /// <summary>
        /// The entitlement item required to enter the occurrence. Required if not part of an event. Must come from the set of entitlement items listed in the activity
        /// </summary>
        /// <value>The entitlement item required to enter the occurrence. Required if not part of an event. Must come from the set of entitlement items listed in the activity</value>
        [DataMember(Name="entitlement", EmitDefaultValue=false)]
        public ItemIdRequest Entitlement { get; set; }

        /// <summary>
        /// The id of the event this occurence is a part of, if any
        /// </summary>
        /// <value>The id of the event this occurence is a part of, if any</value>
        [DataMember(Name="event_id", EmitDefaultValue=false)]
        public long? EventId { get; set; }

        /// <summary>
        /// The values selected from the available settings defined for the activity. Ex: difficulty: hard. Can be left out if the activity is played during an event and the settings are already set at the event level. Ex: every monday, difficulty: hard, number of questions: 10, category: sport. Otherwise, the set must exactly match those of the activity.
        /// </summary>
        /// <value>The values selected from the available settings defined for the activity. Ex: difficulty: hard. Can be left out if the activity is played during an event and the settings are already set at the event level. Ex: every monday, difficulty: hard, number of questions: 10, category: sport. Otherwise, the set must exactly match those of the activity.</value>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public List<SelectedSettingRequest> Settings { get; set; }

        /// <summary>
        /// Whether this occurrence will be ran as a simulation. Simulations will not be rewarded. Useful for bot play or trials
        /// </summary>
        /// <value>Whether this occurrence will be ran as a simulation. Simulations will not be rewarded. Useful for bot play or trials</value>
        [DataMember(Name="simulated", EmitDefaultValue=false)]
        public bool? Simulated { get; set; }


        /// <summary>
        /// The list of users participating in this occurrence. Can only be set directly with ACTIVITIES_ADMIN permission
        /// </summary>
        /// <value>The list of users participating in this occurrence. Can only be set directly with ACTIVITIES_ADMIN permission</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<Participant> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateActivityOccurrenceRequest {\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  ChallengeActivityId: ").Append(ChallengeActivityId).Append("\n");
            sb.Append("  Entitlement: ").Append(Entitlement).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Simulated: ").Append(Simulated).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateActivityOccurrenceRequest);
        }

        /// <summary>
        /// Returns true if CreateActivityOccurrenceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateActivityOccurrenceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateActivityOccurrenceRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivityId == input.ActivityId ||
                    (this.ActivityId != null &&
                    this.ActivityId.Equals(input.ActivityId))
                ) && 
                (
                    this.ChallengeActivityId == input.ChallengeActivityId ||
                    (this.ChallengeActivityId != null &&
                    this.ChallengeActivityId.Equals(input.ChallengeActivityId))
                ) && 
                (
                    this.Entitlement == input.Entitlement ||
                    (this.Entitlement != null &&
                    this.Entitlement.Equals(input.Entitlement))
                ) && 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.SequenceEqual(input.Settings))
                ) && 
                (
                    this.Simulated == input.Simulated ||
                    (this.Simulated != null &&
                    this.Simulated.Equals(input.Simulated))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Users == input.Users ||
                    (this.Users != null &&
                    this.Users.SequenceEqual(input.Users))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivityId != null)
                    hashCode = hashCode * 59 + this.ActivityId.GetHashCode();
                if (this.ChallengeActivityId != null)
                    hashCode = hashCode * 59 + this.ChallengeActivityId.GetHashCode();
                if (this.Entitlement != null)
                    hashCode = hashCode * 59 + this.Entitlement.GetHashCode();
                if (this.EventId != null)
                    hashCode = hashCode * 59 + this.EventId.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                if (this.Simulated != null)
                    hashCode = hashCode * 59 + this.Simulated.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                return hashCode;
            }
        }

    }

}
