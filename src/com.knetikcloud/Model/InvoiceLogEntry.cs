/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// InvoiceLogEntry
    /// </summary>
    [DataContract]
    public partial class InvoiceLogEntry :  IEquatable<InvoiceLogEntry>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceLogEntry" /> class.
        /// </summary>
        /// <param name="Date">The date this event occurred as a unix timestamp in seconds.</param>
        /// <param name="InvoiceId">The ID of the invoice.</param>
        /// <param name="Message">A message describing the event.</param>
        /// <param name="Type">The type of event.</param>
        public InvoiceLogEntry(long? Date = default(long?), int? InvoiceId = default(int?), string Message = default(string), string Type = default(string))
        {
            this.Date = Date;
            this.InvoiceId = InvoiceId;
            this.Message = Message;
            this.Type = Type;
        }
        
        /// <summary>
        /// The date this event occurred as a unix timestamp in seconds
        /// </summary>
        /// <value>The date this event occurred as a unix timestamp in seconds</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public long? Date { get; set; }

        /// <summary>
        /// The ID of the invoice
        /// </summary>
        /// <value>The ID of the invoice</value>
        [DataMember(Name="invoice_id", EmitDefaultValue=false)]
        public int? InvoiceId { get; set; }

        /// <summary>
        /// A message describing the event
        /// </summary>
        /// <value>A message describing the event</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// The type of event
        /// </summary>
        /// <value>The type of event</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceLogEntry {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceLogEntry);
        }

        /// <summary>
        /// Returns true if InvoiceLogEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceLogEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceLogEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.InvoiceId == input.InvoiceId ||
                    (this.InvoiceId != null &&
                    this.InvoiceId.Equals(input.InvoiceId))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.InvoiceId != null)
                    hashCode = hashCode * 59 + this.InvoiceId.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

    }

}
