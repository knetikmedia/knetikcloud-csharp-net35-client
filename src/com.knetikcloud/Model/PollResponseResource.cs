/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// PollResponseResource
    /// </summary>
    [DataContract]
    public partial class PollResponseResource :  IEquatable<PollResponseResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PollResponseResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PollResponseResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PollResponseResource" /> class.
        /// </summary>
        /// <param name="Answer">The answer to the poll (required).</param>
        /// <param name="AnsweredDate">The date the poll was answered, in seconds since unix epoc.</param>
        /// <param name="PollId">The id of the poll (required).</param>
        /// <param name="User">The user (required).</param>
        public PollResponseResource(string Answer = default(string), long? AnsweredDate = default(long?), string PollId = default(string), SimpleUserResource User = default(SimpleUserResource))
        {
            // to ensure "Answer" is required (not null)
            if (Answer == null)
            {
                throw new InvalidDataException("Answer is a required property for PollResponseResource and cannot be null");
            }
            else
            {
                this.Answer = Answer;
            }
            // to ensure "PollId" is required (not null)
            if (PollId == null)
            {
                throw new InvalidDataException("PollId is a required property for PollResponseResource and cannot be null");
            }
            else
            {
                this.PollId = PollId;
            }
            // to ensure "User" is required (not null)
            if (User == null)
            {
                throw new InvalidDataException("User is a required property for PollResponseResource and cannot be null");
            }
            else
            {
                this.User = User;
            }
            this.AnsweredDate = AnsweredDate;
        }
        
        /// <summary>
        /// The answer to the poll
        /// </summary>
        /// <value>The answer to the poll</value>
        [DataMember(Name="answer", EmitDefaultValue=false)]
        public string Answer { get; set; }

        /// <summary>
        /// The date the poll was answered, in seconds since unix epoc
        /// </summary>
        /// <value>The date the poll was answered, in seconds since unix epoc</value>
        [DataMember(Name="answered_date", EmitDefaultValue=false)]
        public long? AnsweredDate { get; set; }

        /// <summary>
        /// The id of the poll response
        /// </summary>
        /// <value>The id of the poll response</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// The id of the poll
        /// </summary>
        /// <value>The id of the poll</value>
        [DataMember(Name="poll_id", EmitDefaultValue=false)]
        public string PollId { get; set; }

        /// <summary>
        /// The user
        /// </summary>
        /// <value>The user</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public SimpleUserResource User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PollResponseResource {\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  AnsweredDate: ").Append(AnsweredDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PollId: ").Append(PollId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PollResponseResource);
        }

        /// <summary>
        /// Returns true if PollResponseResource instances are equal
        /// </summary>
        /// <param name="input">Instance of PollResponseResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PollResponseResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Answer == input.Answer ||
                    (this.Answer != null &&
                    this.Answer.Equals(input.Answer))
                ) && 
                (
                    this.AnsweredDate == input.AnsweredDate ||
                    (this.AnsweredDate != null &&
                    this.AnsweredDate.Equals(input.AnsweredDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PollId == input.PollId ||
                    (this.PollId != null &&
                    this.PollId.Equals(input.PollId))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Answer != null)
                    hashCode = hashCode * 59 + this.Answer.GetHashCode();
                if (this.AnsweredDate != null)
                    hashCode = hashCode * 59 + this.AnsweredDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PollId != null)
                    hashCode = hashCode * 59 + this.PollId.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

    }

}
