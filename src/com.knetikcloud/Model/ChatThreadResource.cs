/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// ChatThreadResource
    /// </summary>
    [DataContract]
    public partial class ChatThreadResource :  IEquatable<ChatThreadResource>
    {
        /// <summary>
        /// The recipient type of the thread
        /// </summary>
        /// <value>The recipient type of the thread</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RecipientTypeEnum
        {
            
            /// <summary>
            /// Enum User for "user"
            /// </summary>
            [EnumMember(Value = "user")]
            User,
            
            /// <summary>
            /// Enum Topic for "topic"
            /// </summary>
            [EnumMember(Value = "topic")]
            Topic
        }

        /// <summary>
        /// The recipient type of the thread
        /// </summary>
        /// <value>The recipient type of the thread</value>
        [DataMember(Name="recipient_type", EmitDefaultValue=false)]
        public RecipientTypeEnum? RecipientType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatThreadResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChatThreadResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatThreadResource" /> class.
        /// </summary>
        /// <param name="RecipientId">The id of the recipient (required).</param>
        /// <param name="RecipientType">The recipient type of the thread (required).</param>
        /// <param name="Subject">The subject of the thread.</param>
        public ChatThreadResource(string RecipientId = default(string), RecipientTypeEnum? RecipientType = default(RecipientTypeEnum?), string Subject = default(string))
        {
            // to ensure "RecipientId" is required (not null)
            if (RecipientId == null)
            {
                throw new InvalidDataException("RecipientId is a required property for ChatThreadResource and cannot be null");
            }
            else
            {
                this.RecipientId = RecipientId;
            }
            // to ensure "RecipientType" is required (not null)
            if (RecipientType == null)
            {
                throw new InvalidDataException("RecipientType is a required property for ChatThreadResource and cannot be null");
            }
            else
            {
                this.RecipientType = RecipientType;
            }
            this.Subject = Subject;
        }
        
        /// <summary>
        /// The number of active users in the thread
        /// </summary>
        /// <value>The number of active users in the thread</value>
        [DataMember(Name="active_users", EmitDefaultValue=false)]
        public int? ActiveUsers { get; private set; }

        /// <summary>
        /// The number of messages in the thread
        /// </summary>
        /// <value>The number of messages in the thread</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; private set; }

        /// <summary>
        /// The date the thread was created
        /// </summary>
        /// <value>The date the thread was created</value>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public long? CreatedDate { get; private set; }

        /// <summary>
        /// The id for this thread
        /// </summary>
        /// <value>The id for this thread</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// The id of the recipient
        /// </summary>
        /// <value>The id of the recipient</value>
        [DataMember(Name="recipient_id", EmitDefaultValue=false)]
        public string RecipientId { get; set; }


        /// <summary>
        /// The subject of the thread
        /// </summary>
        /// <value>The subject of the thread</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// The date the thread was updated
        /// </summary>
        /// <value>The date the thread was updated</value>
        [DataMember(Name="updated_date", EmitDefaultValue=false)]
        public long? UpdatedDate { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChatThreadResource {\n");
            sb.Append("  ActiveUsers: ").Append(ActiveUsers).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  RecipientType: ").Append(RecipientType).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChatThreadResource);
        }

        /// <summary>
        /// Returns true if ChatThreadResource instances are equal
        /// </summary>
        /// <param name="input">Instance of ChatThreadResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChatThreadResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActiveUsers == input.ActiveUsers ||
                    (this.ActiveUsers != null &&
                    this.ActiveUsers.Equals(input.ActiveUsers))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RecipientId == input.RecipientId ||
                    (this.RecipientId != null &&
                    this.RecipientId.Equals(input.RecipientId))
                ) && 
                (
                    this.RecipientType == input.RecipientType ||
                    (this.RecipientType != null &&
                    this.RecipientType.Equals(input.RecipientType))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActiveUsers != null)
                    hashCode = hashCode * 59 + this.ActiveUsers.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RecipientId != null)
                    hashCode = hashCode * 59 + this.RecipientId.GetHashCode();
                if (this.RecipientType != null)
                    hashCode = hashCode * 59 + this.RecipientType.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.UpdatedDate != null)
                    hashCode = hashCode * 59 + this.UpdatedDate.GetHashCode();
                return hashCode;
            }
        }

    }

}
