/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// DeltaResource
    /// </summary>
    [DataContract]
    public partial class DeltaResource :  IEquatable<DeltaResource>, IValidatableObject
    {
        /// <summary>
        /// Whether the question was updated or removed
        /// </summary>
        /// <value>Whether the question was updated or removed</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum UPDATED for "UPDATED"
            /// </summary>
            [EnumMember(Value = "UPDATED")]
            UPDATED,
            
            /// <summary>
            /// Enum REMOVED for "REMOVED"
            /// </summary>
            [EnumMember(Value = "REMOVED")]
            REMOVED
        }

        /// <summary>
        /// Whether the question was updated or removed
        /// </summary>
        /// <value>Whether the question was updated or removed</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeltaResource" /> class.
        /// </summary>
        /// <param name="CategoryId">The id of the category for question.</param>
        /// <param name="MediaType">The media type of the question.</param>
        /// <param name="QuestionId">The id of the question.</param>
        /// <param name="State">Whether the question was updated or removed.</param>
        /// <param name="Tags">The tags for the question.</param>
        /// <param name="UpdatedDate">The date this question was last updated in seconds since unix epoch.</param>
        public DeltaResource(string CategoryId = default(string), string MediaType = default(string), string QuestionId = default(string), StateEnum? State = default(StateEnum?), List<string> Tags = default(List<string>), long? UpdatedDate = default(long?))
        {
            this.CategoryId = CategoryId;
            this.MediaType = MediaType;
            this.QuestionId = QuestionId;
            this.State = State;
            this.Tags = Tags;
            this.UpdatedDate = UpdatedDate;
        }
        
        /// <summary>
        /// The id of the category for question
        /// </summary>
        /// <value>The id of the category for question</value>
        [DataMember(Name="category_id", EmitDefaultValue=false)]
        public string CategoryId { get; set; }
        /// <summary>
        /// The media type of the question
        /// </summary>
        /// <value>The media type of the question</value>
        [DataMember(Name="media_type", EmitDefaultValue=false)]
        public string MediaType { get; set; }
        /// <summary>
        /// The id of the question
        /// </summary>
        /// <value>The id of the question</value>
        [DataMember(Name="question_id", EmitDefaultValue=false)]
        public string QuestionId { get; set; }
        /// <summary>
        /// The tags for the question
        /// </summary>
        /// <value>The tags for the question</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }
        /// <summary>
        /// The date this question was last updated in seconds since unix epoch
        /// </summary>
        /// <value>The date this question was last updated in seconds since unix epoch</value>
        [DataMember(Name="updated_date", EmitDefaultValue=false)]
        public long? UpdatedDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeltaResource {\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  QuestionId: ").Append(QuestionId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeltaResource);
        }

        /// <summary>
        /// Returns true if DeltaResource instances are equal
        /// </summary>
        /// <param name="other">Instance of DeltaResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeltaResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CategoryId == other.CategoryId ||
                    this.CategoryId != null &&
                    this.CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    this.MediaType == other.MediaType ||
                    this.MediaType != null &&
                    this.MediaType.Equals(other.MediaType)
                ) && 
                (
                    this.QuestionId == other.QuestionId ||
                    this.QuestionId != null &&
                    this.QuestionId.Equals(other.QuestionId)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.UpdatedDate == other.UpdatedDate ||
                    this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(other.UpdatedDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CategoryId != null)
                    hash = hash * 59 + this.CategoryId.GetHashCode();
                if (this.MediaType != null)
                    hash = hash * 59 + this.MediaType.GetHashCode();
                if (this.QuestionId != null)
                    hash = hash * 59 + this.QuestionId.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.UpdatedDate != null)
                    hash = hash * 59 + this.UpdatedDate.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
