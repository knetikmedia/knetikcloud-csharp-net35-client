/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// NotificationTypeResource
    /// </summary>
    [DataContract]
    public partial class NotificationTypeResource :  IEquatable<NotificationTypeResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationTypeResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NotificationTypeResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationTypeResource" /> class.
        /// </summary>
        /// <param name="EmailBodyTemplateExternal">Whether the email body should be resolved. If true, the external email delivery system will be expected to handle the templating (Mandrill/Mailchimp). default: false.</param>
        /// <param name="EmailBodyTemplateId">The id of a message template to resolve the email body. If null, no websocket message wil be sent.</param>
        /// <param name="EmailSubjectTemplateId">The id of a message template to resolve the email subject. If null, no websocket message wil be sent.</param>
        /// <param name="Id">The id of the notification type. Default: random.</param>
        /// <param name="Name">The name of the notification type (required).</param>
        /// <param name="SmsTemplateId">The id of a message template to resolve the SMS message. If null, no sms message wil be sent.</param>
        public NotificationTypeResource(bool? EmailBodyTemplateExternal = default(bool?), string EmailBodyTemplateId = default(string), string EmailSubjectTemplateId = default(string), string Id = default(string), string Name = default(string), string SmsTemplateId = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for NotificationTypeResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.EmailBodyTemplateExternal = EmailBodyTemplateExternal;
            this.EmailBodyTemplateId = EmailBodyTemplateId;
            this.EmailSubjectTemplateId = EmailSubjectTemplateId;
            this.Id = Id;
            this.SmsTemplateId = SmsTemplateId;
        }
        
        /// <summary>
        /// The date the type was created, as a unix timestamp in seconds
        /// </summary>
        /// <value>The date the type was created, as a unix timestamp in seconds</value>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public long? CreatedDate { get; private set; }

        /// <summary>
        /// Whether the email body should be resolved. If true, the external email delivery system will be expected to handle the templating (Mandrill/Mailchimp). default: false
        /// </summary>
        /// <value>Whether the email body should be resolved. If true, the external email delivery system will be expected to handle the templating (Mandrill/Mailchimp). default: false</value>
        [DataMember(Name="email_body_template_external", EmitDefaultValue=false)]
        public bool? EmailBodyTemplateExternal { get; set; }

        /// <summary>
        /// The id of a message template to resolve the email body. If null, no websocket message wil be sent
        /// </summary>
        /// <value>The id of a message template to resolve the email body. If null, no websocket message wil be sent</value>
        [DataMember(Name="email_body_template_id", EmitDefaultValue=false)]
        public string EmailBodyTemplateId { get; set; }

        /// <summary>
        /// The id of a message template to resolve the email subject. If null, no websocket message wil be sent
        /// </summary>
        /// <value>The id of a message template to resolve the email subject. If null, no websocket message wil be sent</value>
        [DataMember(Name="email_subject_template_id", EmitDefaultValue=false)]
        public string EmailSubjectTemplateId { get; set; }

        /// <summary>
        /// The id of the notification type. Default: random
        /// </summary>
        /// <value>The id of the notification type. Default: random</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the notification type
        /// </summary>
        /// <value>The name of the notification type</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The id of a message template to resolve the SMS message. If null, no sms message wil be sent
        /// </summary>
        /// <value>The id of a message template to resolve the SMS message. If null, no sms message wil be sent</value>
        [DataMember(Name="sms_template_id", EmitDefaultValue=false)]
        public string SmsTemplateId { get; set; }

        /// <summary>
        /// The date the type was last updated, as a unix timestamp in seconds
        /// </summary>
        /// <value>The date the type was last updated, as a unix timestamp in seconds</value>
        [DataMember(Name="updated_date", EmitDefaultValue=false)]
        public long? UpdatedDate { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationTypeResource {\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  EmailBodyTemplateExternal: ").Append(EmailBodyTemplateExternal).Append("\n");
            sb.Append("  EmailBodyTemplateId: ").Append(EmailBodyTemplateId).Append("\n");
            sb.Append("  EmailSubjectTemplateId: ").Append(EmailSubjectTemplateId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SmsTemplateId: ").Append(SmsTemplateId).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationTypeResource);
        }

        /// <summary>
        /// Returns true if NotificationTypeResource instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationTypeResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationTypeResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.EmailBodyTemplateExternal == input.EmailBodyTemplateExternal ||
                    (this.EmailBodyTemplateExternal != null &&
                    this.EmailBodyTemplateExternal.Equals(input.EmailBodyTemplateExternal))
                ) && 
                (
                    this.EmailBodyTemplateId == input.EmailBodyTemplateId ||
                    (this.EmailBodyTemplateId != null &&
                    this.EmailBodyTemplateId.Equals(input.EmailBodyTemplateId))
                ) && 
                (
                    this.EmailSubjectTemplateId == input.EmailSubjectTemplateId ||
                    (this.EmailSubjectTemplateId != null &&
                    this.EmailSubjectTemplateId.Equals(input.EmailSubjectTemplateId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SmsTemplateId == input.SmsTemplateId ||
                    (this.SmsTemplateId != null &&
                    this.SmsTemplateId.Equals(input.SmsTemplateId))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.EmailBodyTemplateExternal != null)
                    hashCode = hashCode * 59 + this.EmailBodyTemplateExternal.GetHashCode();
                if (this.EmailBodyTemplateId != null)
                    hashCode = hashCode * 59 + this.EmailBodyTemplateId.GetHashCode();
                if (this.EmailSubjectTemplateId != null)
                    hashCode = hashCode * 59 + this.EmailSubjectTemplateId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SmsTemplateId != null)
                    hashCode = hashCode * 59 + this.SmsTemplateId.GetHashCode();
                if (this.UpdatedDate != null)
                    hashCode = hashCode * 59 + this.UpdatedDate.GetHashCode();
                return hashCode;
            }
        }

    }

}
