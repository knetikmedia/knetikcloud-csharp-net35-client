/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// FattMerchantPaymentMethodRequest
    /// </summary>
    [DataContract]
    public partial class FattMerchantPaymentMethodRequest :  IEquatable<FattMerchantPaymentMethodRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FattMerchantPaymentMethodRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FattMerchantPaymentMethodRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FattMerchantPaymentMethodRequest" /> class.
        /// </summary>
        /// <param name="Method">The FattMerchant payment method being created/updated (required).</param>
        /// <param name="UserId">ID of the JSAPI user for whom the payment method is being created/updated. If ID is not that of the currently logged in user, FATMMERCHANT_ADMIN privilege is required. If ID is null, will use the currently logged in user&#39;s ID..</param>
        public FattMerchantPaymentMethodRequest(FattMerchantPaymentMethod Method = default(FattMerchantPaymentMethod), int? UserId = default(int?))
        {
            // to ensure "Method" is required (not null)
            if (Method == null)
            {
                throw new InvalidDataException("Method is a required property for FattMerchantPaymentMethodRequest and cannot be null");
            }
            else
            {
                this.Method = Method;
            }
            this.UserId = UserId;
        }
        
        /// <summary>
        /// The FattMerchant payment method being created/updated
        /// </summary>
        /// <value>The FattMerchant payment method being created/updated</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public FattMerchantPaymentMethod Method { get; set; }

        /// <summary>
        /// ID of the JSAPI user for whom the payment method is being created/updated. If ID is not that of the currently logged in user, FATMMERCHANT_ADMIN privilege is required. If ID is null, will use the currently logged in user&#39;s ID.
        /// </summary>
        /// <value>ID of the JSAPI user for whom the payment method is being created/updated. If ID is not that of the currently logged in user, FATMMERCHANT_ADMIN privilege is required. If ID is null, will use the currently logged in user&#39;s ID.</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FattMerchantPaymentMethodRequest {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FattMerchantPaymentMethodRequest);
        }

        /// <summary>
        /// Returns true if FattMerchantPaymentMethodRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FattMerchantPaymentMethodRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FattMerchantPaymentMethodRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

    }

}
