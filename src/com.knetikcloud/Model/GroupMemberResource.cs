/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// GroupMemberResource
    /// </summary>
    [DataContract]
    public partial class GroupMemberResource :  IEquatable<GroupMemberResource>
    {
        /// <summary>
        /// The member&#39;s access level. Default: member
        /// </summary>
        /// <value>The member&#39;s access level. Default: member</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Moderator for "moderator"
            /// </summary>
            [EnumMember(Value = "moderator")]
            Moderator,
            
            /// <summary>
            /// Enum Member for "member"
            /// </summary>
            [EnumMember(Value = "member")]
            Member
        }

        /// <summary>
        /// The member&#39;s access level. Default: member
        /// </summary>
        /// <value>The member&#39;s access level. Default: member</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupMemberResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupMemberResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupMemberResource" /> class.
        /// </summary>
        /// <param name="AdditionalProperties">A map of additional properties, keyed on the property name (private). Must match the names and types defined in the template for this type, or be an extra not from the template.</param>
        /// <param name="Group">The group. Id is the unique name.</param>
        /// <param name="Order">The position of the member in the group if applicable. Read notes for details.</param>
        /// <param name="Status">The member&#39;s access level. Default: member.</param>
        /// <param name="Template">A template this member additional properties are validated against (private). May be null and no validation of properties will be done.</param>
        /// <param name="User">The user (required).</param>
        public GroupMemberResource(Dictionary<string, Property> AdditionalProperties = default(Dictionary<string, Property>), SimpleGroupResource Group = default(SimpleGroupResource), string Order = default(string), StatusEnum? Status = default(StatusEnum?), string Template = default(string), SimpleUserResource User = default(SimpleUserResource))
        {
            // to ensure "User" is required (not null)
            if (User == null)
            {
                throw new InvalidDataException("User is a required property for GroupMemberResource and cannot be null");
            }
            else
            {
                this.User = User;
            }
            this.AdditionalProperties = AdditionalProperties;
            this.Group = Group;
            this.Order = Order;
            this.Status = Status;
            this.Template = Template;
        }
        
        /// <summary>
        /// A map of additional properties, keyed on the property name (private). Must match the names and types defined in the template for this type, or be an extra not from the template
        /// </summary>
        /// <value>A map of additional properties, keyed on the property name (private). Must match the names and types defined in the template for this type, or be an extra not from the template</value>
        [DataMember(Name="additional_properties", EmitDefaultValue=false)]
        public Dictionary<string, Property> AdditionalProperties { get; set; }

        /// <summary>
        /// The group. Id is the unique name
        /// </summary>
        /// <value>The group. Id is the unique name</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public SimpleGroupResource Group { get; set; }

        /// <summary>
        /// Whether this membership is explicit (the user was added directly to the group) or implicit (the user was added only to one or more child groups)
        /// </summary>
        /// <value>Whether this membership is explicit (the user was added directly to the group) or implicit (the user was added only to one or more child groups)</value>
        [DataMember(Name="implicit", EmitDefaultValue=false)]
        public bool? _Implicit { get; private set; }

        /// <summary>
        /// The id of the membership entry
        /// </summary>
        /// <value>The id of the membership entry</value>
        [DataMember(Name="membership_id", EmitDefaultValue=false)]
        public long? MembershipId { get; private set; }

        /// <summary>
        /// The position of the member in the group if applicable. Read notes for details
        /// </summary>
        /// <value>The position of the member in the group if applicable. Read notes for details</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public string Order { get; set; }


        /// <summary>
        /// A template this member additional properties are validated against (private). May be null and no validation of properties will be done
        /// </summary>
        /// <value>A template this member additional properties are validated against (private). May be null and no validation of properties will be done</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public string Template { get; set; }

        /// <summary>
        /// The user
        /// </summary>
        /// <value>The user</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public SimpleUserResource User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupMemberResource {\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  _Implicit: ").Append(_Implicit).Append("\n");
            sb.Append("  MembershipId: ").Append(MembershipId).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupMemberResource);
        }

        /// <summary>
        /// Returns true if GroupMemberResource instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupMemberResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupMemberResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalProperties == input.AdditionalProperties ||
                    (this.AdditionalProperties != null &&
                    this.AdditionalProperties.SequenceEqual(input.AdditionalProperties))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this._Implicit == input._Implicit ||
                    (this._Implicit != null &&
                    this._Implicit.Equals(input._Implicit))
                ) && 
                (
                    this.MembershipId == input.MembershipId ||
                    (this.MembershipId != null &&
                    this.MembershipId.Equals(input.MembershipId))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalProperties != null)
                    hashCode = hashCode * 59 + this.AdditionalProperties.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this._Implicit != null)
                    hashCode = hashCode * 59 + this._Implicit.GetHashCode();
                if (this.MembershipId != null)
                    hashCode = hashCode * 59 + this.MembershipId.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

    }

}
