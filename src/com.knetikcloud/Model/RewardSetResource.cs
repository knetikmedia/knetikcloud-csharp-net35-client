/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// RewardSetResource
    /// </summary>
    [DataContract]
    public partial class RewardSetResource :  IEquatable<RewardSetResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RewardSetResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RewardSetResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RewardSetResource" /> class.
        /// </summary>
        /// <param name="CurrencyRewards">The currency to give as rewards.</param>
        /// <param name="ItemRewards">The items to give as rewards.</param>
        /// <param name="LongDescription">A longer describe the reward set, usually included in details.</param>
        /// <param name="Name">The user friendly name for this reward set (required).</param>
        /// <param name="ShortDescription">A short paragraph to describe the reward set, usually included in listings.  Max 255 characters.</param>
        /// <param name="UniqueKey">A provided unique key for this reward set.</param>
        public RewardSetResource(List<RewardCurrencyResource> CurrencyRewards = default(List<RewardCurrencyResource>), List<RewardItemResource> ItemRewards = default(List<RewardItemResource>), string LongDescription = default(string), string Name = default(string), string ShortDescription = default(string), string UniqueKey = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for RewardSetResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.CurrencyRewards = CurrencyRewards;
            this.ItemRewards = ItemRewards;
            this.LongDescription = LongDescription;
            this.ShortDescription = ShortDescription;
            this.UniqueKey = UniqueKey;
        }
        
        /// <summary>
        /// The date/time this resource was created in seconds since unix epoch
        /// </summary>
        /// <value>The date/time this resource was created in seconds since unix epoch</value>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public long? CreatedDate { get; private set; }
        /// <summary>
        /// The currency to give as rewards
        /// </summary>
        /// <value>The currency to give as rewards</value>
        [DataMember(Name="currency_rewards", EmitDefaultValue=false)]
        public List<RewardCurrencyResource> CurrencyRewards { get; set; }
        /// <summary>
        /// The assigned unique ID for this reward set
        /// </summary>
        /// <value>The assigned unique ID for this reward set</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }
        /// <summary>
        /// The items to give as rewards
        /// </summary>
        /// <value>The items to give as rewards</value>
        [DataMember(Name="item_rewards", EmitDefaultValue=false)]
        public List<RewardItemResource> ItemRewards { get; set; }
        /// <summary>
        /// A longer describe the reward set, usually included in details
        /// </summary>
        /// <value>A longer describe the reward set, usually included in details</value>
        [DataMember(Name="long_description", EmitDefaultValue=false)]
        public string LongDescription { get; set; }
        /// <summary>
        /// The maximum placing that will receive a reward
        /// </summary>
        /// <value>The maximum placing that will receive a reward</value>
        [DataMember(Name="max_placing", EmitDefaultValue=false)]
        public int? MaxPlacing { get; private set; }
        /// <summary>
        /// The user friendly name for this reward set
        /// </summary>
        /// <value>The user friendly name for this reward set</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// A short paragraph to describe the reward set, usually included in listings.  Max 255 characters
        /// </summary>
        /// <value>A short paragraph to describe the reward set, usually included in listings.  Max 255 characters</value>
        [DataMember(Name="short_description", EmitDefaultValue=false)]
        public string ShortDescription { get; set; }
        /// <summary>
        /// A provided unique key for this reward set
        /// </summary>
        /// <value>A provided unique key for this reward set</value>
        [DataMember(Name="unique_key", EmitDefaultValue=false)]
        public string UniqueKey { get; set; }
        /// <summary>
        /// The date/time this resource was last updated in seconds since unix epoch
        /// </summary>
        /// <value>The date/time this resource was last updated in seconds since unix epoch</value>
        [DataMember(Name="updated_date", EmitDefaultValue=false)]
        public long? UpdatedDate { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RewardSetResource {\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CurrencyRewards: ").Append(CurrencyRewards).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ItemRewards: ").Append(ItemRewards).Append("\n");
            sb.Append("  LongDescription: ").Append(LongDescription).Append("\n");
            sb.Append("  MaxPlacing: ").Append(MaxPlacing).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  UniqueKey: ").Append(UniqueKey).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RewardSetResource);
        }

        /// <summary>
        /// Returns true if RewardSetResource instances are equal
        /// </summary>
        /// <param name="other">Instance of RewardSetResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RewardSetResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.CurrencyRewards == other.CurrencyRewards ||
                    this.CurrencyRewards != null &&
                    this.CurrencyRewards.SequenceEqual(other.CurrencyRewards)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ItemRewards == other.ItemRewards ||
                    this.ItemRewards != null &&
                    this.ItemRewards.SequenceEqual(other.ItemRewards)
                ) && 
                (
                    this.LongDescription == other.LongDescription ||
                    this.LongDescription != null &&
                    this.LongDescription.Equals(other.LongDescription)
                ) && 
                (
                    this.MaxPlacing == other.MaxPlacing ||
                    this.MaxPlacing != null &&
                    this.MaxPlacing.Equals(other.MaxPlacing)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ShortDescription == other.ShortDescription ||
                    this.ShortDescription != null &&
                    this.ShortDescription.Equals(other.ShortDescription)
                ) && 
                (
                    this.UniqueKey == other.UniqueKey ||
                    this.UniqueKey != null &&
                    this.UniqueKey.Equals(other.UniqueKey)
                ) && 
                (
                    this.UpdatedDate == other.UpdatedDate ||
                    this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(other.UpdatedDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.CurrencyRewards != null)
                    hash = hash * 59 + this.CurrencyRewards.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ItemRewards != null)
                    hash = hash * 59 + this.ItemRewards.GetHashCode();
                if (this.LongDescription != null)
                    hash = hash * 59 + this.LongDescription.GetHashCode();
                if (this.MaxPlacing != null)
                    hash = hash * 59 + this.MaxPlacing.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.ShortDescription != null)
                    hash = hash * 59 + this.ShortDescription.GetHashCode();
                if (this.UniqueKey != null)
                    hash = hash * 59 + this.UniqueKey.GetHashCode();
                if (this.UpdatedDate != null)
                    hash = hash * 59 + this.UpdatedDate.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
