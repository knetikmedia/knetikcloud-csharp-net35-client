/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// ActivityEntitlementResource
    /// </summary>
    [DataContract]
    public partial class ActivityEntitlementResource :  IEquatable<ActivityEntitlementResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityEntitlementResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivityEntitlementResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityEntitlementResource" /> class.
        /// </summary>
        /// <param name="ItemId">The id of the entitlement item (required).</param>
        public ActivityEntitlementResource(int? ItemId = default(int?))
        {
            // to ensure "ItemId" is required (not null)
            if (ItemId == null)
            {
                throw new InvalidDataException("ItemId is a required property for ActivityEntitlementResource and cannot be null");
            }
            else
            {
                this.ItemId = ItemId;
            }
        }
        
        /// <summary>
        /// The ISO3 currency code the price is in, if available
        /// </summary>
        /// <value>The ISO3 currency code the price is in, if available</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; private set; }

        /// <summary>
        /// The id of the entitlement item
        /// </summary>
        /// <value>The id of the entitlement item</value>
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public int? ItemId { get; set; }

        /// <summary>
        /// The name of the entitlement item
        /// </summary>
        /// <value>The name of the entitlement item</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// The price of the sku, if available
        /// </summary>
        /// <value>The price of the sku, if available</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; private set; }

        /// <summary>
        /// The sku id, if available. If multiple are available, then first one is returned
        /// </summary>
        /// <value>The sku id, if available. If multiple are available, then first one is returned</value>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityEntitlementResource {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivityEntitlementResource);
        }

        /// <summary>
        /// Returns true if ActivityEntitlementResource instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivityEntitlementResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityEntitlementResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                return hashCode;
            }
        }

    }

}
