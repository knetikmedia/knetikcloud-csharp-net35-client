/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// CartItemRequest
    /// </summary>
    [DataContract]
    public partial class CartItemRequest :  IEquatable<CartItemRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartItemRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CartItemRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CartItemRequest" /> class.
        /// </summary>
        /// <param name="AffiliateKey">The affiliate key of the item.</param>
        /// <param name="CatalogSku">The catalog SKU of the item (required).</param>
        /// <param name="PriceOverride">Allows to override the price of an item, if the behavior configuration permits it (required).</param>
        /// <param name="Quantity">The quantity of the item (required).</param>
        public CartItemRequest(string AffiliateKey = default(string), string CatalogSku = default(string), double? PriceOverride = default(double?), int? Quantity = default(int?))
        {
            // to ensure "CatalogSku" is required (not null)
            if (CatalogSku == null)
            {
                throw new InvalidDataException("CatalogSku is a required property for CartItemRequest and cannot be null");
            }
            else
            {
                this.CatalogSku = CatalogSku;
            }
            // to ensure "PriceOverride" is required (not null)
            if (PriceOverride == null)
            {
                throw new InvalidDataException("PriceOverride is a required property for CartItemRequest and cannot be null");
            }
            else
            {
                this.PriceOverride = PriceOverride;
            }
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
            {
                throw new InvalidDataException("Quantity is a required property for CartItemRequest and cannot be null");
            }
            else
            {
                this.Quantity = Quantity;
            }
            this.AffiliateKey = AffiliateKey;
        }
        
        /// <summary>
        /// The affiliate key of the item
        /// </summary>
        /// <value>The affiliate key of the item</value>
        [DataMember(Name="affiliate_key", EmitDefaultValue=false)]
        public string AffiliateKey { get; set; }

        /// <summary>
        /// The catalog SKU of the item
        /// </summary>
        /// <value>The catalog SKU of the item</value>
        [DataMember(Name="catalog_sku", EmitDefaultValue=false)]
        public string CatalogSku { get; set; }

        /// <summary>
        /// Allows to override the price of an item, if the behavior configuration permits it
        /// </summary>
        /// <value>Allows to override the price of an item, if the behavior configuration permits it</value>
        [DataMember(Name="price_override", EmitDefaultValue=false)]
        public double? PriceOverride { get; set; }

        /// <summary>
        /// The quantity of the item
        /// </summary>
        /// <value>The quantity of the item</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartItemRequest {\n");
            sb.Append("  AffiliateKey: ").Append(AffiliateKey).Append("\n");
            sb.Append("  CatalogSku: ").Append(CatalogSku).Append("\n");
            sb.Append("  PriceOverride: ").Append(PriceOverride).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartItemRequest);
        }

        /// <summary>
        /// Returns true if CartItemRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CartItemRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartItemRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AffiliateKey == input.AffiliateKey ||
                    (this.AffiliateKey != null &&
                    this.AffiliateKey.Equals(input.AffiliateKey))
                ) && 
                (
                    this.CatalogSku == input.CatalogSku ||
                    (this.CatalogSku != null &&
                    this.CatalogSku.Equals(input.CatalogSku))
                ) && 
                (
                    this.PriceOverride == input.PriceOverride ||
                    (this.PriceOverride != null &&
                    this.PriceOverride.Equals(input.PriceOverride))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AffiliateKey != null)
                    hashCode = hashCode * 59 + this.AffiliateKey.GetHashCode();
                if (this.CatalogSku != null)
                    hashCode = hashCode * 59 + this.CatalogSku.GetHashCode();
                if (this.PriceOverride != null)
                    hashCode = hashCode * 59 + this.PriceOverride.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                return hashCode;
            }
        }

    }

}
