/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// UserInventoryResource
    /// </summary>
    [DataContract]
    public partial class UserInventoryResource :  IEquatable<UserInventoryResource>, IValidatableObject
    {
        /// <summary>
        /// The status of the inventory. Pending inventory is not yet ready for use. Inactive inventory has expired or been used up
        /// </summary>
        /// <value>The status of the inventory. Pending inventory is not yet ready for use. Inactive inventory has expired or been used up</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Pending for "pending"
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending,
            
            /// <summary>
            /// Enum Active for "active"
            /// </summary>
            [EnumMember(Value = "active")]
            Active,
            
            /// <summary>
            /// Enum Inactive for "inactive"
            /// </summary>
            [EnumMember(Value = "inactive")]
            Inactive
        }

        /// <summary>
        /// The status of the inventory. Pending inventory is not yet ready for use. Inactive inventory has expired or been used up
        /// </summary>
        /// <value>The status of the inventory. Pending inventory is not yet ready for use. Inactive inventory has expired or been used up</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInventoryResource" /> class.
        /// </summary>
        /// <param name="BehaviorData">A map of data for behaviors.</param>
        /// <param name="Expires">The date/time this resource exires in seconds since epoch. Null for no expiration. For subscriptions, this is the end of the &#39;grace period&#39; if left unpaid.</param>
        /// <param name="InvoiceId">The id of the invoice that resulted in this inventory, if any.</param>
        /// <param name="ItemId">The id of the item.</param>
        /// <param name="ItemName">The name of the item.</param>
        /// <param name="ItemTypeHint">The type hint of the item.</param>
        /// <param name="Status">The status of the inventory. Pending inventory is not yet ready for use. Inactive inventory has expired or been used up.</param>
        /// <param name="User">The id of the user this inventory belongs to.</param>
        public UserInventoryResource(Object BehaviorData = default(Object), long? Expires = default(long?), int? InvoiceId = default(int?), int? ItemId = default(int?), string ItemName = default(string), string ItemTypeHint = default(string), StatusEnum? Status = default(StatusEnum?), SimpleUserResource User = default(SimpleUserResource))
        {
            this.BehaviorData = BehaviorData;
            this.Expires = Expires;
            this.InvoiceId = InvoiceId;
            this.ItemId = ItemId;
            this.ItemName = ItemName;
            this.ItemTypeHint = ItemTypeHint;
            this.Status = Status;
            this.User = User;
        }
        
        /// <summary>
        /// A map of data for behaviors
        /// </summary>
        /// <value>A map of data for behaviors</value>
        [DataMember(Name="behavior_data", EmitDefaultValue=false)]
        public Object BehaviorData { get; set; }
        /// <summary>
        /// The date/time this resource was created in seconds since epoch
        /// </summary>
        /// <value>The date/time this resource was created in seconds since epoch</value>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public long? CreatedDate { get; private set; }
        /// <summary>
        /// The date/time this resource exires in seconds since epoch. Null for no expiration. For subscriptions, this is the end of the &#39;grace period&#39; if left unpaid
        /// </summary>
        /// <value>The date/time this resource exires in seconds since epoch. Null for no expiration. For subscriptions, this is the end of the &#39;grace period&#39; if left unpaid</value>
        [DataMember(Name="expires", EmitDefaultValue=false)]
        public long? Expires { get; set; }
        /// <summary>
        /// The id of the inventory
        /// </summary>
        /// <value>The id of the inventory</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }
        /// <summary>
        /// The id of the invoice that resulted in this inventory, if any
        /// </summary>
        /// <value>The id of the invoice that resulted in this inventory, if any</value>
        [DataMember(Name="invoice_id", EmitDefaultValue=false)]
        public int? InvoiceId { get; set; }
        /// <summary>
        /// The id of the item
        /// </summary>
        /// <value>The id of the item</value>
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public int? ItemId { get; set; }
        /// <summary>
        /// The name of the item
        /// </summary>
        /// <value>The name of the item</value>
        [DataMember(Name="item_name", EmitDefaultValue=false)]
        public string ItemName { get; set; }
        /// <summary>
        /// The type hint of the item
        /// </summary>
        /// <value>The type hint of the item</value>
        [DataMember(Name="item_type_hint", EmitDefaultValue=false)]
        public string ItemTypeHint { get; set; }
        /// <summary>
        /// The date/time this resource was last updated in seconds since epoch
        /// </summary>
        /// <value>The date/time this resource was last updated in seconds since epoch</value>
        [DataMember(Name="updated_date", EmitDefaultValue=false)]
        public long? UpdatedDate { get; private set; }
        /// <summary>
        /// The id of the user this inventory belongs to
        /// </summary>
        /// <value>The id of the user this inventory belongs to</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public SimpleUserResource User { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserInventoryResource {\n");
            sb.Append("  BehaviorData: ").Append(BehaviorData).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  ItemTypeHint: ").Append(ItemTypeHint).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserInventoryResource);
        }

        /// <summary>
        /// Returns true if UserInventoryResource instances are equal
        /// </summary>
        /// <param name="other">Instance of UserInventoryResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserInventoryResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BehaviorData == other.BehaviorData ||
                    this.BehaviorData != null &&
                    this.BehaviorData.Equals(other.BehaviorData)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.Expires == other.Expires ||
                    this.Expires != null &&
                    this.Expires.Equals(other.Expires)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.InvoiceId == other.InvoiceId ||
                    this.InvoiceId != null &&
                    this.InvoiceId.Equals(other.InvoiceId)
                ) && 
                (
                    this.ItemId == other.ItemId ||
                    this.ItemId != null &&
                    this.ItemId.Equals(other.ItemId)
                ) && 
                (
                    this.ItemName == other.ItemName ||
                    this.ItemName != null &&
                    this.ItemName.Equals(other.ItemName)
                ) && 
                (
                    this.ItemTypeHint == other.ItemTypeHint ||
                    this.ItemTypeHint != null &&
                    this.ItemTypeHint.Equals(other.ItemTypeHint)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.UpdatedDate == other.UpdatedDate ||
                    this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(other.UpdatedDate)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BehaviorData != null)
                    hash = hash * 59 + this.BehaviorData.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.Expires != null)
                    hash = hash * 59 + this.Expires.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.InvoiceId != null)
                    hash = hash * 59 + this.InvoiceId.GetHashCode();
                if (this.ItemId != null)
                    hash = hash * 59 + this.ItemId.GetHashCode();
                if (this.ItemName != null)
                    hash = hash * 59 + this.ItemName.GetHashCode();
                if (this.ItemTypeHint != null)
                    hash = hash * 59 + this.ItemTypeHint.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.UpdatedDate != null)
                    hash = hash * 59 + this.UpdatedDate.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
