/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// PaymentMethodDetails
    /// </summary>
    [DataContract]
    public partial class PaymentMethodDetails :  IEquatable<PaymentMethodDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodDetails" /> class.
        /// </summary>
        /// <param name="_Default">_Default.</param>
        /// <param name="ExpirationDate">The expiration date for the payment method, expressed as seconds since epoch. Typically used for credit card payment methods.</param>
        /// <param name="ExpirationMonth">The expiration month (1 - 12) for the payment method. Typically used for credit card payment methods.</param>
        /// <param name="ExpirationYear">The expiration year for the payment method. Typically used for credit card payment methods.</param>
        /// <param name="Last4">The last 4 digits of the account number for the payment method. Typically used for credit card payment methods.</param>
        /// <param name="Sort">The sort value for the payment method.</param>
        /// <param name="UniqueKey">An optional unique identifier.</param>
        /// <param name="Verified">Verified.</param>
        public PaymentMethodDetails(bool? _Default = default(bool?), long? ExpirationDate = default(long?), int? ExpirationMonth = default(int?), int? ExpirationYear = default(int?), string Last4 = default(string), int? Sort = default(int?), string UniqueKey = default(string), bool? Verified = default(bool?))
        {
            this._Default = _Default;
            this.ExpirationDate = ExpirationDate;
            this.ExpirationMonth = ExpirationMonth;
            this.ExpirationYear = ExpirationYear;
            this.Last4 = Last4;
            this.Sort = Sort;
            this.UniqueKey = UniqueKey;
            this.Verified = Verified;
        }
        
        /// <summary>
        /// Gets or Sets _Default
        /// </summary>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public bool? _Default { get; set; }

        /// <summary>
        /// The expiration date for the payment method, expressed as seconds since epoch. Typically used for credit card payment methods
        /// </summary>
        /// <value>The expiration date for the payment method, expressed as seconds since epoch. Typically used for credit card payment methods</value>
        [DataMember(Name="expiration_date", EmitDefaultValue=false)]
        public long? ExpirationDate { get; set; }

        /// <summary>
        /// The expiration month (1 - 12) for the payment method. Typically used for credit card payment methods
        /// </summary>
        /// <value>The expiration month (1 - 12) for the payment method. Typically used for credit card payment methods</value>
        [DataMember(Name="expiration_month", EmitDefaultValue=false)]
        public int? ExpirationMonth { get; set; }

        /// <summary>
        /// The expiration year for the payment method. Typically used for credit card payment methods
        /// </summary>
        /// <value>The expiration year for the payment method. Typically used for credit card payment methods</value>
        [DataMember(Name="expiration_year", EmitDefaultValue=false)]
        public int? ExpirationYear { get; set; }

        /// <summary>
        /// The last 4 digits of the account number for the payment method. Typically used for credit card payment methods
        /// </summary>
        /// <value>The last 4 digits of the account number for the payment method. Typically used for credit card payment methods</value>
        [DataMember(Name="last4", EmitDefaultValue=false)]
        public string Last4 { get; set; }

        /// <summary>
        /// The sort value for the payment method
        /// </summary>
        /// <value>The sort value for the payment method</value>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public int? Sort { get; set; }

        /// <summary>
        /// An optional unique identifier
        /// </summary>
        /// <value>An optional unique identifier</value>
        [DataMember(Name="unique_key", EmitDefaultValue=false)]
        public string UniqueKey { get; set; }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>
        [DataMember(Name="verified", EmitDefaultValue=false)]
        public bool? Verified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentMethodDetails {\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ExpirationMonth: ").Append(ExpirationMonth).Append("\n");
            sb.Append("  ExpirationYear: ").Append(ExpirationYear).Append("\n");
            sb.Append("  Last4: ").Append(Last4).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  UniqueKey: ").Append(UniqueKey).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentMethodDetails);
        }

        /// <summary>
        /// Returns true if PaymentMethodDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentMethodDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethodDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Default == input._Default ||
                    (this._Default != null &&
                    this._Default.Equals(input._Default))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.ExpirationMonth == input.ExpirationMonth ||
                    (this.ExpirationMonth != null &&
                    this.ExpirationMonth.Equals(input.ExpirationMonth))
                ) && 
                (
                    this.ExpirationYear == input.ExpirationYear ||
                    (this.ExpirationYear != null &&
                    this.ExpirationYear.Equals(input.ExpirationYear))
                ) && 
                (
                    this.Last4 == input.Last4 ||
                    (this.Last4 != null &&
                    this.Last4.Equals(input.Last4))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.UniqueKey == input.UniqueKey ||
                    (this.UniqueKey != null &&
                    this.UniqueKey.Equals(input.UniqueKey))
                ) && 
                (
                    this.Verified == input.Verified ||
                    (this.Verified != null &&
                    this.Verified.Equals(input.Verified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Default != null)
                    hashCode = hashCode * 59 + this._Default.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.ExpirationMonth != null)
                    hashCode = hashCode * 59 + this.ExpirationMonth.GetHashCode();
                if (this.ExpirationYear != null)
                    hashCode = hashCode * 59 + this.ExpirationYear.GetHashCode();
                if (this.Last4 != null)
                    hashCode = hashCode * 59 + this.Last4.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.UniqueKey != null)
                    hashCode = hashCode * 59 + this.UniqueKey.GetHashCode();
                if (this.Verified != null)
                    hashCode = hashCode * 59 + this.Verified.GetHashCode();
                return hashCode;
            }
        }

    }

}
