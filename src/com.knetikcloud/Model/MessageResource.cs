/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// MessageResource
    /// </summary>
    [DataContract]
    public partial class MessageResource :  IEquatable<MessageResource>
    {
        /// <summary>
        /// The type of recipient for the message. Either a user, or all users in a topic. Required if sending directly to messaging service
        /// </summary>
        /// <value>The type of recipient for the message. Either a user, or all users in a topic. Required if sending directly to messaging service</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RecipientTypeEnum
        {
            
            /// <summary>
            /// Enum User for "user"
            /// </summary>
            [EnumMember(Value = "user")]
            User,
            
            /// <summary>
            /// Enum Topic for "topic"
            /// </summary>
            [EnumMember(Value = "topic")]
            Topic
        }

        /// <summary>
        /// The type of recipient for the message. Either a user, or all users in a topic. Required if sending directly to messaging service
        /// </summary>
        /// <value>The type of recipient for the message. Either a user, or all users in a topic. Required if sending directly to messaging service</value>
        [DataMember(Name="recipient_type", EmitDefaultValue=false)]
        public RecipientTypeEnum? RecipientType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageResource" /> class.
        /// </summary>
        /// <param name="Content">The content of the message in various formats (required).</param>
        /// <param name="Recipient">The id of the recipient, dependent on the recipient_type. The user&#39;s id or the topic&#39;s id. Required if sending directly to messaging service.</param>
        /// <param name="RecipientType">The type of recipient for the message. Either a user, or all users in a topic. Required if sending directly to messaging service.</param>
        /// <param name="Subject">The subject of the message. Required for email messages.</param>
        /// <param name="Type">The type of message for websocket type hinting. will be added to the payload with the key _type.</param>
        public MessageResource(MessageContentResource Content = default(MessageContentResource), string Recipient = default(string), RecipientTypeEnum? RecipientType = default(RecipientTypeEnum?), string Subject = default(string), string Type = default(string))
        {
            // to ensure "Content" is required (not null)
            if (Content == null)
            {
                throw new InvalidDataException("Content is a required property for MessageResource and cannot be null");
            }
            else
            {
                this.Content = Content;
            }
            this.Recipient = Recipient;
            this.RecipientType = RecipientType;
            this.Subject = Subject;
            this.Type = Type;
        }
        
        /// <summary>
        /// The content of the message in various formats
        /// </summary>
        /// <value>The content of the message in various formats</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public MessageContentResource Content { get; set; }

        /// <summary>
        /// The id of the recipient, dependent on the recipient_type. The user&#39;s id or the topic&#39;s id. Required if sending directly to messaging service
        /// </summary>
        /// <value>The id of the recipient, dependent on the recipient_type. The user&#39;s id or the topic&#39;s id. Required if sending directly to messaging service</value>
        [DataMember(Name="recipient", EmitDefaultValue=false)]
        public string Recipient { get; set; }


        /// <summary>
        /// The subject of the message. Required for email messages
        /// </summary>
        /// <value>The subject of the message. Required for email messages</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// The type of message for websocket type hinting. will be added to the payload with the key _type
        /// </summary>
        /// <value>The type of message for websocket type hinting. will be added to the payload with the key _type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageResource {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  RecipientType: ").Append(RecipientType).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageResource);
        }

        /// <summary>
        /// Returns true if MessageResource instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) && 
                (
                    this.RecipientType == input.RecipientType ||
                    (this.RecipientType != null &&
                    this.RecipientType.Equals(input.RecipientType))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.Recipient != null)
                    hashCode = hashCode * 59 + this.Recipient.GetHashCode();
                if (this.RecipientType != null)
                    hashCode = hashCode * 59 + this.RecipientType.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

    }

}
