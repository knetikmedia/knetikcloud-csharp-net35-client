/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// FattMerchantPaymentMethod
    /// </summary>
    [DataContract]
    public partial class FattMerchantPaymentMethod :  IEquatable<FattMerchantPaymentMethod>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FattMerchantPaymentMethod" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FattMerchantPaymentMethod() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FattMerchantPaymentMethod" /> class.
        /// </summary>
        /// <param name="Address1">Address1.</param>
        /// <param name="Address2">Address2.</param>
        /// <param name="AddressCity">AddressCity.</param>
        /// <param name="AddressCountry">AddressCountry.</param>
        /// <param name="AddressState">AddressState.</param>
        /// <param name="AddressZip">AddressZip.</param>
        /// <param name="CardLastFour">Last four digits of the credit card (required).</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="CustomerId">Unique FattMerchant customer ID (required).</param>
        /// <param name="DeletedAt">DeletedAt.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Nickname">Nickname given to the FattMerchant payment method (required).</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        public FattMerchantPaymentMethod(string Address1 = default(string), string Address2 = default(string), string AddressCity = default(string), string AddressCountry = default(string), string AddressState = default(string), string AddressZip = default(string), string CardLastFour = default(string), string CreatedAt = default(string), string CustomerId = default(string), string DeletedAt = default(string), string Id = default(string), string Nickname = default(string), string UpdatedAt = default(string))
        {
            // to ensure "CardLastFour" is required (not null)
            if (CardLastFour == null)
            {
                throw new InvalidDataException("CardLastFour is a required property for FattMerchantPaymentMethod and cannot be null");
            }
            else
            {
                this.CardLastFour = CardLastFour;
            }
            // to ensure "CustomerId" is required (not null)
            if (CustomerId == null)
            {
                throw new InvalidDataException("CustomerId is a required property for FattMerchantPaymentMethod and cannot be null");
            }
            else
            {
                this.CustomerId = CustomerId;
            }
            // to ensure "Nickname" is required (not null)
            if (Nickname == null)
            {
                throw new InvalidDataException("Nickname is a required property for FattMerchantPaymentMethod and cannot be null");
            }
            else
            {
                this.Nickname = Nickname;
            }
            this.Address1 = Address1;
            this.Address2 = Address2;
            this.AddressCity = AddressCity;
            this.AddressCountry = AddressCountry;
            this.AddressState = AddressState;
            this.AddressZip = AddressZip;
            this.CreatedAt = CreatedAt;
            this.DeletedAt = DeletedAt;
            this.Id = Id;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// Gets or Sets Address1
        /// </summary>
        [DataMember(Name="address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or Sets Address2
        /// </summary>
        [DataMember(Name="address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or Sets AddressCity
        /// </summary>
        [DataMember(Name="address_city", EmitDefaultValue=false)]
        public string AddressCity { get; set; }

        /// <summary>
        /// Gets or Sets AddressCountry
        /// </summary>
        [DataMember(Name="address_country", EmitDefaultValue=false)]
        public string AddressCountry { get; set; }

        /// <summary>
        /// Gets or Sets AddressState
        /// </summary>
        [DataMember(Name="address_state", EmitDefaultValue=false)]
        public string AddressState { get; set; }

        /// <summary>
        /// Gets or Sets AddressZip
        /// </summary>
        [DataMember(Name="address_zip", EmitDefaultValue=false)]
        public string AddressZip { get; set; }

        /// <summary>
        /// Last four digits of the credit card
        /// </summary>
        /// <value>Last four digits of the credit card</value>
        [DataMember(Name="card_last_four", EmitDefaultValue=false)]
        public string CardLastFour { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Unique FattMerchant customer ID
        /// </summary>
        /// <value>Unique FattMerchant customer ID</value>
        [DataMember(Name="customer_id", EmitDefaultValue=false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets DeletedAt
        /// </summary>
        [DataMember(Name="deleted_at", EmitDefaultValue=false)]
        public string DeletedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Nickname given to the FattMerchant payment method
        /// </summary>
        /// <value>Nickname given to the FattMerchant payment method</value>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FattMerchantPaymentMethod {\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  AddressCity: ").Append(AddressCity).Append("\n");
            sb.Append("  AddressCountry: ").Append(AddressCountry).Append("\n");
            sb.Append("  AddressState: ").Append(AddressState).Append("\n");
            sb.Append("  AddressZip: ").Append(AddressZip).Append("\n");
            sb.Append("  CardLastFour: ").Append(CardLastFour).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FattMerchantPaymentMethod);
        }

        /// <summary>
        /// Returns true if FattMerchantPaymentMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of FattMerchantPaymentMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FattMerchantPaymentMethod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.AddressCity == input.AddressCity ||
                    (this.AddressCity != null &&
                    this.AddressCity.Equals(input.AddressCity))
                ) && 
                (
                    this.AddressCountry == input.AddressCountry ||
                    (this.AddressCountry != null &&
                    this.AddressCountry.Equals(input.AddressCountry))
                ) && 
                (
                    this.AddressState == input.AddressState ||
                    (this.AddressState != null &&
                    this.AddressState.Equals(input.AddressState))
                ) && 
                (
                    this.AddressZip == input.AddressZip ||
                    (this.AddressZip != null &&
                    this.AddressZip.Equals(input.AddressZip))
                ) && 
                (
                    this.CardLastFour == input.CardLastFour ||
                    (this.CardLastFour != null &&
                    this.CardLastFour.Equals(input.CardLastFour))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    (this.DeletedAt != null &&
                    this.DeletedAt.Equals(input.DeletedAt))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.AddressCity != null)
                    hashCode = hashCode * 59 + this.AddressCity.GetHashCode();
                if (this.AddressCountry != null)
                    hashCode = hashCode * 59 + this.AddressCountry.GetHashCode();
                if (this.AddressState != null)
                    hashCode = hashCode * 59 + this.AddressState.GetHashCode();
                if (this.AddressZip != null)
                    hashCode = hashCode * 59 + this.AddressZip.GetHashCode();
                if (this.CardLastFour != null)
                    hashCode = hashCode * 59 + this.CardLastFour.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.DeletedAt != null)
                    hashCode = hashCode * 59 + this.DeletedAt.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

    }

}
