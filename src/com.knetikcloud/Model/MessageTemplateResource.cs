/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// MessageTemplateResource
    /// </summary>
    [DataContract]
    public partial class MessageTemplateResource :  IEquatable<MessageTemplateResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageTemplateResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageTemplateResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageTemplateResource" /> class.
        /// </summary>
        /// <param name="Content">The content of the template. See Apache Velocity documentation for formatting (required).</param>
        /// <param name="Id">The id of the template. Cannot be changed after creation. default: auto generated.</param>
        /// <param name="Name">The name of the template (required).</param>
        /// <param name="Tags">A list of tags for search purposes. Will be converted to lower case.</param>
        public MessageTemplateResource(string Content = default(string), string Id = default(string), string Name = default(string), List<string> Tags = default(List<string>))
        {
            // to ensure "Content" is required (not null)
            if (Content == null)
            {
                throw new InvalidDataException("Content is a required property for MessageTemplateResource and cannot be null");
            }
            else
            {
                this.Content = Content;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for MessageTemplateResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.Id = Id;
            this.Tags = Tags;
        }
        
        /// <summary>
        /// The content of the template. See Apache Velocity documentation for formatting
        /// </summary>
        /// <value>The content of the template. See Apache Velocity documentation for formatting</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// The id of the template. Cannot be changed after creation. default: auto generated
        /// </summary>
        /// <value>The id of the template. Cannot be changed after creation. default: auto generated</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the template
        /// </summary>
        /// <value>The name of the template</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A list of tags for search purposes. Will be converted to lower case
        /// </summary>
        /// <value>A list of tags for search purposes. Will be converted to lower case</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageTemplateResource {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageTemplateResource);
        }

        /// <summary>
        /// Returns true if MessageTemplateResource instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageTemplateResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageTemplateResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Tags == input.Tags ||
                    (this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                return hashCode;
            }
        }

    }

}
