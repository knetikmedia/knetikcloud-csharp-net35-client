/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// OptimalPaymentRequest
    /// </summary>
    [DataContract]
    public partial class OptimalPaymentRequest :  IEquatable<OptimalPaymentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimalPaymentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OptimalPaymentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimalPaymentRequest" /> class.
        /// </summary>
        /// <param name="Email">The email address of the user.</param>
        /// <param name="FirstName">The first name of the user.</param>
        /// <param name="InvoiceId">The id of the invoice to pay (required).</param>
        /// <param name="LastName">The last name of the user.</param>
        /// <param name="OnDecline">The url to redirect the user to after declining payment (required).</param>
        /// <param name="OnError">The url to redirect the user to after an error in payment (required).</param>
        /// <param name="OnSuccess">The url to redirect the user to after successful payment (required).</param>
        public OptimalPaymentRequest(string Email = default(string), string FirstName = default(string), int? InvoiceId = default(int?), string LastName = default(string), string OnDecline = default(string), string OnError = default(string), string OnSuccess = default(string))
        {
            // to ensure "InvoiceId" is required (not null)
            if (InvoiceId == null)
            {
                throw new InvalidDataException("InvoiceId is a required property for OptimalPaymentRequest and cannot be null");
            }
            else
            {
                this.InvoiceId = InvoiceId;
            }
            // to ensure "OnDecline" is required (not null)
            if (OnDecline == null)
            {
                throw new InvalidDataException("OnDecline is a required property for OptimalPaymentRequest and cannot be null");
            }
            else
            {
                this.OnDecline = OnDecline;
            }
            // to ensure "OnError" is required (not null)
            if (OnError == null)
            {
                throw new InvalidDataException("OnError is a required property for OptimalPaymentRequest and cannot be null");
            }
            else
            {
                this.OnError = OnError;
            }
            // to ensure "OnSuccess" is required (not null)
            if (OnSuccess == null)
            {
                throw new InvalidDataException("OnSuccess is a required property for OptimalPaymentRequest and cannot be null");
            }
            else
            {
                this.OnSuccess = OnSuccess;
            }
            this.Email = Email;
            this.FirstName = FirstName;
            this.LastName = LastName;
        }
        
        /// <summary>
        /// The email address of the user
        /// </summary>
        /// <value>The email address of the user</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// The first name of the user
        /// </summary>
        /// <value>The first name of the user</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// The id of the invoice to pay
        /// </summary>
        /// <value>The id of the invoice to pay</value>
        [DataMember(Name="invoice_id", EmitDefaultValue=false)]
        public int? InvoiceId { get; set; }
        /// <summary>
        /// The last name of the user
        /// </summary>
        /// <value>The last name of the user</value>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// The url to redirect the user to after declining payment
        /// </summary>
        /// <value>The url to redirect the user to after declining payment</value>
        [DataMember(Name="on_decline", EmitDefaultValue=false)]
        public string OnDecline { get; set; }
        /// <summary>
        /// The url to redirect the user to after an error in payment
        /// </summary>
        /// <value>The url to redirect the user to after an error in payment</value>
        [DataMember(Name="on_error", EmitDefaultValue=false)]
        public string OnError { get; set; }
        /// <summary>
        /// The url to redirect the user to after successful payment
        /// </summary>
        /// <value>The url to redirect the user to after successful payment</value>
        [DataMember(Name="on_success", EmitDefaultValue=false)]
        public string OnSuccess { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OptimalPaymentRequest {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  OnDecline: ").Append(OnDecline).Append("\n");
            sb.Append("  OnError: ").Append(OnError).Append("\n");
            sb.Append("  OnSuccess: ").Append(OnSuccess).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OptimalPaymentRequest);
        }

        /// <summary>
        /// Returns true if OptimalPaymentRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of OptimalPaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimalPaymentRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.InvoiceId == other.InvoiceId ||
                    this.InvoiceId != null &&
                    this.InvoiceId.Equals(other.InvoiceId)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.OnDecline == other.OnDecline ||
                    this.OnDecline != null &&
                    this.OnDecline.Equals(other.OnDecline)
                ) && 
                (
                    this.OnError == other.OnError ||
                    this.OnError != null &&
                    this.OnError.Equals(other.OnError)
                ) && 
                (
                    this.OnSuccess == other.OnSuccess ||
                    this.OnSuccess != null &&
                    this.OnSuccess.Equals(other.OnSuccess)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.InvoiceId != null)
                    hash = hash * 59 + this.InvoiceId.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.OnDecline != null)
                    hash = hash * 59 + this.OnDecline.GetHashCode();
                if (this.OnError != null)
                    hash = hash * 59 + this.OnError.GetHashCode();
                if (this.OnSuccess != null)
                    hash = hash * 59 + this.OnSuccess.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
