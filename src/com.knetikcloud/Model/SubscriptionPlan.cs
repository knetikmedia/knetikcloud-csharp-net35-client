/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// SubscriptionPlan
    /// </summary>
    [DataContract]
    public partial class SubscriptionPlan :  IEquatable<SubscriptionPlan>
    {
        /// <summary>
        /// Gets or Sets Availability
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AvailabilityEnum
        {
            
            /// <summary>
            /// Enum All for "all"
            /// </summary>
            [EnumMember(Value = "all")]
            All,
            
            /// <summary>
            /// Enum Newsubscribers for "new_subscribers"
            /// </summary>
            [EnumMember(Value = "new_subscribers")]
            Newsubscribers
        }

        /// <summary>
        /// Gets or Sets FirstBillUnitOfTime
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FirstBillUnitOfTimeEnum
        {
            
            /// <summary>
            /// Enum Millisecond for "millisecond"
            /// </summary>
            [EnumMember(Value = "millisecond")]
            Millisecond,
            
            /// <summary>
            /// Enum Second for "second"
            /// </summary>
            [EnumMember(Value = "second")]
            Second,
            
            /// <summary>
            /// Enum Minute for "minute"
            /// </summary>
            [EnumMember(Value = "minute")]
            Minute,
            
            /// <summary>
            /// Enum Hour for "hour"
            /// </summary>
            [EnumMember(Value = "hour")]
            Hour,
            
            /// <summary>
            /// Enum Day for "day"
            /// </summary>
            [EnumMember(Value = "day")]
            Day,
            
            /// <summary>
            /// Enum Week for "week"
            /// </summary>
            [EnumMember(Value = "week")]
            Week,
            
            /// <summary>
            /// Enum Month for "month"
            /// </summary>
            [EnumMember(Value = "month")]
            Month,
            
            /// <summary>
            /// Enum Year for "year"
            /// </summary>
            [EnumMember(Value = "year")]
            Year
        }

        /// <summary>
        /// Gets or Sets RenewPeriodUnitOfTime
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RenewPeriodUnitOfTimeEnum
        {
            
            /// <summary>
            /// Enum Millisecond for "millisecond"
            /// </summary>
            [EnumMember(Value = "millisecond")]
            Millisecond,
            
            /// <summary>
            /// Enum Second for "second"
            /// </summary>
            [EnumMember(Value = "second")]
            Second,
            
            /// <summary>
            /// Enum Minute for "minute"
            /// </summary>
            [EnumMember(Value = "minute")]
            Minute,
            
            /// <summary>
            /// Enum Hour for "hour"
            /// </summary>
            [EnumMember(Value = "hour")]
            Hour,
            
            /// <summary>
            /// Enum Day for "day"
            /// </summary>
            [EnumMember(Value = "day")]
            Day,
            
            /// <summary>
            /// Enum Week for "week"
            /// </summary>
            [EnumMember(Value = "week")]
            Week,
            
            /// <summary>
            /// Enum Month for "month"
            /// </summary>
            [EnumMember(Value = "month")]
            Month,
            
            /// <summary>
            /// Enum Year for "year"
            /// </summary>
            [EnumMember(Value = "year")]
            Year
        }

        /// <summary>
        /// Gets or Sets Availability
        /// </summary>
        [DataMember(Name="availability", EmitDefaultValue=false)]
        public AvailabilityEnum? Availability { get; set; }
        /// <summary>
        /// Gets or Sets FirstBillUnitOfTime
        /// </summary>
        [DataMember(Name="first_bill_unit_of_time", EmitDefaultValue=false)]
        public FirstBillUnitOfTimeEnum? FirstBillUnitOfTime { get; set; }
        /// <summary>
        /// Gets or Sets RenewPeriodUnitOfTime
        /// </summary>
        [DataMember(Name="renew_period_unit_of_time", EmitDefaultValue=false)]
        public RenewPeriodUnitOfTimeEnum? RenewPeriodUnitOfTime { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPlan" /> class.
        /// </summary>
        /// <param name="AdditionalProperties">AdditionalProperties.</param>
        /// <param name="Availability">Availability.</param>
        /// <param name="BillGraceDays">BillGraceDays.</param>
        /// <param name="Consolidated">Consolidated.</param>
        /// <param name="FirstBill">FirstBill.</param>
        /// <param name="FirstBillUnitOfTime">FirstBillUnitOfTime.</param>
        /// <param name="Id">Id.</param>
        /// <param name="LatePaymentSku">LatePaymentSku.</param>
        /// <param name="Locked">Locked.</param>
        /// <param name="MaxAutoRenew">MaxAutoRenew.</param>
        /// <param name="MaxBillAttempts">MaxBillAttempts.</param>
        /// <param name="MigrationPlan">MigrationPlan.</param>
        /// <param name="MinimumTerm">MinimumTerm.</param>
        /// <param name="Name">Name.</param>
        /// <param name="PrimarySku">PrimarySku.</param>
        /// <param name="ReactivationSku">ReactivationSku.</param>
        /// <param name="RecurringSku">RecurringSku.</param>
        /// <param name="RenewPeriod">RenewPeriod.</param>
        /// <param name="RenewPeriodUnitOfTime">RenewPeriodUnitOfTime.</param>
        /// <param name="SubscriptionId">SubscriptionId.</param>
        public SubscriptionPlan(Dictionary<string, Property> AdditionalProperties = default(Dictionary<string, Property>), AvailabilityEnum? Availability = default(AvailabilityEnum?), int? BillGraceDays = default(int?), bool? Consolidated = default(bool?), int? FirstBill = default(int?), FirstBillUnitOfTimeEnum? FirstBillUnitOfTime = default(FirstBillUnitOfTimeEnum?), string Id = default(string), string LatePaymentSku = default(string), bool? Locked = default(bool?), int? MaxAutoRenew = default(int?), int? MaxBillAttempts = default(int?), string MigrationPlan = default(string), int? MinimumTerm = default(int?), string Name = default(string), string PrimarySku = default(string), string ReactivationSku = default(string), string RecurringSku = default(string), int? RenewPeriod = default(int?), RenewPeriodUnitOfTimeEnum? RenewPeriodUnitOfTime = default(RenewPeriodUnitOfTimeEnum?), int? SubscriptionId = default(int?))
        {
            this.AdditionalProperties = AdditionalProperties;
            this.Availability = Availability;
            this.BillGraceDays = BillGraceDays;
            this.Consolidated = Consolidated;
            this.FirstBill = FirstBill;
            this.FirstBillUnitOfTime = FirstBillUnitOfTime;
            this.Id = Id;
            this.LatePaymentSku = LatePaymentSku;
            this.Locked = Locked;
            this.MaxAutoRenew = MaxAutoRenew;
            this.MaxBillAttempts = MaxBillAttempts;
            this.MigrationPlan = MigrationPlan;
            this.MinimumTerm = MinimumTerm;
            this.Name = Name;
            this.PrimarySku = PrimarySku;
            this.ReactivationSku = ReactivationSku;
            this.RecurringSku = RecurringSku;
            this.RenewPeriod = RenewPeriod;
            this.RenewPeriodUnitOfTime = RenewPeriodUnitOfTime;
            this.SubscriptionId = SubscriptionId;
        }
        
        /// <summary>
        /// Gets or Sets AdditionalProperties
        /// </summary>
        [DataMember(Name="additional_properties", EmitDefaultValue=false)]
        public Dictionary<string, Property> AdditionalProperties { get; set; }


        /// <summary>
        /// Gets or Sets BillGraceDays
        /// </summary>
        [DataMember(Name="bill_grace_days", EmitDefaultValue=false)]
        public int? BillGraceDays { get; set; }

        /// <summary>
        /// Gets or Sets Consolidated
        /// </summary>
        [DataMember(Name="consolidated", EmitDefaultValue=false)]
        public bool? Consolidated { get; set; }

        /// <summary>
        /// Gets or Sets FirstBill
        /// </summary>
        [DataMember(Name="first_bill", EmitDefaultValue=false)]
        public int? FirstBill { get; set; }


        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LatePaymentSku
        /// </summary>
        [DataMember(Name="late_payment_sku", EmitDefaultValue=false)]
        public string LatePaymentSku { get; set; }

        /// <summary>
        /// Gets or Sets Locked
        /// </summary>
        [DataMember(Name="locked", EmitDefaultValue=false)]
        public bool? Locked { get; set; }

        /// <summary>
        /// Gets or Sets MaxAutoRenew
        /// </summary>
        [DataMember(Name="max_auto_renew", EmitDefaultValue=false)]
        public int? MaxAutoRenew { get; set; }

        /// <summary>
        /// Gets or Sets MaxBillAttempts
        /// </summary>
        [DataMember(Name="max_bill_attempts", EmitDefaultValue=false)]
        public int? MaxBillAttempts { get; set; }

        /// <summary>
        /// Gets or Sets MigrationPlan
        /// </summary>
        [DataMember(Name="migration_plan", EmitDefaultValue=false)]
        public string MigrationPlan { get; set; }

        /// <summary>
        /// Gets or Sets MinimumTerm
        /// </summary>
        [DataMember(Name="minimum_term", EmitDefaultValue=false)]
        public int? MinimumTerm { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PrimarySku
        /// </summary>
        [DataMember(Name="primary_sku", EmitDefaultValue=false)]
        public string PrimarySku { get; set; }

        /// <summary>
        /// Gets or Sets ReactivationSku
        /// </summary>
        [DataMember(Name="reactivation_sku", EmitDefaultValue=false)]
        public string ReactivationSku { get; set; }

        /// <summary>
        /// Gets or Sets RecurringSku
        /// </summary>
        [DataMember(Name="recurring_sku", EmitDefaultValue=false)]
        public string RecurringSku { get; set; }

        /// <summary>
        /// Gets or Sets RenewPeriod
        /// </summary>
        [DataMember(Name="renew_period", EmitDefaultValue=false)]
        public int? RenewPeriod { get; set; }


        /// <summary>
        /// Gets or Sets SubscriptionId
        /// </summary>
        [DataMember(Name="subscription_id", EmitDefaultValue=false)]
        public int? SubscriptionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPlan {\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  BillGraceDays: ").Append(BillGraceDays).Append("\n");
            sb.Append("  Consolidated: ").Append(Consolidated).Append("\n");
            sb.Append("  FirstBill: ").Append(FirstBill).Append("\n");
            sb.Append("  FirstBillUnitOfTime: ").Append(FirstBillUnitOfTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LatePaymentSku: ").Append(LatePaymentSku).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  MaxAutoRenew: ").Append(MaxAutoRenew).Append("\n");
            sb.Append("  MaxBillAttempts: ").Append(MaxBillAttempts).Append("\n");
            sb.Append("  MigrationPlan: ").Append(MigrationPlan).Append("\n");
            sb.Append("  MinimumTerm: ").Append(MinimumTerm).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PrimarySku: ").Append(PrimarySku).Append("\n");
            sb.Append("  ReactivationSku: ").Append(ReactivationSku).Append("\n");
            sb.Append("  RecurringSku: ").Append(RecurringSku).Append("\n");
            sb.Append("  RenewPeriod: ").Append(RenewPeriod).Append("\n");
            sb.Append("  RenewPeriodUnitOfTime: ").Append(RenewPeriodUnitOfTime).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionPlan);
        }

        /// <summary>
        /// Returns true if SubscriptionPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPlan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalProperties == input.AdditionalProperties ||
                    (this.AdditionalProperties != null &&
                    this.AdditionalProperties.SequenceEqual(input.AdditionalProperties))
                ) && 
                (
                    this.Availability == input.Availability ||
                    (this.Availability != null &&
                    this.Availability.Equals(input.Availability))
                ) && 
                (
                    this.BillGraceDays == input.BillGraceDays ||
                    (this.BillGraceDays != null &&
                    this.BillGraceDays.Equals(input.BillGraceDays))
                ) && 
                (
                    this.Consolidated == input.Consolidated ||
                    (this.Consolidated != null &&
                    this.Consolidated.Equals(input.Consolidated))
                ) && 
                (
                    this.FirstBill == input.FirstBill ||
                    (this.FirstBill != null &&
                    this.FirstBill.Equals(input.FirstBill))
                ) && 
                (
                    this.FirstBillUnitOfTime == input.FirstBillUnitOfTime ||
                    (this.FirstBillUnitOfTime != null &&
                    this.FirstBillUnitOfTime.Equals(input.FirstBillUnitOfTime))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LatePaymentSku == input.LatePaymentSku ||
                    (this.LatePaymentSku != null &&
                    this.LatePaymentSku.Equals(input.LatePaymentSku))
                ) && 
                (
                    this.Locked == input.Locked ||
                    (this.Locked != null &&
                    this.Locked.Equals(input.Locked))
                ) && 
                (
                    this.MaxAutoRenew == input.MaxAutoRenew ||
                    (this.MaxAutoRenew != null &&
                    this.MaxAutoRenew.Equals(input.MaxAutoRenew))
                ) && 
                (
                    this.MaxBillAttempts == input.MaxBillAttempts ||
                    (this.MaxBillAttempts != null &&
                    this.MaxBillAttempts.Equals(input.MaxBillAttempts))
                ) && 
                (
                    this.MigrationPlan == input.MigrationPlan ||
                    (this.MigrationPlan != null &&
                    this.MigrationPlan.Equals(input.MigrationPlan))
                ) && 
                (
                    this.MinimumTerm == input.MinimumTerm ||
                    (this.MinimumTerm != null &&
                    this.MinimumTerm.Equals(input.MinimumTerm))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PrimarySku == input.PrimarySku ||
                    (this.PrimarySku != null &&
                    this.PrimarySku.Equals(input.PrimarySku))
                ) && 
                (
                    this.ReactivationSku == input.ReactivationSku ||
                    (this.ReactivationSku != null &&
                    this.ReactivationSku.Equals(input.ReactivationSku))
                ) && 
                (
                    this.RecurringSku == input.RecurringSku ||
                    (this.RecurringSku != null &&
                    this.RecurringSku.Equals(input.RecurringSku))
                ) && 
                (
                    this.RenewPeriod == input.RenewPeriod ||
                    (this.RenewPeriod != null &&
                    this.RenewPeriod.Equals(input.RenewPeriod))
                ) && 
                (
                    this.RenewPeriodUnitOfTime == input.RenewPeriodUnitOfTime ||
                    (this.RenewPeriodUnitOfTime != null &&
                    this.RenewPeriodUnitOfTime.Equals(input.RenewPeriodUnitOfTime))
                ) && 
                (
                    this.SubscriptionId == input.SubscriptionId ||
                    (this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(input.SubscriptionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalProperties != null)
                    hashCode = hashCode * 59 + this.AdditionalProperties.GetHashCode();
                if (this.Availability != null)
                    hashCode = hashCode * 59 + this.Availability.GetHashCode();
                if (this.BillGraceDays != null)
                    hashCode = hashCode * 59 + this.BillGraceDays.GetHashCode();
                if (this.Consolidated != null)
                    hashCode = hashCode * 59 + this.Consolidated.GetHashCode();
                if (this.FirstBill != null)
                    hashCode = hashCode * 59 + this.FirstBill.GetHashCode();
                if (this.FirstBillUnitOfTime != null)
                    hashCode = hashCode * 59 + this.FirstBillUnitOfTime.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LatePaymentSku != null)
                    hashCode = hashCode * 59 + this.LatePaymentSku.GetHashCode();
                if (this.Locked != null)
                    hashCode = hashCode * 59 + this.Locked.GetHashCode();
                if (this.MaxAutoRenew != null)
                    hashCode = hashCode * 59 + this.MaxAutoRenew.GetHashCode();
                if (this.MaxBillAttempts != null)
                    hashCode = hashCode * 59 + this.MaxBillAttempts.GetHashCode();
                if (this.MigrationPlan != null)
                    hashCode = hashCode * 59 + this.MigrationPlan.GetHashCode();
                if (this.MinimumTerm != null)
                    hashCode = hashCode * 59 + this.MinimumTerm.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PrimarySku != null)
                    hashCode = hashCode * 59 + this.PrimarySku.GetHashCode();
                if (this.ReactivationSku != null)
                    hashCode = hashCode * 59 + this.ReactivationSku.GetHashCode();
                if (this.RecurringSku != null)
                    hashCode = hashCode * 59 + this.RecurringSku.GetHashCode();
                if (this.RenewPeriod != null)
                    hashCode = hashCode * 59 + this.RenewPeriod.GetHashCode();
                if (this.RenewPeriodUnitOfTime != null)
                    hashCode = hashCode * 59 + this.RenewPeriodUnitOfTime.GetHashCode();
                if (this.SubscriptionId != null)
                    hashCode = hashCode * 59 + this.SubscriptionId.GetHashCode();
                return hashCode;
            }
        }

    }

}
