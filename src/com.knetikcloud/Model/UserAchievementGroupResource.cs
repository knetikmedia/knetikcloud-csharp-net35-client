/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// UserAchievementGroupResource
    /// </summary>
    [DataContract]
    public partial class UserAchievementGroupResource :  IEquatable<UserAchievementGroupResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAchievementGroupResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserAchievementGroupResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAchievementGroupResource" /> class.
        /// </summary>
        /// <param name="Achievements">The list of achievements associated with the group (required).</param>
        /// <param name="GroupName">The name of the group.  If used by Leveling, this will represent the level name (required).</param>
        /// <param name="Progress">The current progress of the user on the group (required).</param>
        /// <param name="UserId">The id of the user whose progress is being tracked (required).</param>
        public UserAchievementGroupResource(List<UserAchievementResource> Achievements = default(List<UserAchievementResource>), string GroupName = default(string), int? Progress = default(int?), int? UserId = default(int?))
        {
            // to ensure "Achievements" is required (not null)
            if (Achievements == null)
            {
                throw new InvalidDataException("Achievements is a required property for UserAchievementGroupResource and cannot be null");
            }
            else
            {
                this.Achievements = Achievements;
            }
            // to ensure "GroupName" is required (not null)
            if (GroupName == null)
            {
                throw new InvalidDataException("GroupName is a required property for UserAchievementGroupResource and cannot be null");
            }
            else
            {
                this.GroupName = GroupName;
            }
            // to ensure "Progress" is required (not null)
            if (Progress == null)
            {
                throw new InvalidDataException("Progress is a required property for UserAchievementGroupResource and cannot be null");
            }
            else
            {
                this.Progress = Progress;
            }
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for UserAchievementGroupResource and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
        }
        
        /// <summary>
        /// The list of achievements associated with the group
        /// </summary>
        /// <value>The list of achievements associated with the group</value>
        [DataMember(Name="achievements", EmitDefaultValue=false)]
        public List<UserAchievementResource> Achievements { get; set; }

        /// <summary>
        /// The name of the group.  If used by Leveling, this will represent the level name
        /// </summary>
        /// <value>The name of the group.  If used by Leveling, this will represent the level name</value>
        [DataMember(Name="group_name", EmitDefaultValue=false)]
        public string GroupName { get; set; }

        /// <summary>
        /// The id of the achievement progress
        /// </summary>
        /// <value>The id of the achievement progress</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// The current progress of the user on the group
        /// </summary>
        /// <value>The current progress of the user on the group</value>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public int? Progress { get; set; }

        /// <summary>
        /// The id of the user whose progress is being tracked
        /// </summary>
        /// <value>The id of the user whose progress is being tracked</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAchievementGroupResource {\n");
            sb.Append("  Achievements: ").Append(Achievements).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserAchievementGroupResource);
        }

        /// <summary>
        /// Returns true if UserAchievementGroupResource instances are equal
        /// </summary>
        /// <param name="input">Instance of UserAchievementGroupResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAchievementGroupResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Achievements == input.Achievements ||
                    (this.Achievements != null &&
                    this.Achievements.SequenceEqual(input.Achievements))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Progress == input.Progress ||
                    (this.Progress != null &&
                    this.Progress.Equals(input.Progress))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Achievements != null)
                    hashCode = hashCode * 59 + this.Achievements.GetHashCode();
                if (this.GroupName != null)
                    hashCode = hashCode * 59 + this.GroupName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Progress != null)
                    hashCode = hashCode * 59 + this.Progress.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

    }

}
