/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// PermissionResource
    /// </summary>
    [DataContract]
    public partial class PermissionResource :  IEquatable<PermissionResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PermissionResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionResource" /> class.
        /// </summary>
        /// <param name="Description">The description of the permission.</param>
        /// <param name="Locked">Whether a permission is locked from being deleted.</param>
        /// <param name="Name">The name of the permission used for display purposes (required).</param>
        /// <param name="Parent">The name of the parent of the permission.</param>
        /// <param name="Permission">The keyword that defines the permission (required).</param>
        public PermissionResource(string Description = default(string), bool? Locked = default(bool?), string Name = default(string), string Parent = default(string), string Permission = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for PermissionResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Permission" is required (not null)
            if (Permission == null)
            {
                throw new InvalidDataException("Permission is a required property for PermissionResource and cannot be null");
            }
            else
            {
                this.Permission = Permission;
            }
            this.Description = Description;
            this.Locked = Locked;
            this.Parent = Parent;
        }
        
        /// <summary>
        /// The date the permission was added. Unix timestamp in seconds
        /// </summary>
        /// <value>The date the permission was added. Unix timestamp in seconds</value>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public long? CreatedDate { get; private set; }

        /// <summary>
        /// The description of the permission
        /// </summary>
        /// <value>The description of the permission</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Whether a permission is locked from being deleted
        /// </summary>
        /// <value>Whether a permission is locked from being deleted</value>
        [DataMember(Name="locked", EmitDefaultValue=false)]
        public bool? Locked { get; set; }

        /// <summary>
        /// The name of the permission used for display purposes
        /// </summary>
        /// <value>The name of the permission used for display purposes</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The name of the parent of the permission
        /// </summary>
        /// <value>The name of the parent of the permission</value>
        [DataMember(Name="parent", EmitDefaultValue=false)]
        public string Parent { get; set; }

        /// <summary>
        /// The keyword that defines the permission
        /// </summary>
        /// <value>The keyword that defines the permission</value>
        [DataMember(Name="permission", EmitDefaultValue=false)]
        public string Permission { get; set; }

        /// <summary>
        /// The date the permission was updated. Unix timestamp in seconds
        /// </summary>
        /// <value>The date the permission was updated. Unix timestamp in seconds</value>
        [DataMember(Name="updated_date", EmitDefaultValue=false)]
        public long? UpdatedDate { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PermissionResource {\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Permission: ").Append(Permission).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PermissionResource);
        }

        /// <summary>
        /// Returns true if PermissionResource instances are equal
        /// </summary>
        /// <param name="input">Instance of PermissionResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PermissionResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Locked == input.Locked ||
                    (this.Locked != null &&
                    this.Locked.Equals(input.Locked))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Permission == input.Permission ||
                    (this.Permission != null &&
                    this.Permission.Equals(input.Permission))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Locked != null)
                    hashCode = hashCode * 59 + this.Locked.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Parent != null)
                    hashCode = hashCode * 59 + this.Parent.GetHashCode();
                if (this.Permission != null)
                    hashCode = hashCode * 59 + this.Permission.GetHashCode();
                if (this.UpdatedDate != null)
                    hashCode = hashCode * 59 + this.UpdatedDate.GetHashCode();
                return hashCode;
            }
        }

    }

}
