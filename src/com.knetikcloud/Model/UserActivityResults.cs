/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// UserActivityResults
    /// </summary>
    [DataContract]
    public partial class UserActivityResults :  IEquatable<UserActivityResults>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserActivityResults" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserActivityResults() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserActivityResults" /> class.
        /// </summary>
        /// <param name="CurrencyRewards">Any currency rewarded to this user.</param>
        /// <param name="ItemRewards">Any items rewarded to this user.</param>
        /// <param name="Rank">The position of the user in the leaderboard. Null means non-compete or disqualification.</param>
        /// <param name="Score">The raw score in this leaderboard. Null means non-compete or disqualification.</param>
        /// <param name="Tags">Any tags for the metric. Each unique tag will translate into a unique leaderboard. Maximum 10 tags and 50 characters each.</param>
        /// <param name="UpdatedDate">The date this score was recorded or updated. Unix timestamp in seconds.</param>
        /// <param name="User">The player for this entry (required).</param>
        public UserActivityResults(List<RewardCurrencyResource> CurrencyRewards = default(List<RewardCurrencyResource>), List<RewardItemResource> ItemRewards = default(List<RewardItemResource>), long? Rank = default(long?), long? Score = default(long?), List<string> Tags = default(List<string>), long? UpdatedDate = default(long?), SimpleUserResource User = default(SimpleUserResource))
        {
            // to ensure "User" is required (not null)
            if (User == null)
            {
                throw new InvalidDataException("User is a required property for UserActivityResults and cannot be null");
            }
            else
            {
                this.User = User;
            }
            this.CurrencyRewards = CurrencyRewards;
            this.ItemRewards = ItemRewards;
            this.Rank = Rank;
            this.Score = Score;
            this.Tags = Tags;
            this.UpdatedDate = UpdatedDate;
        }
        
        /// <summary>
        /// Any currency rewarded to this user
        /// </summary>
        /// <value>Any currency rewarded to this user</value>
        [DataMember(Name="currency_rewards", EmitDefaultValue=false)]
        public List<RewardCurrencyResource> CurrencyRewards { get; set; }

        /// <summary>
        /// Any items rewarded to this user
        /// </summary>
        /// <value>Any items rewarded to this user</value>
        [DataMember(Name="item_rewards", EmitDefaultValue=false)]
        public List<RewardItemResource> ItemRewards { get; set; }

        /// <summary>
        /// The position of the user in the leaderboard. Null means non-compete or disqualification
        /// </summary>
        /// <value>The position of the user in the leaderboard. Null means non-compete or disqualification</value>
        [DataMember(Name="rank", EmitDefaultValue=false)]
        public long? Rank { get; set; }

        /// <summary>
        /// The raw score in this leaderboard. Null means non-compete or disqualification
        /// </summary>
        /// <value>The raw score in this leaderboard. Null means non-compete or disqualification</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public long? Score { get; set; }

        /// <summary>
        /// Any tags for the metric. Each unique tag will translate into a unique leaderboard. Maximum 10 tags and 50 characters each
        /// </summary>
        /// <value>Any tags for the metric. Each unique tag will translate into a unique leaderboard. Maximum 10 tags and 50 characters each</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// The number of users tied at this rank, including this user. 1 means no tie
        /// </summary>
        /// <value>The number of users tied at this rank, including this user. 1 means no tie</value>
        [DataMember(Name="ties", EmitDefaultValue=false)]
        public int? Ties { get; private set; }

        /// <summary>
        /// The date this score was recorded or updated. Unix timestamp in seconds
        /// </summary>
        /// <value>The date this score was recorded or updated. Unix timestamp in seconds</value>
        [DataMember(Name="updated_date", EmitDefaultValue=false)]
        public long? UpdatedDate { get; set; }

        /// <summary>
        /// The player for this entry
        /// </summary>
        /// <value>The player for this entry</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public SimpleUserResource User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserActivityResults {\n");
            sb.Append("  CurrencyRewards: ").Append(CurrencyRewards).Append("\n");
            sb.Append("  ItemRewards: ").Append(ItemRewards).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Ties: ").Append(Ties).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserActivityResults);
        }

        /// <summary>
        /// Returns true if UserActivityResults instances are equal
        /// </summary>
        /// <param name="input">Instance of UserActivityResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserActivityResults input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyRewards == input.CurrencyRewards ||
                    (this.CurrencyRewards != null &&
                    this.CurrencyRewards.SequenceEqual(input.CurrencyRewards))
                ) && 
                (
                    this.ItemRewards == input.ItemRewards ||
                    (this.ItemRewards != null &&
                    this.ItemRewards.SequenceEqual(input.ItemRewards))
                ) && 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Tags == input.Tags ||
                    (this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags))
                ) && 
                (
                    this.Ties == input.Ties ||
                    (this.Ties != null &&
                    this.Ties.Equals(input.Ties))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyRewards != null)
                    hashCode = hashCode * 59 + this.CurrencyRewards.GetHashCode();
                if (this.ItemRewards != null)
                    hashCode = hashCode * 59 + this.ItemRewards.GetHashCode();
                if (this.Rank != null)
                    hashCode = hashCode * 59 + this.Rank.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Ties != null)
                    hashCode = hashCode * 59 + this.Ties.GetHashCode();
                if (this.UpdatedDate != null)
                    hashCode = hashCode * 59 + this.UpdatedDate.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

    }

}
