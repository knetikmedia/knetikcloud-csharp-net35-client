/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// PaymentMethodTypeResource
    /// </summary>
    [DataContract]
    public partial class PaymentMethodTypeResource :  IEquatable<PaymentMethodTypeResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodTypeResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentMethodTypeResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethodTypeResource" /> class.
        /// </summary>
        /// <param name="Id">The id of the payment method type (required).</param>
        /// <param name="InvoiceProcessingHours">The maximum timelimit in hours for an invoice in the processing status while waiting on this payment method type. Defaults to the global config invoice.processing_expiration_hours if null.</param>
        /// <param name="Name">The name of the payment method type (required).</param>
        /// <param name="SupportsCapture">Whether the payment handler supports the authorize and capture flow.</param>
        /// <param name="SupportsPartial">Whether the payment handler supports paying for part of an invoice, rather than the full grand_total.</param>
        /// <param name="SupportsRebill">Whether the payment handler supports rebilling the method later (for saved payments or subscriptions).</param>
        /// <param name="SupportsRefunds">Whether the payment handler supports refunding.</param>
        public PaymentMethodTypeResource(int? Id = default(int?), int? InvoiceProcessingHours = default(int?), string Name = default(string), bool? SupportsCapture = default(bool?), bool? SupportsPartial = default(bool?), bool? SupportsRebill = default(bool?), bool? SupportsRefunds = default(bool?))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for PaymentMethodTypeResource and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for PaymentMethodTypeResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.InvoiceProcessingHours = InvoiceProcessingHours;
            this.SupportsCapture = SupportsCapture;
            this.SupportsPartial = SupportsPartial;
            this.SupportsRebill = SupportsRebill;
            this.SupportsRefunds = SupportsRefunds;
        }
        
        /// <summary>
        /// The id of the payment method type
        /// </summary>
        /// <value>The id of the payment method type</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The maximum timelimit in hours for an invoice in the processing status while waiting on this payment method type. Defaults to the global config invoice.processing_expiration_hours if null
        /// </summary>
        /// <value>The maximum timelimit in hours for an invoice in the processing status while waiting on this payment method type. Defaults to the global config invoice.processing_expiration_hours if null</value>
        [DataMember(Name="invoice_processing_hours", EmitDefaultValue=false)]
        public int? InvoiceProcessingHours { get; set; }

        /// <summary>
        /// The name of the payment method type
        /// </summary>
        /// <value>The name of the payment method type</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the payment handler supports the authorize and capture flow
        /// </summary>
        /// <value>Whether the payment handler supports the authorize and capture flow</value>
        [DataMember(Name="supports_capture", EmitDefaultValue=false)]
        public bool? SupportsCapture { get; set; }

        /// <summary>
        /// Whether the payment handler supports paying for part of an invoice, rather than the full grand_total
        /// </summary>
        /// <value>Whether the payment handler supports paying for part of an invoice, rather than the full grand_total</value>
        [DataMember(Name="supports_partial", EmitDefaultValue=false)]
        public bool? SupportsPartial { get; set; }

        /// <summary>
        /// Whether the payment handler supports rebilling the method later (for saved payments or subscriptions)
        /// </summary>
        /// <value>Whether the payment handler supports rebilling the method later (for saved payments or subscriptions)</value>
        [DataMember(Name="supports_rebill", EmitDefaultValue=false)]
        public bool? SupportsRebill { get; set; }

        /// <summary>
        /// Whether the payment handler supports refunding
        /// </summary>
        /// <value>Whether the payment handler supports refunding</value>
        [DataMember(Name="supports_refunds", EmitDefaultValue=false)]
        public bool? SupportsRefunds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentMethodTypeResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceProcessingHours: ").Append(InvoiceProcessingHours).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SupportsCapture: ").Append(SupportsCapture).Append("\n");
            sb.Append("  SupportsPartial: ").Append(SupportsPartial).Append("\n");
            sb.Append("  SupportsRebill: ").Append(SupportsRebill).Append("\n");
            sb.Append("  SupportsRefunds: ").Append(SupportsRefunds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentMethodTypeResource);
        }

        /// <summary>
        /// Returns true if PaymentMethodTypeResource instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentMethodTypeResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethodTypeResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InvoiceProcessingHours == input.InvoiceProcessingHours ||
                    (this.InvoiceProcessingHours != null &&
                    this.InvoiceProcessingHours.Equals(input.InvoiceProcessingHours))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SupportsCapture == input.SupportsCapture ||
                    (this.SupportsCapture != null &&
                    this.SupportsCapture.Equals(input.SupportsCapture))
                ) && 
                (
                    this.SupportsPartial == input.SupportsPartial ||
                    (this.SupportsPartial != null &&
                    this.SupportsPartial.Equals(input.SupportsPartial))
                ) && 
                (
                    this.SupportsRebill == input.SupportsRebill ||
                    (this.SupportsRebill != null &&
                    this.SupportsRebill.Equals(input.SupportsRebill))
                ) && 
                (
                    this.SupportsRefunds == input.SupportsRefunds ||
                    (this.SupportsRefunds != null &&
                    this.SupportsRefunds.Equals(input.SupportsRefunds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InvoiceProcessingHours != null)
                    hashCode = hashCode * 59 + this.InvoiceProcessingHours.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SupportsCapture != null)
                    hashCode = hashCode * 59 + this.SupportsCapture.GetHashCode();
                if (this.SupportsPartial != null)
                    hashCode = hashCode * 59 + this.SupportsPartial.GetHashCode();
                if (this.SupportsRebill != null)
                    hashCode = hashCode * 59 + this.SupportsRebill.GetHashCode();
                if (this.SupportsRefunds != null)
                    hashCode = hashCode * 59 + this.SupportsRefunds.GetHashCode();
                return hashCode;
            }
        }

    }

}
