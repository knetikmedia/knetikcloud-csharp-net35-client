/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// BreEventLog
    /// </summary>
    [DataContract]
    public partial class BreEventLog :  IEquatable<BreEventLog>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BreEventLog" /> class.
        /// </summary>
        /// <param name="Parameters">The event paramters of the BRE event log.</param>
        /// <param name="Rules">The rules of the BRE event log.</param>
        public BreEventLog(Object Parameters = default(Object), List<BreRuleLog> Rules = default(List<BreRuleLog>))
        {
            this.Parameters = Parameters;
            this.Rules = Rules;
        }
        
        /// <summary>
        /// The customer of the BRE event log
        /// </summary>
        /// <value>The customer of the BRE event log</value>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public string Customer { get; private set; }

        /// <summary>
        /// The event id of the BRE event log
        /// </summary>
        /// <value>The event id of the BRE event log</value>
        [DataMember(Name="event_id", EmitDefaultValue=false)]
        public string EventId { get; private set; }

        /// <summary>
        /// The event name of the BRE event log
        /// </summary>
        /// <value>The event name of the BRE event log</value>
        [DataMember(Name="event_name", EmitDefaultValue=false)]
        public string EventName { get; private set; }

        /// <summary>
        /// The event start date of the BRE event log
        /// </summary>
        /// <value>The event start date of the BRE event log</value>
        [DataMember(Name="event_start_date", EmitDefaultValue=false)]
        public long? EventStartDate { get; private set; }

        /// <summary>
        /// The id of the BRE event log
        /// </summary>
        /// <value>The id of the BRE event log</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// The event paramters of the BRE event log
        /// </summary>
        /// <value>The event paramters of the BRE event log</value>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public Object Parameters { get; set; }

        /// <summary>
        /// The rules of the BRE event log
        /// </summary>
        /// <value>The rules of the BRE event log</value>
        [DataMember(Name="rules", EmitDefaultValue=false)]
        public List<BreRuleLog> Rules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BreEventLog {\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  EventStartDate: ").Append(EventStartDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BreEventLog);
        }

        /// <summary>
        /// Returns true if BreEventLog instances are equal
        /// </summary>
        /// <param name="input">Instance of BreEventLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BreEventLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.EventStartDate == input.EventStartDate ||
                    (this.EventStartDate != null &&
                    this.EventStartDate.Equals(input.EventStartDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                ) && 
                (
                    this.Rules == input.Rules ||
                    (this.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Customer != null)
                    hashCode = hashCode * 59 + this.Customer.GetHashCode();
                if (this.EventId != null)
                    hashCode = hashCode * 59 + this.EventId.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.EventStartDate != null)
                    hashCode = hashCode * 59 + this.EventStartDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.Rules != null)
                    hashCode = hashCode * 59 + this.Rules.GetHashCode();
                return hashCode;
            }
        }

    }

}
