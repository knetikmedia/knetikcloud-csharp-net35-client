/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// ActivityResource
    /// </summary>
    [DataContract]
    public partial class ActivityResource :  IEquatable<ActivityResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivityResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityResource" /> class.
        /// </summary>
        /// <param name="Entitlements">The list of items that can be used for entitlement (wager amounts/etc).</param>
        /// <param name="Launch">Details about how to launch the activity.</param>
        /// <param name="LongDescription">The user friendly name of that resource. Defaults to blank string.</param>
        /// <param name="Name">The user friendly name of that resource (required).</param>
        /// <param name="RewardSet">The rewards to give at the end of each occurence of the activity. When creating/updating only id is used. Reward set must be pre-existing.</param>
        /// <param name="Settings">The list of settings and their options available for this activity. Not populated when getting listing.</param>
        /// <param name="ShortDescription">The user friendly name of that resource. Defaults to blank string.</param>
        /// <param name="Template">Whether this activity is a template for other activities. Default: false.</param>
        /// <param name="Type">The type of the activity (required).</param>
        /// <param name="UniqueKey">The unique key (for static reference in code) of the activity.</param>
        public ActivityResource(List<ActivityEntitlementResource> Entitlements = default(List<ActivityEntitlementResource>), string Launch = default(string), string LongDescription = default(string), string Name = default(string), RewardSetResource RewardSet = default(RewardSetResource), List<AvailableSettingResource> Settings = default(List<AvailableSettingResource>), string ShortDescription = default(string), bool? Template = default(bool?), string Type = default(string), string UniqueKey = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ActivityResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for ActivityResource and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.Entitlements = Entitlements;
            this.Launch = Launch;
            this.LongDescription = LongDescription;
            this.RewardSet = RewardSet;
            this.Settings = Settings;
            this.ShortDescription = ShortDescription;
            this.Template = Template;
            this.UniqueKey = UniqueKey;
        }
        
        /// <summary>
        /// The date/time this resource was created in seconds since unix epoch
        /// </summary>
        /// <value>The date/time this resource was created in seconds since unix epoch</value>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public long? CreatedDate { get; private set; }
        /// <summary>
        /// The list of items that can be used for entitlement (wager amounts/etc)
        /// </summary>
        /// <value>The list of items that can be used for entitlement (wager amounts/etc)</value>
        [DataMember(Name="entitlements", EmitDefaultValue=false)]
        public List<ActivityEntitlementResource> Entitlements { get; set; }
        /// <summary>
        /// The unique ID for that resource
        /// </summary>
        /// <value>The unique ID for that resource</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; private set; }
        /// <summary>
        /// Details about how to launch the activity
        /// </summary>
        /// <value>Details about how to launch the activity</value>
        [DataMember(Name="launch", EmitDefaultValue=false)]
        public string Launch { get; set; }
        /// <summary>
        /// The user friendly name of that resource. Defaults to blank string
        /// </summary>
        /// <value>The user friendly name of that resource. Defaults to blank string</value>
        [DataMember(Name="long_description", EmitDefaultValue=false)]
        public string LongDescription { get; set; }
        /// <summary>
        /// The user friendly name of that resource
        /// </summary>
        /// <value>The user friendly name of that resource</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The rewards to give at the end of each occurence of the activity. When creating/updating only id is used. Reward set must be pre-existing
        /// </summary>
        /// <value>The rewards to give at the end of each occurence of the activity. When creating/updating only id is used. Reward set must be pre-existing</value>
        [DataMember(Name="reward_set", EmitDefaultValue=false)]
        public RewardSetResource RewardSet { get; set; }
        /// <summary>
        /// The list of settings and their options available for this activity. Not populated when getting listing
        /// </summary>
        /// <value>The list of settings and their options available for this activity. Not populated when getting listing</value>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public List<AvailableSettingResource> Settings { get; set; }
        /// <summary>
        /// The user friendly name of that resource. Defaults to blank string
        /// </summary>
        /// <value>The user friendly name of that resource. Defaults to blank string</value>
        [DataMember(Name="short_description", EmitDefaultValue=false)]
        public string ShortDescription { get; set; }
        /// <summary>
        /// Whether this activity is a template for other activities. Default: false
        /// </summary>
        /// <value>Whether this activity is a template for other activities. Default: false</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public bool? Template { get; set; }
        /// <summary>
        /// The type of the activity
        /// </summary>
        /// <value>The type of the activity</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// The unique key (for static reference in code) of the activity
        /// </summary>
        /// <value>The unique key (for static reference in code) of the activity</value>
        [DataMember(Name="unique_key", EmitDefaultValue=false)]
        public string UniqueKey { get; set; }
        /// <summary>
        /// The date/time this resource was last updated in seconds since unix epoch
        /// </summary>
        /// <value>The date/time this resource was last updated in seconds since unix epoch</value>
        [DataMember(Name="updated_date", EmitDefaultValue=false)]
        public long? UpdatedDate { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityResource {\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Entitlements: ").Append(Entitlements).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Launch: ").Append(Launch).Append("\n");
            sb.Append("  LongDescription: ").Append(LongDescription).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RewardSet: ").Append(RewardSet).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UniqueKey: ").Append(UniqueKey).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ActivityResource);
        }

        /// <summary>
        /// Returns true if ActivityResource instances are equal
        /// </summary>
        /// <param name="other">Instance of ActivityResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.Entitlements == other.Entitlements ||
                    this.Entitlements != null &&
                    this.Entitlements.SequenceEqual(other.Entitlements)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Launch == other.Launch ||
                    this.Launch != null &&
                    this.Launch.Equals(other.Launch)
                ) && 
                (
                    this.LongDescription == other.LongDescription ||
                    this.LongDescription != null &&
                    this.LongDescription.Equals(other.LongDescription)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.RewardSet == other.RewardSet ||
                    this.RewardSet != null &&
                    this.RewardSet.Equals(other.RewardSet)
                ) && 
                (
                    this.Settings == other.Settings ||
                    this.Settings != null &&
                    this.Settings.SequenceEqual(other.Settings)
                ) && 
                (
                    this.ShortDescription == other.ShortDescription ||
                    this.ShortDescription != null &&
                    this.ShortDescription.Equals(other.ShortDescription)
                ) && 
                (
                    this.Template == other.Template ||
                    this.Template != null &&
                    this.Template.Equals(other.Template)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.UniqueKey == other.UniqueKey ||
                    this.UniqueKey != null &&
                    this.UniqueKey.Equals(other.UniqueKey)
                ) && 
                (
                    this.UpdatedDate == other.UpdatedDate ||
                    this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(other.UpdatedDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.Entitlements != null)
                    hash = hash * 59 + this.Entitlements.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Launch != null)
                    hash = hash * 59 + this.Launch.GetHashCode();
                if (this.LongDescription != null)
                    hash = hash * 59 + this.LongDescription.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.RewardSet != null)
                    hash = hash * 59 + this.RewardSet.GetHashCode();
                if (this.Settings != null)
                    hash = hash * 59 + this.Settings.GetHashCode();
                if (this.ShortDescription != null)
                    hash = hash * 59 + this.ShortDescription.GetHashCode();
                if (this.Template != null)
                    hash = hash * 59 + this.Template.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.UniqueKey != null)
                    hash = hash * 59 + this.UniqueKey.GetHashCode();
                if (this.UpdatedDate != null)
                    hash = hash * 59 + this.UpdatedDate.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
