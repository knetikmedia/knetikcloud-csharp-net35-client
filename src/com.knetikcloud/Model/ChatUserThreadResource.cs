/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// ChatUserThreadResource
    /// </summary>
    [DataContract]
    public partial class ChatUserThreadResource :  IEquatable<ChatUserThreadResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatUserThreadResource" /> class.
        /// </summary>
        /// <param name="Thread">The details about the thread.</param>
        /// <param name="UserId">The id of the user.</param>
        public ChatUserThreadResource(ChatThreadResource Thread = default(ChatThreadResource), int? UserId = default(int?))
        {
            this.Thread = Thread;
            this.UserId = UserId;
        }
        
        /// <summary>
        /// The date the user thread was created
        /// </summary>
        /// <value>The date the user thread was created</value>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public long? CreatedDate { get; private set; }

        /// <summary>
        /// The number of messages read in the thread
        /// </summary>
        /// <value>The number of messages read in the thread</value>
        [DataMember(Name="read_count", EmitDefaultValue=false)]
        public int? ReadCount { get; private set; }

        /// <summary>
        /// The details about the thread
        /// </summary>
        /// <value>The details about the thread</value>
        [DataMember(Name="thread", EmitDefaultValue=false)]
        public ChatThreadResource Thread { get; set; }

        /// <summary>
        /// The id of the thread
        /// </summary>
        /// <value>The id of the thread</value>
        [DataMember(Name="thread_id", EmitDefaultValue=false)]
        public string ThreadId { get; private set; }

        /// <summary>
        /// The date the user thread was updated
        /// </summary>
        /// <value>The date the user thread was updated</value>
        [DataMember(Name="updated_date", EmitDefaultValue=false)]
        public long? UpdatedDate { get; private set; }

        /// <summary>
        /// The id of the user
        /// </summary>
        /// <value>The id of the user</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChatUserThreadResource {\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ReadCount: ").Append(ReadCount).Append("\n");
            sb.Append("  Thread: ").Append(Thread).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChatUserThreadResource);
        }

        /// <summary>
        /// Returns true if ChatUserThreadResource instances are equal
        /// </summary>
        /// <param name="input">Instance of ChatUserThreadResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChatUserThreadResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.ReadCount == input.ReadCount ||
                    (this.ReadCount != null &&
                    this.ReadCount.Equals(input.ReadCount))
                ) && 
                (
                    this.Thread == input.Thread ||
                    (this.Thread != null &&
                    this.Thread.Equals(input.Thread))
                ) && 
                (
                    this.ThreadId == input.ThreadId ||
                    (this.ThreadId != null &&
                    this.ThreadId.Equals(input.ThreadId))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.ReadCount != null)
                    hashCode = hashCode * 59 + this.ReadCount.GetHashCode();
                if (this.Thread != null)
                    hashCode = hashCode * 59 + this.Thread.GetHashCode();
                if (this.ThreadId != null)
                    hashCode = hashCode * 59 + this.ThreadId.GetHashCode();
                if (this.UpdatedDate != null)
                    hashCode = hashCode * 59 + this.UpdatedDate.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

    }

}
