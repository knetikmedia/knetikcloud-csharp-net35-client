/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// TemplatedEmail
    /// </summary>
    [DataContract]
    public partial class TemplatedEmail :  IEquatable<TemplatedEmail>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatedEmail" /> class.
        /// </summary>
        /// <param name="ExternalTemplateId">The external template ID used by the email provider.</param>
        /// <param name="TemplateData">The map of data used by the template.</param>
        public TemplatedEmail(string ExternalTemplateId = default(string), Object TemplateData = default(Object))
        {
            this.ExternalTemplateId = ExternalTemplateId;
            this.TemplateData = TemplateData;
        }
        
        /// <summary>
        /// The external template ID used by the email provider
        /// </summary>
        /// <value>The external template ID used by the email provider</value>
        [DataMember(Name="external_template_id", EmitDefaultValue=false)]
        public string ExternalTemplateId { get; set; }

        /// <summary>
        /// The map of data used by the template
        /// </summary>
        /// <value>The map of data used by the template</value>
        [DataMember(Name="template_data", EmitDefaultValue=false)]
        public Object TemplateData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TemplatedEmail {\n");
            sb.Append("  ExternalTemplateId: ").Append(ExternalTemplateId).Append("\n");
            sb.Append("  TemplateData: ").Append(TemplateData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemplatedEmail);
        }

        /// <summary>
        /// Returns true if TemplatedEmail instances are equal
        /// </summary>
        /// <param name="input">Instance of TemplatedEmail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemplatedEmail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExternalTemplateId == input.ExternalTemplateId ||
                    (this.ExternalTemplateId != null &&
                    this.ExternalTemplateId.Equals(input.ExternalTemplateId))
                ) && 
                (
                    this.TemplateData == input.TemplateData ||
                    (this.TemplateData != null &&
                    this.TemplateData.Equals(input.TemplateData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExternalTemplateId != null)
                    hashCode = hashCode * 59 + this.ExternalTemplateId.GetHashCode();
                if (this.TemplateData != null)
                    hashCode = hashCode * 59 + this.TemplateData.GetHashCode();
                return hashCode;
            }
        }

    }

}
