/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// BatchResult
    /// </summary>
    [DataContract]
    public partial class BatchResult :  IEquatable<BatchResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchResult" /> class.
        /// </summary>
        /// <param name="BatchReturn">List of batch responses.  Returns in the order requested.</param>
        public BatchResult(List<BatchReturn> BatchReturn = default(List<BatchReturn>))
        {
            this.BatchReturn = BatchReturn;
        }
        
        /// <summary>
        /// List of batch responses.  Returns in the order requested
        /// </summary>
        /// <value>List of batch responses.  Returns in the order requested</value>
        [DataMember(Name="batch_return", EmitDefaultValue=false)]
        public List<BatchReturn> BatchReturn { get; set; }

        /// <summary>
        /// The date the batch call started processing
        /// </summary>
        /// <value>The date the batch call started processing</value>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public long? CreatedDate { get; private set; }

        /// <summary>
        /// The token to use at the /batch/{token} endpoint if the request times out
        /// </summary>
        /// <value>The token to use at the /batch/{token} endpoint if the request times out</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// The date the batch call finished processing
        /// </summary>
        /// <value>The date the batch call finished processing</value>
        [DataMember(Name="updated_date", EmitDefaultValue=false)]
        public long? UpdatedDate { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchResult {\n");
            sb.Append("  BatchReturn: ").Append(BatchReturn).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchResult);
        }

        /// <summary>
        /// Returns true if BatchResult instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BatchReturn == input.BatchReturn ||
                    (this.BatchReturn != null &&
                    this.BatchReturn.SequenceEqual(input.BatchReturn))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BatchReturn != null)
                    hashCode = hashCode * 59 + this.BatchReturn.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UpdatedDate != null)
                    hashCode = hashCode * 59 + this.UpdatedDate.GetHashCode();
                return hashCode;
            }
        }

    }

}
