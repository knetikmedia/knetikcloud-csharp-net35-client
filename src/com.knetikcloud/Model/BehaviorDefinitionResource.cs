/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// BehaviorDefinitionResource
    /// </summary>
    [DataContract]
    public partial class BehaviorDefinitionResource :  IEquatable<BehaviorDefinitionResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BehaviorDefinitionResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BehaviorDefinitionResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BehaviorDefinitionResource" /> class.
        /// </summary>
        /// <param name="Description">Description of the behavior.</param>
        /// <param name="PrerequisiteBehaviors">Pre-requisite behaviors that an item must have in order to also have this behavior.</param>
        /// <param name="Properties">Configurable properties of the behavior (required).</param>
        /// <param name="TypeHint">The behavior type (required).</param>
        public BehaviorDefinitionResource(string Description = default(string), List<Behavior> PrerequisiteBehaviors = default(List<Behavior>), List<PropertyFieldResource> Properties = default(List<PropertyFieldResource>), string TypeHint = default(string))
        {
            // to ensure "Properties" is required (not null)
            if (Properties == null)
            {
                throw new InvalidDataException("Properties is a required property for BehaviorDefinitionResource and cannot be null");
            }
            else
            {
                this.Properties = Properties;
            }
            // to ensure "TypeHint" is required (not null)
            if (TypeHint == null)
            {
                throw new InvalidDataException("TypeHint is a required property for BehaviorDefinitionResource and cannot be null");
            }
            else
            {
                this.TypeHint = TypeHint;
            }
            this.Description = Description;
            this.PrerequisiteBehaviors = PrerequisiteBehaviors;
        }
        
        /// <summary>
        /// Description of the behavior
        /// </summary>
        /// <value>Description of the behavior</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Pre-requisite behaviors that an item must have in order to also have this behavior
        /// </summary>
        /// <value>Pre-requisite behaviors that an item must have in order to also have this behavior</value>
        [DataMember(Name="prerequisite_behaviors", EmitDefaultValue=false)]
        public List<Behavior> PrerequisiteBehaviors { get; set; }

        /// <summary>
        /// Configurable properties of the behavior
        /// </summary>
        /// <value>Configurable properties of the behavior</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<PropertyFieldResource> Properties { get; set; }

        /// <summary>
        /// The behavior type
        /// </summary>
        /// <value>The behavior type</value>
        [DataMember(Name="type_hint", EmitDefaultValue=false)]
        public string TypeHint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BehaviorDefinitionResource {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PrerequisiteBehaviors: ").Append(PrerequisiteBehaviors).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  TypeHint: ").Append(TypeHint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BehaviorDefinitionResource);
        }

        /// <summary>
        /// Returns true if BehaviorDefinitionResource instances are equal
        /// </summary>
        /// <param name="input">Instance of BehaviorDefinitionResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BehaviorDefinitionResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.PrerequisiteBehaviors == input.PrerequisiteBehaviors ||
                    (this.PrerequisiteBehaviors != null &&
                    this.PrerequisiteBehaviors.SequenceEqual(input.PrerequisiteBehaviors))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties))
                ) && 
                (
                    this.TypeHint == input.TypeHint ||
                    (this.TypeHint != null &&
                    this.TypeHint.Equals(input.TypeHint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.PrerequisiteBehaviors != null)
                    hashCode = hashCode * 59 + this.PrerequisiteBehaviors.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.TypeHint != null)
                    hashCode = hashCode * 59 + this.TypeHint.GetHashCode();
                return hashCode;
            }
        }

    }

}
