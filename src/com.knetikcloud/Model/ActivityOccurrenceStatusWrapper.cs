/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// ActivityOccurrenceStatusWrapper
    /// </summary>
    [DataContract]
    public partial class ActivityOccurrenceStatusWrapper :  IEquatable<ActivityOccurrenceStatusWrapper>
    {
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValueEnum
        {
            
            /// <summary>
            /// Enum SETUP for "SETUP"
            /// </summary>
            [EnumMember(Value = "SETUP")]
            SETUP,
            
            /// <summary>
            /// Enum OPEN for "OPEN"
            /// </summary>
            [EnumMember(Value = "OPEN")]
            OPEN,
            
            /// <summary>
            /// Enum LAUNCHING for "LAUNCHING"
            /// </summary>
            [EnumMember(Value = "LAUNCHING")]
            LAUNCHING,
            
            /// <summary>
            /// Enum PLAYING for "PLAYING"
            /// </summary>
            [EnumMember(Value = "PLAYING")]
            PLAYING,
            
            /// <summary>
            /// Enum FINISHED for "FINISHED"
            /// </summary>
            [EnumMember(Value = "FINISHED")]
            FINISHED,
            
            /// <summary>
            /// Enum ABANDONED for "ABANDONED"
            /// </summary>
            [EnumMember(Value = "ABANDONED")]
            ABANDONED
        }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public ValueEnum? Value { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityOccurrenceStatusWrapper" /> class.
        /// </summary>
        /// <param name="Value">Value.</param>
        public ActivityOccurrenceStatusWrapper(ValueEnum? Value = default(ValueEnum?))
        {
            this.Value = Value;
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityOccurrenceStatusWrapper {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivityOccurrenceStatusWrapper);
        }

        /// <summary>
        /// Returns true if ActivityOccurrenceStatusWrapper instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivityOccurrenceStatusWrapper to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityOccurrenceStatusWrapper input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

    }

}
