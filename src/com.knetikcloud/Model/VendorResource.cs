/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// VendorResource
    /// </summary>
    [DataContract]
    public partial class VendorResource :  IEquatable<VendorResource>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VendorResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorResource" /> class.
        /// </summary>
        /// <param name="Active">Whether the vendor is active.  Default &#x3D; true.</param>
        /// <param name="AdditionalProperties">A map of additional properties, keyed on the property name (private). Must match the names and types defined in the template for this user type, or be an extra not from the template.</param>
        /// <param name="Description">A description of the vendor.</param>
        /// <param name="ImageUrl">The url of an image for the vendor.</param>
        /// <param name="ManualApproval">Whether the vendor needs to manually approve invoices before they are paid.  A separate checkout flow is required in this case.  Default: false.</param>
        /// <param name="Name">The name of the vendor (required).</param>
        /// <param name="PrimaryContactEmail">The primary email address for the vendor.</param>
        /// <param name="PrimaryContactName">The name of the primary contact for the vendor.</param>
        /// <param name="PrimaryContactPhone">The primary phone number for the vendor.</param>
        /// <param name="SalesEmail">The email address for sale inquiries for the vendor.</param>
        /// <param name="SupportEmail">The email address for support inquiries for the vendor.</param>
        /// <param name="Template">A user template this user is validated against (private). May be null and no validation of properties will be done.</param>
        /// <param name="Url">The url for the vendor&#39;s site.</param>
        public VendorResource(bool? Active = default(bool?), Dictionary<string, Property> AdditionalProperties = default(Dictionary<string, Property>), string Description = default(string), string ImageUrl = default(string), bool? ManualApproval = default(bool?), string Name = default(string), string PrimaryContactEmail = default(string), string PrimaryContactName = default(string), string PrimaryContactPhone = default(string), string SalesEmail = default(string), string SupportEmail = default(string), string Template = default(string), string Url = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for VendorResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.Active = Active;
            this.AdditionalProperties = AdditionalProperties;
            this.Description = Description;
            this.ImageUrl = ImageUrl;
            this.ManualApproval = ManualApproval;
            this.PrimaryContactEmail = PrimaryContactEmail;
            this.PrimaryContactName = PrimaryContactName;
            this.PrimaryContactPhone = PrimaryContactPhone;
            this.SalesEmail = SalesEmail;
            this.SupportEmail = SupportEmail;
            this.Template = Template;
            this.Url = Url;
        }
        
        /// <summary>
        /// Whether the vendor is active.  Default &#x3D; true
        /// </summary>
        /// <value>Whether the vendor is active.  Default &#x3D; true</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// A map of additional properties, keyed on the property name (private). Must match the names and types defined in the template for this user type, or be an extra not from the template
        /// </summary>
        /// <value>A map of additional properties, keyed on the property name (private). Must match the names and types defined in the template for this user type, or be an extra not from the template</value>
        [DataMember(Name="additional_properties", EmitDefaultValue=false)]
        public Dictionary<string, Property> AdditionalProperties { get; set; }

        /// <summary>
        /// The date the vendor was added. Unix timestamp in seconds
        /// </summary>
        /// <value>The date the vendor was added. Unix timestamp in seconds</value>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public long? CreateDate { get; private set; }

        /// <summary>
        /// A description of the vendor
        /// </summary>
        /// <value>A description of the vendor</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The id of the vendor
        /// </summary>
        /// <value>The id of the vendor</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// The url of an image for the vendor
        /// </summary>
        /// <value>The url of an image for the vendor</value>
        [DataMember(Name="image_url", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Whether the vendor needs to manually approve invoices before they are paid.  A separate checkout flow is required in this case.  Default: false
        /// </summary>
        /// <value>Whether the vendor needs to manually approve invoices before they are paid.  A separate checkout flow is required in this case.  Default: false</value>
        [DataMember(Name="manual_approval", EmitDefaultValue=false)]
        public bool? ManualApproval { get; set; }

        /// <summary>
        /// The name of the vendor
        /// </summary>
        /// <value>The name of the vendor</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The primary email address for the vendor
        /// </summary>
        /// <value>The primary email address for the vendor</value>
        [DataMember(Name="primary_contact_email", EmitDefaultValue=false)]
        public string PrimaryContactEmail { get; set; }

        /// <summary>
        /// The name of the primary contact for the vendor
        /// </summary>
        /// <value>The name of the primary contact for the vendor</value>
        [DataMember(Name="primary_contact_name", EmitDefaultValue=false)]
        public string PrimaryContactName { get; set; }

        /// <summary>
        /// The primary phone number for the vendor
        /// </summary>
        /// <value>The primary phone number for the vendor</value>
        [DataMember(Name="primary_contact_phone", EmitDefaultValue=false)]
        public string PrimaryContactPhone { get; set; }

        /// <summary>
        /// The email address for sale inquiries for the vendor
        /// </summary>
        /// <value>The email address for sale inquiries for the vendor</value>
        [DataMember(Name="sales_email", EmitDefaultValue=false)]
        public string SalesEmail { get; set; }

        /// <summary>
        /// The email address for support inquiries for the vendor
        /// </summary>
        /// <value>The email address for support inquiries for the vendor</value>
        [DataMember(Name="support_email", EmitDefaultValue=false)]
        public string SupportEmail { get; set; }

        /// <summary>
        /// A user template this user is validated against (private). May be null and no validation of properties will be done
        /// </summary>
        /// <value>A user template this user is validated against (private). May be null and no validation of properties will be done</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public string Template { get; set; }

        /// <summary>
        /// The date the vendor was last updated. Unix timestamp in seconds
        /// </summary>
        /// <value>The date the vendor was last updated. Unix timestamp in seconds</value>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public long? UpdateDate { get; private set; }

        /// <summary>
        /// The url for the vendor&#39;s site
        /// </summary>
        /// <value>The url for the vendor&#39;s site</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VendorResource {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  ManualApproval: ").Append(ManualApproval).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PrimaryContactEmail: ").Append(PrimaryContactEmail).Append("\n");
            sb.Append("  PrimaryContactName: ").Append(PrimaryContactName).Append("\n");
            sb.Append("  PrimaryContactPhone: ").Append(PrimaryContactPhone).Append("\n");
            sb.Append("  SalesEmail: ").Append(SalesEmail).Append("\n");
            sb.Append("  SupportEmail: ").Append(SupportEmail).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorResource);
        }

        /// <summary>
        /// Returns true if VendorResource instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.AdditionalProperties == input.AdditionalProperties ||
                    (this.AdditionalProperties != null &&
                    this.AdditionalProperties.SequenceEqual(input.AdditionalProperties))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.ManualApproval == input.ManualApproval ||
                    (this.ManualApproval != null &&
                    this.ManualApproval.Equals(input.ManualApproval))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PrimaryContactEmail == input.PrimaryContactEmail ||
                    (this.PrimaryContactEmail != null &&
                    this.PrimaryContactEmail.Equals(input.PrimaryContactEmail))
                ) && 
                (
                    this.PrimaryContactName == input.PrimaryContactName ||
                    (this.PrimaryContactName != null &&
                    this.PrimaryContactName.Equals(input.PrimaryContactName))
                ) && 
                (
                    this.PrimaryContactPhone == input.PrimaryContactPhone ||
                    (this.PrimaryContactPhone != null &&
                    this.PrimaryContactPhone.Equals(input.PrimaryContactPhone))
                ) && 
                (
                    this.SalesEmail == input.SalesEmail ||
                    (this.SalesEmail != null &&
                    this.SalesEmail.Equals(input.SalesEmail))
                ) && 
                (
                    this.SupportEmail == input.SupportEmail ||
                    (this.SupportEmail != null &&
                    this.SupportEmail.Equals(input.SupportEmail))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.AdditionalProperties != null)
                    hashCode = hashCode * 59 + this.AdditionalProperties.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.ManualApproval != null)
                    hashCode = hashCode * 59 + this.ManualApproval.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PrimaryContactEmail != null)
                    hashCode = hashCode * 59 + this.PrimaryContactEmail.GetHashCode();
                if (this.PrimaryContactName != null)
                    hashCode = hashCode * 59 + this.PrimaryContactName.GetHashCode();
                if (this.PrimaryContactPhone != null)
                    hashCode = hashCode * 59 + this.PrimaryContactPhone.GetHashCode();
                if (this.SalesEmail != null)
                    hashCode = hashCode * 59 + this.SalesEmail.GetHashCode();
                if (this.SupportEmail != null)
                    hashCode = hashCode * 59 + this.SupportEmail.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

    }

}
