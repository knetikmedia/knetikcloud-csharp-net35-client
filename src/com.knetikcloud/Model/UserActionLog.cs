/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = com.knetikcloud.Client.SwaggerDateConverter;

namespace com.knetikcloud.Model
{
    /// <summary>
    /// UserActionLog
    /// </summary>
    [DataContract]
    public partial class UserActionLog :  IEquatable<UserActionLog>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserActionLog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserActionLog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserActionLog" /> class.
        /// </summary>
        /// <param name="ActionDescription">A description of the action taken (required).</param>
        /// <param name="ActionName">The name of the action taken (required).</param>
        /// <param name="Details">A map of additional details such as the target of the action.</param>
        /// <param name="UserId">The id of the user that took the action, if any. Read-only if not posting with LOGS_ADMIN.</param>
        public UserActionLog(string ActionDescription = default(string), string ActionName = default(string), Dictionary<string, string> Details = default(Dictionary<string, string>), int? UserId = default(int?))
        {
            // to ensure "ActionDescription" is required (not null)
            if (ActionDescription == null)
            {
                throw new InvalidDataException("ActionDescription is a required property for UserActionLog and cannot be null");
            }
            else
            {
                this.ActionDescription = ActionDescription;
            }
            // to ensure "ActionName" is required (not null)
            if (ActionName == null)
            {
                throw new InvalidDataException("ActionName is a required property for UserActionLog and cannot be null");
            }
            else
            {
                this.ActionName = ActionName;
            }
            this.Details = Details;
            this.UserId = UserId;
        }
        
        /// <summary>
        /// A description of the action taken
        /// </summary>
        /// <value>A description of the action taken</value>
        [DataMember(Name="action_description", EmitDefaultValue=false)]
        public string ActionDescription { get; set; }

        /// <summary>
        /// The name of the action taken
        /// </summary>
        /// <value>The name of the action taken</value>
        [DataMember(Name="action_name", EmitDefaultValue=false)]
        public string ActionName { get; set; }

        /// <summary>
        /// The date of the action, unix timestamp in seconds
        /// </summary>
        /// <value>The date of the action, unix timestamp in seconds</value>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public long? CreatedDate { get; private set; }

        /// <summary>
        /// A map of additional details such as the target of the action
        /// </summary>
        /// <value>A map of additional details such as the target of the action</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public Dictionary<string, string> Details { get; set; }

        /// <summary>
        /// The id of the log entry
        /// </summary>
        /// <value>The id of the log entry</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// The id of the api request that spawned the action, if generated internally
        /// </summary>
        /// <value>The id of the api request that spawned the action, if generated internally</value>
        [DataMember(Name="request_id", EmitDefaultValue=false)]
        public string RequestId { get; private set; }

        /// <summary>
        /// The id of the user that took the action, if any. Read-only if not posting with LOGS_ADMIN
        /// </summary>
        /// <value>The id of the user that took the action, if any. Read-only if not posting with LOGS_ADMIN</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserActionLog {\n");
            sb.Append("  ActionDescription: ").Append(ActionDescription).Append("\n");
            sb.Append("  ActionName: ").Append(ActionName).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserActionLog);
        }

        /// <summary>
        /// Returns true if UserActionLog instances are equal
        /// </summary>
        /// <param name="input">Instance of UserActionLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserActionLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActionDescription == input.ActionDescription ||
                    (this.ActionDescription != null &&
                    this.ActionDescription.Equals(input.ActionDescription))
                ) && 
                (
                    this.ActionName == input.ActionName ||
                    (this.ActionName != null &&
                    this.ActionName.Equals(input.ActionName))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.SequenceEqual(input.Details))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionDescription != null)
                    hashCode = hashCode * 59 + this.ActionDescription.GetHashCode();
                if (this.ActionName != null)
                    hashCode = hashCode * 59 + this.ActionName.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

    }

}
