/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SearchApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SearchApiTests
    {
        private SearchApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SearchApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SearchApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SearchApi
            //Assert.IsInstanceOfType(typeof(SearchApi), instance, "instance is a SearchApi");
        }

        
        /// <summary>
        /// Test AddSearchIndex
        /// </summary>
        [Test]
        public void AddSearchIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string id = null;
            //Object _object = null;
            //instance.AddSearchIndex(type, id, _object);
            
        }
        
        /// <summary>
        /// Test AddSearchMappings
        /// </summary>
        [Test]
        public void AddSearchMappingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<SearchReferenceMapping> mappings = null;
            //instance.AddSearchMappings(mappings);
            
        }
        
        /// <summary>
        /// Test DeleteSearchIndex
        /// </summary>
        [Test]
        public void DeleteSearchIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string id = null;
            //instance.DeleteSearchIndex(type, id);
            
        }
        
        /// <summary>
        /// Test DeleteSearchIndexes
        /// </summary>
        [Test]
        public void DeleteSearchIndexesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //instance.DeleteSearchIndexes(type);
            
        }
        
        /// <summary>
        /// Test SearchIndex
        /// </summary>
        [Test]
        public void SearchIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //Object query = null;
            //int? size = null;
            //int? page = null;
            //var response = instance.SearchIndex(type, query, size, page);
            //Assert.IsInstanceOf<PageResourceMapstringobject> (response, "response is PageResourceMapstringobject");
        }
        
    }

}
