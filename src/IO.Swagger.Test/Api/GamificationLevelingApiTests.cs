/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing GamificationLevelingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GamificationLevelingApiTests
    {
        private GamificationLevelingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GamificationLevelingApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GamificationLevelingApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GamificationLevelingApi
            //Assert.IsInstanceOfType(typeof(GamificationLevelingApi), instance, "instance is a GamificationLevelingApi");
        }

        
        /// <summary>
        /// Test CreateLevel
        /// </summary>
        [Test]
        public void CreateLevelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LevelingResource level = null;
            //var response = instance.CreateLevel(level);
            //Assert.IsInstanceOf<LevelingResource> (response, "response is LevelingResource");
        }
        
        /// <summary>
        /// Test DeleteLevel
        /// </summary>
        [Test]
        public void DeleteLevelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteLevel(name);
            
        }
        
        /// <summary>
        /// Test GetLevel
        /// </summary>
        [Test]
        public void GetLevelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetLevel(name);
            //Assert.IsInstanceOf<LevelingResource> (response, "response is LevelingResource");
        }
        
        /// <summary>
        /// Test GetLevelTriggers
        /// </summary>
        [Test]
        public void GetLevelTriggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetLevelTriggers();
            //Assert.IsInstanceOf<List<BreTriggerResource>> (response, "response is List<BreTriggerResource>");
        }
        
        /// <summary>
        /// Test GetLevels
        /// </summary>
        [Test]
        public void GetLevelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterName = null;
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetLevels(filterName, size, page, order);
            //Assert.IsInstanceOf<PageResourceLevelingResource> (response, "response is PageResourceLevelingResource");
        }
        
        /// <summary>
        /// Test GetUserLevel
        /// </summary>
        [Test]
        public void GetUserLevelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string name = null;
            //var response = instance.GetUserLevel(userId, name);
            //Assert.IsInstanceOf<UserLevelingResource> (response, "response is UserLevelingResource");
        }
        
        /// <summary>
        /// Test GetUserLevels
        /// </summary>
        [Test]
        public void GetUserLevelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //var response = instance.GetUserLevels(userId);
            //Assert.IsInstanceOf<PageResourceUserLevelingResource> (response, "response is PageResourceUserLevelingResource");
        }
        
        /// <summary>
        /// Test UpdateLevel
        /// </summary>
        [Test]
        public void UpdateLevelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //LevelingResource newLevel = null;
            //var response = instance.UpdateLevel(name, newLevel);
            //Assert.IsInstanceOf<LevelingResource> (response, "response is LevelingResource");
        }
        
        /// <summary>
        /// Test UpdateUserLevel
        /// </summary>
        [Test]
        public void UpdateUserLevelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string name = null;
            //int? progress = null;
            //instance.UpdateUserLevel(userId, name, progress);
            
        }
        
    }

}
